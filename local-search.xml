<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>未来计划</title>
    <link href="/routine/52122/"/>
    <url>/routine/52122/</url>
    
    <content type="html"><![CDATA[<h3 id="大的方向"><a href="#大的方向" class="headerlink" title="大的方向"></a>大的方向</h3><ul><li>全栈偏后端发展💻</li><li>试着考个研🎓</li></ul><h3 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h3><p>1.毕设把影音系统的视频解析部分移植到网页端</p><p>2.把之前写的计算器安卓项目重新编写，使其更加完整</p><p>3.写一个后端比较复杂，涉及技术尽可能多的毕设</p><h3 id="计划清单"><a href="#计划清单" class="headerlink" title="计划清单"></a>计划清单</h3><ul><li>nas影音系统</li><li>网盘系统(Cloudreve,咕咕鸽)</li></ul><h3 id="最近计划"><a href="#最近计划" class="headerlink" title="最近计划"></a>最近计划</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>1.b数、b+数、散列查找<br>2.最短路径问题(Floyd)<br>3.有向无环图<br>4.拓扑排序<br>5.关键路径</p>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用数学符号</title>
    <link href="/math/15616/"/>
    <url>/math/15616/</url>
    
    <content type="html"><![CDATA[<h3 id="数字符号"><a href="#数字符号" class="headerlink" title="数字符号"></a>数字符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⓿ ❶  ❷  ❸  ❹  ❺  ❻  ❼  ❽  ❾  ❿  ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ<br>ⅰ ⅱ ⅲ ⅳ ⅴ ⅵ ⅶ ⅷ ⅸ ⅹ<br></code></pre></td></tr></table></figure><h3 id="几何符号"><a href="#几何符号" class="headerlink" title="几何符号"></a>几何符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">⊥   ‖   ∠   ⌒   ⊙   ≡   ≌   △<br></code></pre></td></tr></table></figure><h3 id="代数符号"><a href="#代数符号" class="headerlink" title="代数符号"></a>代数符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">∝   ∧   ∨   ～  ∫   ≠   ≤   ≥   ≈   ∞<br></code></pre></td></tr></table></figure><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">×   ÷   √   ±<br></code></pre></td></tr></table></figure><h3 id="集合符号"><a href="#集合符号" class="headerlink" title="集合符号"></a>集合符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">∪   ∩   ∈   ⊆   ⊂   ⊇   ⊃<br></code></pre></td></tr></table></figure><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">∑   <span class="hljs-literal">π</span>   •<br></code></pre></td></tr></table></figure><h3 id="推理符号"><a href="#推理符号" class="headerlink" title="推理符号"></a>推理符号</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">a</span>|<span class="hljs-string">   ⊥   ∽   △   ∠   ∩   ∪   ≠   ≡   ↗   ↘   ↙</span><br><span class="hljs-string"> ±    ≥    ≤    ∈   ←   ↑    →   ↓   ↖  ‖     ∧   ∨</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>符号</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(67)王道数据结构-堆排序</title>
    <link href="/iecore/25697/"/>
    <url>/iecore/25697/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>堆排序是一种树形选择排序方法，其特点：在排序过程中，将L[1…n]视为一棵完全二叉树的顺序存储结构，利用完全二叉树中双亲结点和孩子结点之间的内在关系，在当前无序区中选择关键字最大(或最小)的元素</p><p>若n个关键字序列L[1…n]满足下面某一种性质，则称为堆(Heap)<br>①若满足: L(i) ≥ L(2i)且L(i)≥L(2i+1) (1 ≤ i ≤ n/2)-大根堆(大顶堆)<br>②若满足: L(i) ≤ L(2i)且L(i)≤L(2i+1) (1 ≤ i ≤ n/2)-小根堆(小顶堆)</p><p>显然，在大根堆中，最大元素存放在根结点中，且对其任一非根结点，它的值小于等于其双亲结点值。小根堆的定义刚好相反，根结点是最小元素。</p><p>堆经常被用来实现优先级队列，优先级队列在操作系统的作业调度和其他领域有广泛的应用</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><h4 id="建立堆栈"><a href="#建立堆栈" class="headerlink" title="建立堆栈"></a>建立堆栈</h4><p>1.编号≤n/2的所有结点依次下坠调整(自低向上处理各分支节点)<br>2.小元素层逐层下坠(与关键字更大的孩子交换)</p><h4 id="进行排序"><a href="#进行排序" class="headerlink" title="进行排序"></a>进行排序</h4><p>1.将堆顶元素加入有序字队列(堆顶元素与堆低元素交换)<br>2.堆低元素换到堆顶后，需要进行下坠调整，恢复大根堆的特性<br>3.上述过程重复n-1趟</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//建立大根堆</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BuildMaxHeap</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len/<span class="hljs-number">2</span>; i&gt;<span class="hljs-number">0</span>; i--) &#123; <span class="hljs-comment">//从i=[n/2]~1,反复调整堆</span><br>        AdjustDown(A,i,len); <span class="hljs-comment">//从后往前调整所有非终端结点</span><br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">//将以k为根的子树调整为大根堆</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AdjustDown</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    A[<span class="hljs-number">0</span>] = A[k]; <span class="hljs-comment">//A[0]暂存子树的根结点</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">2</span>*k; i &lt;= len; i *= <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//沿key较大的子结点向下筛选</span><br>        <span class="hljs-keyword">if</span>(i &lt; len &amp;&amp; A[i] &lt; A[i+<span class="hljs-number">1</span>]) &#123;<br>            i++; <span class="hljs-comment">//取key较大的子结点的下标</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(A[<span class="hljs-number">0</span>] &gt;= A[i]) &#123;<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">//筛选结束</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            A[k]=A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>            k=i; <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>        &#125;<br>    &#125;<br>    A[k]=A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><br><span class="hljs-comment">//堆排序的完整逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    BuildMaxHeap(A, len); <span class="hljs-comment">//初始建堆</span><br>    <span class="hljs-keyword">for</span>(i=len; i&gt;<span class="hljs-number">1</span>; i--) &#123; <span class="hljs-comment">//n-1趟的交换和建堆过程</span><br>        Swap(A[i],A[<span class="hljs-number">1</span>]); <span class="hljs-comment">//输出堆顶元素(和堆底元素交换)</span><br>        AdjustDown(A,<span class="hljs-number">1</span>,i<span class="hljs-number">-1</span>); <span class="hljs-comment">//整理，把剩余的i-1个元素整理成堆</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>建堆时间为O(n)，之后有n-1次向下调整操作，每次调整的时间复杂度为O(h)，排堆的时间复杂度为O(nlog2n)故在最好、最坏和平均情况下，堆排序的时间复杂度为O(nlog2n)</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>仅使用了常数个辅助单元，所以空间复杂度为O(1)</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>进行筛选时，有可能把后面相同关键字的元素调整到前面，所以堆排序算法是一种不稳定的排序方法</p><h3 id="插入删除"><a href="#插入删除" class="headerlink" title="插入删除"></a>插入删除</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>1.新元素放到表尾(堆底)<br>2.根据大/小堆栈的要求，新元素不断“上升”，直到无法继续上升为止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//向上调整堆</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AdjustUp</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">//参数k为向上调整的结点，也为堆的元素个数</span><br>    A[<span class="hljs-number">0</span>]=A[k];<br>    <span class="hljs-keyword">int</span> i=k/<span class="hljs-number">2</span>; <span class="hljs-comment">//若结点值大于双亲结点，则将双亲结点向下调，并继续向上比较</span><br>    <span class="hljs-keyword">while</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;A[i]&lt;A[<span class="hljs-number">0</span>]) &#123; <span class="hljs-comment">//循环跳出条件</span><br>        A[k]=A[i]; <span class="hljs-comment">//双亲结点下调</span><br>        k=i; <br>        i=k/<span class="hljs-number">2</span>; <span class="hljs-comment">//继续向上比较</span><br>    &#125;<br>    A[k]=A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//复制到最终位置</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>堆排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(66)王道数据结构-简单选择排序</title>
    <link href="/iecore/8554/"/>
    <url>/iecore/8554/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>假设排序表为L[1…n]，第i趟排序即从L[i…n]中选择关键字最小的元素与L(i)交换，每一趟排序可以确定一个元素的最终位置，这样经过n-1趟排序就可使得整个排序表有序</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//简单选择排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//对表A做简单选择排序，A[]从0开始存放元素</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++) &#123; <span class="hljs-comment">//一共进行n-1趟</span><br>        min=i; <span class="hljs-comment">//记录最小元素位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n; j++) &#123;  <span class="hljs-comment">//在A[i...n-1]中选择最小的元素</span><br>            <span class="hljs-keyword">if</span>(A[j]&lt;A[min]) &#123;<br>                min=j;<br>            &#125;  <br>        &#125;   <br>        <span class="hljs-keyword">if</span>(min!=j) &#123;<br>            swap(A[i],A[min]);<br>        &#125;  <br>    &#125;<br>&#125; <br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>简单选择排序过程中，元素移动的操作次数很少，不会超过3(n- 1)次，最好的情况是移动0次，此时对应的表已经有序；但元素间比较的次数与序列的初始状态无关，始终是n(n-1)/2次，所以时间复杂度始终是O(n^2)</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>仅使用常数个辅助单元，故空间效率为O(1)</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>在第i趟找到最小元素后，和第i个元素交换，可能会导致第i个元素与其含有相同关键字元素的相对位置发生改变。例如，表L={2, 2,1 }，经过一趟排序后L= {1, 2, 2}， 最终排序序列也是L= {1, 2, 2}，显然，2与2的相对次序已发生变化。因此，简单选择排序是一种不稳定的排序方法</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>简单选择排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(65)王道数据结构-快速排序</title>
    <link href="/iecore/36574/"/>
    <url>/iecore/36574/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>快速排序是对冒泡排序的一种改进， 其基本思想是基于分治法的：在待排序表L[1…n]中任取一个元素pivot作为基准，通过一趟排序将待排序表划分为独立的两部分L[1…k-1]和 L[k+1…n]，使得L[1…k-1]1中的所有元素小于pivot, L[k+1…。n]中的所有元素大于等于pivot，则pivot放在了其最终位置L(k)上，这个过程称为一趟快速排序。而后分别递归地对两个子表重复上述过程，直至每部分内只有一个元素或空为止，即所有元素放在了其最终位置上。</p><p><strong>注意:</strong> 在快速排序算法中，并不产生有序子序列，但每趟排序后会将一个元素(基准元素)放到其最终的位置上。</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>首先假设划分算法已知，记为Partition()， 返回的是上述的k，注意到L(k)已在最终的位置，因此可以先对表进行划分，而后对两个表调用同样的排序操作。因此可以递归地调用快速排序算法进行排序</p><p>假设每次总以当前表中第一个元素作为枢轴值(基准)来对表进行划分，则必须将表中比枢轴值大的元素向右移动，将比枢轴值小的元素向左移动，使得一趟Partition()操作后，表中的元素被枢轴值一分为二</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>   ElemType pivot=A[low]; <span class="hljs-comment">//将当前表中第一个元素设为枢轴值，对表进行划分</span><br>   <span class="hljs-keyword">while</span>(low&lt;high) &#123; <span class="hljs-comment">//循环跳出条件</span><br>       <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; A[high] &gt;= pivot) &#123;<br>            --high;<br>       &#125;   <br>       A[low]=A[high]; <span class="hljs-comment">//将比枢轴值小的元素移动到左端</span><br>       <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot) &#123;<br>            ++low; <br>       &#125; <br>       A[high]=A[low]; <span class="hljs-comment">//将比枢轴值大的元素移动到右端</span><br>   &#125;<br>   A[low]=pivot; <span class="hljs-comment">//枢轴元素存放到最终位置</span><br>   <span class="hljs-keyword">return</span> low; <span class="hljs-comment">//返回存放枢轴的最终位置</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high) &#123; <span class="hljs-comment">//递归跳出的条件</span><br>        <span class="hljs-comment">//Partition()就是划分操作，将表A[low...high]划分为满足上述条件的两个字表</span><br>        <span class="hljs-keyword">int</span> pivotpos = Partition(A,low,high); <span class="hljs-comment">//划分</span><br>        QuickSort(A,low,pivotpos<span class="hljs-number">-1</span>); <span class="hljs-comment">//依次对两个子表进行递归排序</span><br>        QuickSort(A,pivotpos+<span class="hljs-number">1</span>,high); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>算法表现主要取决于递归深度，若每次划分越均匀，则递归深度越低。划分越不均匀，则递归深度越高</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>由于快速排序是递归的，需要借助一个递归工作栈来保存每层递归调用的必要信息，其容量应与递归调用的最大深度一致。<br>1.最好空间复杂度为O(log2n)<br>2.最坏空间复杂度为O(n)</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>在最理想的状态下，即Partition()可能做到最平衡的划分中，得到的两个子问题的大小都不可能大于n/2，在这种情况下，快速排序的运行速度将大大提升<br>1.最好时间复杂度为O(nlog2n)<br>2.最坏时间复杂度为O(n^2)<br>3.平均时间复杂度为O(nlog2n)</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>在划分算法中，若右端区间有两个关键字相同，且均小于基准值的记录，则在交换到左端区间后，它们的相对位置会发生变化，即快速排序是一种不稳定的排序方法</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>快速排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(64)王道数据结构-冒泡排序</title>
    <link href="/iecore/12399/"/>
    <url>/iecore/12399/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>根据序列中两个元素关键字的比较结果来对换这两个记录在序列中的位置。</p><p>冒泡排序基本思想是：假设待排序表长为n，从后往前(或从前往后) 两两比较相邻元素的值，若为逆序(即A[i-1]&gt;A[i])，则交换它们，直到序列比较完。</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//用冒泡排序法将序列A中的元素按从小到大排序</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++) &#123;<br>        flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">//表示本趟冒泡是否发生交换标志</span><br>        <span class="hljs-keyword">for</span>(j=n<span class="hljs-number">-1</span>; j&gt;i; j--) &#123;<br>            <span class="hljs-keyword">if</span>(A[j<span class="hljs-number">-1</span>].key&gt;A[j].key) &#123; <span class="hljs-comment">//若为逆序</span><br>                swap(A[j<span class="hljs-number">-1</span>], A[j]); <span class="hljs-comment">//交换</span><br>                flag=<span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;   <br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">//本趟遍历后没有发生交换，说明表已经有序</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为O(1)</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p><strong>最好时间复杂度:</strong> O(n)<br><strong>最坏时间复杂度:</strong> O(n^2)<br><strong>平均时间复杂度:</strong> O(n^2)</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>由于i&gt;j且A[i].key=A[j].key时，不会交换两个元素，因此冒泡排序是一种稳定的排序方法。</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>冒泡排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(63)王道数据结构-希尔排序</title>
    <link href="/iecore/40944/"/>
    <url>/iecore/40944/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>直接插入排序算法适用于基本有序的排序表和数据量不大的排序表。基于这两点，提出了希尔排序，又称缩小增量排序。</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>先将待排序表分割成若干形如L[i, i+d, i+2d,…, i+kd]的“特殊”子表，分别进行直接插入排序，当整个表中的元素已呈“基本有序”时，再对全体记录进行一次直接插入排序。</p><h4 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h4><p>先取一个小于n的步长d1，把表中的全部记录分成d1组，所有距离为d1的倍数的记录放在同一组中，在各组中进行直接插入排序；然后取第二个步长d2&lt;d1，重复上述过程，直到所取到的dt=1，即所有记录已放在同一组中，再进行直接插入排序，由于此时已经具有较好的局部有序性，故可以很快得到最终结果。</p><h4 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-comment">//对顺序表做希尔插入排序，本算法和直接插入排序相比，做了以下修改：</span><br><span class="hljs-comment">//1.前后记录位置的增量是dk，不是1</span><br><span class="hljs-comment">//2.A[0]只是暂存单元，不是哨兵，当j&lt;=0时，插入位置已到</span><br>    <span class="hljs-keyword">for</span>(dk=n/<span class="hljs-number">2</span>; dk&gt;=<span class="hljs-number">1</span>; dk=dk/<span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//步长变化</span><br>        <span class="hljs-keyword">for</span>(i=dk+<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(A[i].key&lt;A[i-dk].key) &#123; <span class="hljs-comment">//需将A[i]插入有序增量子表</span><br>                A[<span class="hljs-number">0</span>]=A[i]; <span class="hljs-comment">//暂存在A[0]</span><br>                <span class="hljs-keyword">for</span>(j=i-dk; j&gt;<span class="hljs-number">0</span>&amp;&amp;A[<span class="hljs-number">0</span>].key&lt;A[j].key; j-=dk) &#123;<br>                    A[j+dk]=A[j]; <span class="hljs-comment">//记录后移，查找插入的位置</span><br>                &#125;<br>                A[j+dk]=A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//插入</span><br>             &#125;<br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>仅使用了常数个辅助单元，因而空间复杂度为O(1)。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>由于希尔排序的时间复杂度依赖于增量序列的函数，这涉及数学上尚未解决的难题，所以其时间复杂度分析比较困难。当n在某个特定范围时，希尔排序的时间复杂度约为O(n1.3)。在最坏情况下希尔排序的时间复杂度为O(n)。</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>当相同关键字的记录被划分到不同的子表时，可能会改变它们之间的相对次序，因此希尔排序是一种不稳定的排序方法。</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>希尔排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(62)王道数据结构-插入排序</title>
    <link href="/iecore/43007/"/>
    <url>/iecore/43007/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>每次将一个待排序的记录按其关键字大小插入到前面已安排好序的子序列中，直到全部记录插入完成。</p><p>插入排序在实现上通常采用就地排序[空间复杂度为O(1)]，因而在从后向前的比较过程中，需要反复把已排序元素逐步向后挪位，为新元素提供插入空间。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>假设在排序过程中，待排序表L[1…n]在某次排序过程中的某一时刻状态如下:</p><p>有序序列L[1…i-1]     L(i)      无序序列L[i+i…n]</p><p>要将元素L(i)插入到已有序的子序列L[1…i-1]中，需要执行以下操作(为避免混淆，下面用L[]表示一个表，而用L()表示一个元素):</p><p>1)查找出L(i)在L[1…i-1]中的插入位置k<br>2)将L[k…i-1]中的所有元素全部后移一个位置。<br>3)将L(i)复制到L(k)。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//直接插入排序</span><br><span class="hljs-keyword">void</span> InsertSort[ElemType A[], <span class="hljs-keyword">int</span> n) &#123;<br>    <span class="hljs-keyword">int</span> i,j,temp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123; <span class="hljs-comment">//将各元素插入已排好序的序列中</span><br>        <span class="hljs-keyword">if</span>(A[i]&lt;A[i<span class="hljs-number">-1</span>])  &#123;<span class="hljs-comment">//若A[i]关键字小于前驱</span><br>            temp=A[i]; <span class="hljs-comment">//用temp暂存A[i]</span><br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>&amp;&amp;&lt;A[j]&gt;temp; --j) &#123; <span class="hljs-comment">//检查所有前面已排好序的元素</span><br>                A[j+<span class="hljs-number">1</span>]=A[j];  <span class="hljs-comment">//所有大于temp的元素都向后挪位</span><br>            &#125;<br>            A[j+<span class="hljs-number">1</span>]=temp; <span class="hljs-comment">//复制到插入位置</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代码实现-带哨兵"><a href="#代码实现-带哨兵" class="headerlink" title="代码实现(带哨兵)"></a>代码实现(带哨兵)</h4><p>为了实现对L[1…n]的排序，可以将L(2)~L(n)依次插入到前面已排好序的子序列中，初始假定L[1]是一个已排好序的子序列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//直接插入排序（带哨兵）</span><br><span class="hljs-keyword">void</span> InsertSort[ElemType A[], <span class="hljs-keyword">int</span> n) &#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=n; i++) &#123; <span class="hljs-comment">//依次将A[2]~A[n]插入到前面已排序序列</span><br>        <span class="hljs-keyword">if</span>(A[i].key&lt;A[i<span class="hljs-number">-1</span>].key) &#123;<span class="hljs-comment">//若A[i]关键字小于其前驱，将A[i]插入有序表</span><br>            A[<span class="hljs-number">0</span>]=A[i]; <span class="hljs-comment">//复制为哨兵，A[0]不存放元素</span><br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>; A[<span class="hljs-number">0</span>].key&lt;A[j].key; --j) &#123;<span class="hljs-comment">//从后往前查找待插入位置</span><br>                A[j+<span class="hljs-number">1</span>]=A[j]; <span class="hljs-comment">//向后挪位</span><br>            &#125;  <br>            A[j+<span class="hljs-number">1</span>]=A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//复制到插入位置</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h3><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>仅使用了常数个辅助单元，因而空间复杂度为O(1)。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>在排序过程中，向有序子表中逐个地插入元素的操作进行了n-1趟，每趟操作都分为比较关键字和移动元素，而比较次数和移动次数取决于待排序表的初始状态。</p><p><strong>最好时间复杂度(全部有序):</strong> O(n)<br><strong>最坏时间复杂度(全部逆序):</strong> O(n^2)<br><strong>平均时间复杂度:</strong> O(n^2)</p><p><strong>稳定性:</strong> 由于每次插入元素时总是从后向前先比较再移动，所以不会出现相同元素相对位置发生变化的情况，即直接插入排序是一个稳定的排序方法。</p><p><strong>适用性:</strong> 直接插入排序算法适用于顺序存储和链式存储的线性表。为链式存储时，可以从前往后查找指定元素的位置。</p><p><strong>注意:</strong> 大部分排序算法都仅适用于顺序存储的线性表。</p><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><p>折半插入排序是对插入排序的优化。每趟插入的过程中，都进行了两项工作:<br>①从前面的子表中查找出待插入元素应该被插入的位置<br>②给插入位置腾出空间，将待插入元素复制到表中的插入位置</p><h4 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h4><p>1.折半查找找到应插入到位置，仅适用于顺序表<br>2.一直到low &gt; high时才停止折半查找。当mid所指元素等于当前元素时，应继续令low = mid + 1，以保证稳定性。最终应将当前元素插入到low所指位置(即high + 1)</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>当排序表为顺序存储的线性表时，可以对直接插入排序算法做如下改进：由于是顺序存储的线性表，所以查找有序子表时可以用折半查找来实现。确定待插入位置后，就可统地向后移动元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//折半插入排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(ElemType A[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,low,high,mid;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=n; i++) &#123;<span class="hljs-comment">//依次将A[2]~A[n]插入前面的已排序序列 </span><br>        A[<span class="hljs-number">0</span>]=A[i]; <span class="hljs-comment">//将A[i]暂存到A[0]</span><br>        low=<span class="hljs-number">1</span>; <br>        high=<span class="hljs-number">1</span>; <span class="hljs-comment">//设置折半查找的范围</span><br>        <span class="hljs-keyword">while</span>(low&lt;=high) &#123; <span class="hljs-comment">//折半查找(默认递增有序)</span><br>            mid=(low+high)/<span class="hljs-number">2</span>; <span class="hljs-comment">//取中间点</span><br>            <span class="hljs-keyword">if</span>(A[mid].key&gt;A[<span class="hljs-number">0</span>].key) &#123;<br>                high=mid<span class="hljs-number">-1</span>; <span class="hljs-comment">//查找左半子表</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                low=mid+<span class="hljs-number">1</span>; <span class="hljs-comment">//查找右半子表</span><br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>; j&gt;=high+<span class="hljs-number">1</span>; --j) &#123;<br>            A[j+<span class="hljs-number">1</span>]=A[j]; <span class="hljs-comment">//统一后移元素，空出插入位置</span><br>        &#125;<br>        A[high+<span class="hljs-number">1</span>]=A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//插入操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>插入排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(61)王道数据结构-排序的基本概念</title>
    <link href="/iecore/57043/"/>
    <url>/iecore/57043/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>排序就是重新排列表中的元素，使表中的元素满足按关键字递增或递减的过程。</p><h4 id="严格定义"><a href="#严格定义" class="headerlink" title="严格定义"></a>严格定义</h4><p><strong>输入:</strong> n个记录R1,R2,…,Rn，对应的关键字为ki,k2,…,kn</p><p><strong>输出:</strong> 输入序列的一个重排R1’,R2’,…,Rn’，使得有ki≤k2’≤…≤kn’， (其中“≤”可以换成其他的比较大小的符号)</p><h4 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h4><p>内部排序算法的性能取决于算法的时间复杂度和空间复杂度，而时间复杂度发般是由比较和移动的次数决定的。</p><p>算法的稳定性。若待排序表中有两个元素Ri和Rj，其对应的关键字keyi=keyj，且在排序前Ri在Rj的前面，若使用某一排序算法排序后，Ri仍然在Rj的前面，则称这个排序算法是稳定的，否则称排序算法是不稳定的。需要注意的是，算法是否具有稳定性并不能衡量一个算法的优劣，它主要是对算法的性质进行描述。</p><p><strong>示例一:</strong><br>排序前:6, <font color='blue'>3</font>, 2, 5, 1, 4, <font color='red'>3</font></p><p>排序后:1, 2, <font color='blue'>3</font>, <font color='red'>3</font>, 4, 5, 6</p><p>排序前后，红色的三和蓝色的三顺序没变，所以稳定</p><p><strong>示例二:</strong><br>排序前:6, <font color='blue'>3</font>, 2, 5, 1, 4, <font color='red'>3</font></p><p>排序后:1, 2, <font color='red'>3</font>, <font color='blue'>3</font>, 4, 5, 6</p><p>排序前后，红色的三和蓝色的三顺序变了，所以不稳定</p><p><strong>注意:</strong> 对于不稳定的排序算法，只需举出一组关键字的实例，说明它的不稳定性即可</p><h3 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h3><h4 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h4><p>是指在排序期间元素全部存放在内存中的排序。关注的是如何使算法时间空间复杂度更低</p><h4 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h4><p>是指在排序期间元素无法全部同时存放在内存中，必须在排序的过程中根据要求不断地在内、外存之间移动的排序。除了关注时间空间复杂度以外还要关注如何使读/写磁盘次数更少</p><p>一般情况下，内部排序算法在执行过程中都要进行两种操作：比较和移动。通过比较两个关键字，确定对应元素的前后关系，然后通过移动元素以达到有序。当然，并非所有的内部排序算法都要基于比较操作，事实上，基数排序就不基于比较。</p><p>学习网站:<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>B树</tag>
      
      <tag>散列查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(60)王道数据结构-散列查找</title>
    <link href="/iecore/19463/"/>
    <url>/iecore/19463/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>B树</tag>
      
      <tag>散列查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(59)王道数据结构-B+树</title>
    <link href="/iecore/22314/"/>
    <url>/iecore/22314/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>B树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(58)王道数据结构-B树</title>
    <link href="/iecore/6253/"/>
    <url>/iecore/6253/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>B树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(57)王道数据结构-分块查找</title>
    <link href="/iecore/56249/"/>
    <url>/iecore/56249/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>分块查找又称索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。缩印表中保存每个分块的最大关键字和分块的存储区间。</p><p>具有块内无序、块间有序的特点</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>将查找表分为若干子块。块内的元素可以无序，但块之间是有序的，即第一个块中的最大关键字小于第二个块中的所有记录的关键字，第二个块中的最大关键字小于第三个块中的所有记录的关键字，以此类推。再建立一个索引表，索引表中的每个元素含有各块的最大关键字和各块中的第一个元素的地址，索引表按关键字有序排列。</p><h4 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h4><ul><li>第一步是在索引表中确定待查记录所在的块，可以顺序查找或折半查找索引表。</li><li>第二步是在块内顺序查找。</li></ul><h3 id="ASL"><a href="#ASL" class="headerlink" title="ASL"></a>ASL</h3><p>ASL = 查索引的平均查找长度 + 查分块的平均查找长度</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>设n个记录，均匀分为b块，没块s个记录</p><p><strong>顺序查找索引表</strong></p><p>$$<br>ASL = \frac{b+1}{2} + \frac{s+1}{2}<br>$$</p><p>$$<br>当s = \sqrt{n}时，ASL_{min} = \sqrt{n} + 1<br>$$</p><p><strong>折半查找索引表</strong></p><p>$$<br>ASL = [log_2(b+1)] + \frac{s+1}{2}<br>$$</p><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>对索引表进行折半查找时，若索引表中不包含目标关键字，则折半查找最终停在low&gt;high，要在low所指分块中查找</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>查找</tag>
      
      <tag>分块查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(56)王道数据结构-折半查找</title>
    <link href="/iecore/51831/"/>
    <url>/iecore/51831/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>折半查找又称二分查找，它仅适用于有序的顺序表。</p><p>基本思路是：<br>1.在[low,high]之间找目标关键字，每次检查mid = (low+heigh)/2<br>2.根据mid所指元素与目标关键字的大小调整low或high，不断缩小low和high的范围<br>3.若low &gt; high则查找失败</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span> <span class="hljs-comment">//查找表的数据结构（顺序表）</span><br>    ElemType *elem; <span class="hljs-comment">//动态数组基址</span><br>    <span class="hljs-keyword">int</span> TableLen; <span class="hljs-comment">//表的长度</span><br>&#125;SSTable; <br><br><span class="hljs-comment">//折半查找</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Binary_Search</span><span class="hljs-params">(SeqList L, ElemType key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> low=<span class="hljs-number">0</span>, high=L.TableLen<span class="hljs-number">-1</span>, mid;<br>    <span class="hljs-keyword">while</span>(low&lt;=high) &#123;<br>        mid=(low+high)/<span class="hljs-number">2</span>; <span class="hljs-comment">//取中间位置</span><br>        <span class="hljs-keyword">if</span>(L.elem[mid]==key) &#123;<br>            <span class="hljs-keyword">return</span> mid; <span class="hljs-comment">//查找成功则返回所在位置</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.elem[mid]&gt;key) &#123;<br>            high=mid<span class="hljs-number">-1</span>; <span class="hljs-comment">//从前半部分继续查找</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low=mid+<span class="hljs-number">1</span>; <span class="hljs-comment">//从后半部分继续查找</span><br>        &#125;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">//查找失败，返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判定树"><a href="#判定树" class="headerlink" title="判定树"></a>判定树</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>1.由mid所指元素将原有元素分割到左右子树中<br>2.key: 右子树结点树 - 左子树结点树其中值为0或1</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>1.折半查找的判定树是平衡的二叉排序树(左&lt;中&lt;右)</p><p>2.折半查找判定树，只有最下面一层是不满的</p><p>3.若查找表有n个关键字，则失败结点有n+1个</p><p>4.树高h = [log2(n+1)](不包含失败结点)</p><p><strong>时间复杂度:</strong> O(log2n)</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>查找</tag>
      
      <tag>折半查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(55)王道数据结构-顺序查找</title>
    <link href="/iecore/26862/"/>
    <url>/iecore/26862/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>顺序查找又称线性查找，主要用于在线性表中进行查找。顺序查找通常分为对一般的无序线性表的顺序查找和对按关键字有序的顺序表的顺序查找。</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-comment">//查找表的数据结构</span><br>    ElemType *elem; <span class="hljs-comment">//动态数组基址，建表时按实际长度分配，0号单元留空</span><br>    Int TableLen; <span class="hljs-comment">//表的长度</span><br>&#125;SSTable;<br><span class="hljs-comment">//顺序查找</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Search_Seq</span><span class="hljs-params">(SSTable ST, ElemType key)</span> </span>&#123;<br><span class="hljs-comment">//在顺序表ST中顺序查找关键字为key的元素。若找到则返回该元素在表中的位置</span><br>    <span class="hljs-keyword">for</span>(i=ST.TableLen; ST.elem[i]!=key; --i); <span class="hljs-comment">//从后往前找</span><br>    <span class="hljs-keyword">return</span> i; <span class="hljs-comment">//若表中不存在关键字为key的元素，将查找到i为0时退出for循环</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="引入哨兵"><a href="#引入哨兵" class="headerlink" title="引入哨兵"></a>引入哨兵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-comment">//查找表的数据结构（顺序表）</span><br>    ElemType *elem; <span class="hljs-comment">//动态数组基址，建表时按实际长度分配，0号单元留空</span><br>    Int TableLen; <span class="hljs-comment">//表的长度</span><br>&#125;SSTable;<br><span class="hljs-comment">//顺序查找</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Search_Seq</span><span class="hljs-params">(SSTable ST, ElemType key)</span> </span>&#123;<br><span class="hljs-comment">//在顺序表ST中顺序查找关键字为key的元素。若找到则返回该元素在表中的位置</span><br>    ST.elem[<span class="hljs-number">0</span>]=key; <span class="hljs-comment">//哨兵</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=ST.TableLen; ST.elem[i]!=key; --i); <span class="hljs-comment">//从后往前找</span><br>    <span class="hljs-keyword">return</span> i; <span class="hljs-comment">//若表中不存在关键字为key的元素，将查找到i为0时退出for循环</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述算法中，将ST.elem[0]称为”哨兵”。引入它的目的是使得Search_Seq内的循环不必判断数组是否会越界，因为满足i==0时，循环一定会跳出。需要说明的是，在程序中引入”哨兵”并不是这个算法独有的。引入”哨兵”可以避免很多不必要的判断语句，从而提高程序效果。</p><h3 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h3><p>$$<br>ASL_T = \frac{1+2+3+…+n}{n} = \frac{n+1}{2}<br>$$</p><p>$$<br>ASL_F = n + 1<br>$$<br>通常，查找表中记录的查找概率并不相等。若能预先得知每个记录的查找概率，则应先对记录的查找概率进行排序，使表中记录按查找概率由小至大重新排列。</p><p>综上所述，顺序查找的缺点是当n较大时，平均查找长度较大，效率低；优点是对数据元素的存储没有要求，顺序存储或链式存储皆可。对表中记录的有序性也没有要求，无论记录是否按关键码有序，均可应用。同时还需注意，对线性的链表只能进行顺序查找。</p><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><p>优化是针对有序表的。若在查找之前就已经知道表是关键字有序的，则查找失败时可以不用再比较到表的另一端就能返回查找失败的信息，从而降低顺序查找失败的平均查找长度。</p><p>假设表L是按关键字从小到大排列的，查找的顺序是从前往后，待查找元素的关键字为key，当查找到第i个元素时，发现第i个元素对应的关键字小于key，但第i+ 1个元素对应的关键字大于key，这时就可返回查找失败的信息，因为第i个元素之后的元素的关键字均大于key，所以表中不存在关键字为key的元素。</p><p>$$<br>ASL_F = \frac{1+2+3+…+n+n}{n+1} = \frac{n}{2} + \frac{n}{n+1}<br>$$<br>在有序表的顺序查找中，查找成功的平均查找长度和一般线性表的顺序查找一样。查找失败时，查找指针一定走到了某个失败结点。这些失败结点是我们虚构的空结点，实际上是不存在的，所以到达失败结点时所查找的长度等于它上面的一个圆形结点的所在层数。</p><h3 id="分析ASL"><a href="#分析ASL" class="headerlink" title="分析ASL"></a>分析ASL</h3><p>可以用如图所示的判定树来描述有序顺序表的查找过程。树中的圆形结点表示有序顺序表中存在的元素；树中的矩形结点称为失败结点(注意，若有n个查找成功结点，则必定相应地有n+1个查找失败结点)，它描述的是那些不在表中的数据值的集合。若查找到失败结点，则说明查找不成功。</p><ul><li>一个成功结点的查找长度 = 自身所在层数</li><li>一个失败的查找长度 = 其父节点所在层数</li><li>默认情况下，各种失败情况成功情况都等概率发生</li></ul><p><strong>查找概率不相同时，按查找概率降序排列</strong></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>查找</tag>
      
      <tag>顺序查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(54)王道数据结构-查找的基本概念</title>
    <link href="/iecore/6232/"/>
    <url>/iecore/6232/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>查找。在数据集合中寻找满足某种条件的数据元素的过程称为查找。查找的结果一般分为两种：一是查找成功，即在数据集合找到了满足条件的数据元素；二是查找失败。</p><p>关键字。数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在由一个学生元素构成的数据集合中，学生元素中”学号”这一数据项的值唯一地标识一名学生。</p><p><strong>查找:</strong> 在数据集合中寻找满足某种条件的数据元素的过程称为查找</p><p><strong>查找表(查找结构)</strong> 用于查找的数据元素的集合称为查找表，它由同一类型的数据元素(或记录)组成，可以是一个数组或链表等数据类型</p><p><strong>关键字:</strong> 数据元素中唯一标识该元素的某个数据项，使用基于关键字的查找，查找结果应该是唯一的。</p><h3 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h3><p>①查询某个特定的数据元素是否在查找表中；</p><p>②检索满足条件的某个特定的数据元素的各种属性；</p><p>③在查找表中插入一个数据元素；</p><p>④从查找表中删除某个数据元素。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>①静态查找表。若一个查找表的操作只涉及上述操作①和②，则无须动态地修改查找表，此类查找表称为静态查找表。适合静态查找表的查找方法有顺序查找、折半查找、散列查找等</p><p>②需要动态地插入或删除的查找表称为动态查找表。适合动态查找表的查找方法有二叉排序树的查找、散列查找等。</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><strong>查找长度:</strong> 在查找运算中，需要对比关键字的次数称为查找长度</p><p><strong>平均查找长度:</strong> 简称ASL，所有查找过程中进行关键字的比较次数多平均值</p><p>$$<br>ASL = \sum_{i=1}^nP_iC_i<br>$$<br>n是查找表的长度。Pi是查找第i个数据元素的概率，一般认为每个数据元素的查找概率相等，即Pi= 1/n；C是找到第i个数据元素所需进行的比较次数</p><p>ASL举例在<a href="https://www.eldpepar.com/iecore/31111">(38)王道数据结构-二叉排序树</a>中有所提及</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(53)王道数据结构-关键路径</title>
    <link href="/iecore/58139/"/>
    <url>/iecore/58139/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>有向无环图</tag>
      
      <tag>拓扑排序</tag>
      
      <tag>关键路径</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(52)王道数据结构-拓扑排序</title>
    <link href="/iecore/17370/"/>
    <url>/iecore/17370/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>有向无环图</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(51)王道数据结构-有向无环图描述表达式</title>
    <link href="/iecore/28726/"/>
    <url>/iecore/28726/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>有向无环图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(50)王道数据结构-最短路径问题(Floyd)</title>
    <link href="/iecore/25415/"/>
    <url>/iecore/25415/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>最短路径</tag>
      
      <tag>Floyd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(49)王道数据结构-最短路径问题(Dijkstra)</title>
    <link href="/iecore/60306/"/>
    <url>/iecore/60306/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Dijkstra算法通过保留目前为止所找到的每个顶点v∈V从s到v的最短路径来工作。初始时，原点s的路径权重被赋为0(即原点的实际最短路径=0）。同时把所有其他顶点的路径长度设为无穷大，即表示我们不知道任何通向这些顶点的路径[1]。当算法结束时，d[v] 中存储的便是从s到v的最短路径，或者如果路径不存在的话是无穷大。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>原文链接:<a href="https://zhuanlan.zhihu.com/p/454373256">https://zhuanlan.zhihu.com/p/454373256</a></p><p><img src="/images/maptree20.png" alt="v1为源点"></p><h4 id="初始表格"><a href="#初始表格" class="headerlink" title="初始表格"></a>初始表格</h4><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th>v5</th><th>v6</th></tr></thead><tbody><tr><td>1</td><td>v1</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>集合S用来存储已经找到的最短路径</li><li>v1到自己显然最短，故为初始最短路径</li></ul><h4 id="第一轮"><a href="#第一轮" class="headerlink" title="第一轮"></a>第一轮</h4><p>从v1出发，计算v1到其他节点的距离(无法连接则用”无穷”符号)</p><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th>v5</th><th>v6</th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td>3</td></tr></tbody></table><ul><li>全表找最小值，发现v1到v6最短为3</li><li>S中添加一条最短路径: v1-v6</li><li>v6列标红不再考虑</li></ul><p>v1-v6为新发现的最短路径</p><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th>v5</th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="第二轮"><a href="#第二轮" class="headerlink" title="第二轮"></a>第二轮</h4><p>从v1-v6出发，计算v1通过v6到其他节点的距离</p><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th>v5</th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td>5</td><td>∞</td><td>9</td><td>4</td><td></td></tr></tbody></table><p>v1—v6到其它现存节点的距离（v6列已删除）</p><ul><li>在全表中找到最小值(v6列已经删除),此时4为最小值,对应路径v1-v6-v5</li><li>添加最短路径v1-v6-v5</li><li>v5列不再考虑</li></ul><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th>v5</th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td>5</td><td>∞</td><td>9</td><td>4</td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="第三轮"><a href="#第三轮" class="headerlink" title="第三轮"></a>第三轮</h4><p>从v1—v6—v5出发，计算v1通过v6及v5到其它节点的距离</p><ul><li>已知v1—v6—v5长度为4；</li><li>发现v5不能到现存的其它任何一个节点，因此距离全部为“无穷”</li></ul><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td>5</td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr></tbody></table><p>v1—v6—v5到其它现存节点的距离(v5，v6列已删除)</p><ul><li>看全表(v5和v6已经删除)找最小值，5是最小值，对应的路径v1—v6—v2</li><li>添加最短路径v1—v6—v2</li><li>v2列不再考虑</li></ul><table><thead><tr><th>步骤</th><th>S</th><th>v2</th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr></tbody></table><p>新最短路径：v1—v6—v2</p><h4 id="第四轮"><a href="#第四轮" class="headerlink" title="第四轮"></a>第四轮</h4><p>从v1—v6—v2出发，计算v1通过v6及v2到其它节点的距离</p><table><thead><tr><th>步骤</th><th>S</th><th><font color='red'>v2</font></th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td></td><td>12</td><td>10</td><td></td><td></td></tr></tbody></table><p>v1—v6—v2到其它现存节点的距离(v2，v5，v6已删除)</p><ul><li>遍历全表(v2，v5和v6已经删除)发现，9最小，对应的路径为v1—v6—v4</li><li>添加最短路径v1—v6—v4</li><li>v4列不再考虑</li></ul><table><thead><tr><th>步骤</th><th>S</th><th><font color='red'>v2</font></th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td></td><td>12</td><td>10</td><td></td><td></td></tr><tr><td>5</td><td>v1-v6-v4</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>新最短路径：v1—v6—v4</p><h4 id="第五轮"><a href="#第五轮" class="headerlink" title="第五轮"></a>第五轮</h4><p>从v1—v6—v4出发，计算v1通过v6及v4到其它节点的距离</p><table><thead><tr><th>步骤</th><th>S</th><th><font color='red'>v2</font></th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td></td><td>12</td><td>10</td><td></td><td></td></tr><tr><td>5</td><td>v1-v6-v4</td><td></td><td>13</td><td></td><td></td><td></td></tr></tbody></table><p>计算v1—v6—v4到其它节点的距离(只剩v3列)</p><ul><li>遍历全表发现，12是现存的最小值，对应v1——v6——v2——v3路径最短</li><li>添加最短路径v1——v6——v2——v3</li><li>v3列不再考虑</li></ul><table><thead><tr><th>步骤</th><th>S</th><th><font color='red'>v2</font></th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td></td><td><font color='red'>12</font></td><td>10</td><td></td><td></td></tr><tr><td>5</td><td>v1-v6-v4</td><td></td><td>13</td><td></td><td></td><td></td></tr><tr><td>6</td><td>v1-v6-v2-v3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>添加最后一条最短路径：v1—v6—v2—v3</p><ul><li>由于全部列已经删除，因此结束遍历</li></ul><h4 id="最终表格"><a href="#最终表格" class="headerlink" title="最终表格"></a>最终表格</h4><table><thead><tr><th>步骤</th><th>S</th><th><font color='red'>v2</font></th><th>v3</th><th>v4</th><th><font color='red'>v5</font></th><th><font color='red'>v6</font></th></tr></thead><tbody><tr><td>1</td><td>v1</td><td>10</td><td>∞</td><td>∞</td><td>∞</td><td><font color='red'>3</font></td></tr><tr><td>2</td><td>v1-v6</td><td><font color='red'>5</font></td><td>∞</td><td>9</td><td><font color='red'>4</font></td><td></td></tr><tr><td>3</td><td>v1-v6-v5</td><td>∞</td><td>∞</td><td>∞</td><td></td><td></td></tr><tr><td>4</td><td>v1-v6-v2</td><td></td><td><font color='red'>12</font></td><td>10</td><td></td><td></td></tr><tr><td>5</td><td>v1-v6-v4</td><td></td><td>13</td><td></td><td></td><td></td></tr><tr><td>6</td><td>v1-v6-v2-v3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>每列的标红值，则为v1到该节点的最短距离；从S列中找结尾为该列的路径。</li><li>例如，v2列标红值为5，说明v1到v2的最短路径为5</li><li>S中结尾为v2，对应的路径为v1—v6—v2</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * C: Dijkstra算法获取最短路径(邻接矩阵)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX         100                 <span class="hljs-comment">// 矩阵最大容量</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF         (~(0x1&lt;&lt;31))        <span class="hljs-comment">// 最大值(即0X7FFFFFFF)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> isLetter(a) ((((a)&gt;=<span class="hljs-meta-string">&#x27;a&#x27;</span>)&amp;&amp;((a)<span class="hljs-meta-string">&lt;=&#x27;z&#x27;)) || (((a)&gt;</span>=<span class="hljs-meta-string">&#x27;A&#x27;</span>)&amp;&amp;((a)&lt;=<span class="hljs-meta-string">&#x27;Z&#x27;</span>)))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LENGTH(a)   (sizeof(a)/sizeof(a[0]))</span><br><br><span class="hljs-comment">// 邻接矩阵</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">graph</span> &#123;</span><br>    <span class="hljs-keyword">char</span> vexs[MAX];       <span class="hljs-comment">// 顶点集合</span><br>    <span class="hljs-keyword">int</span> vexnum;           <span class="hljs-comment">// 顶点数</span><br>    <span class="hljs-keyword">int</span> edgnum;           <span class="hljs-comment">// 边数</span><br>    <span class="hljs-keyword">int</span> matrix[MAX][MAX]; <span class="hljs-comment">// 邻接矩阵</span><br>&#125;Graph, *PGraph;<br><br><span class="hljs-comment">// 边的结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EdgeData</span> &#123;</span><br>    <span class="hljs-keyword">char</span> start; <span class="hljs-comment">// 边的起点</span><br>    <span class="hljs-keyword">char</span> end;   <span class="hljs-comment">// 边的终点</span><br>    <span class="hljs-keyword">int</span> weight; <span class="hljs-comment">// 边的权重</span><br>&#125;EData;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 返回ch在matrix矩阵中的位置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_position</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">char</span> ch)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; i++) &#123;<br>        <span class="hljs-keyword">if</span>(G.vexs[i] == ch) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 读取一个输入字符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> <span class="hljs-title">read_char</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">do</span> &#123;<br>        ch = getchar();<br>    &#125; <span class="hljs-keyword">while</span>(!isLetter(ch));<br><br>    <span class="hljs-keyword">return</span> ch;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建图(自己输入)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Graph* <span class="hljs-title">create_graph</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c1, c2;<br>    <span class="hljs-keyword">int</span> v, e;<br>    <span class="hljs-keyword">int</span> i, j, weight, p1, p2;<br>    Graph* pG;<br><br>    <span class="hljs-comment">// 输入&quot;顶点数&quot;和&quot;边数&quot;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input vertex number: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input edge number: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;e);<br>    <span class="hljs-keyword">if</span> ( v &lt; <span class="hljs-number">1</span> || e &lt; <span class="hljs-number">1</span> || (e &gt; (v * (v<span class="hljs-number">-1</span>)))) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input error: invalid parameters!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((pG=(Graph*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Graph))) == <span class="hljs-literal">NULL</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(pG, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Graph));<br>    <span class="hljs-comment">// 初始化&quot;顶点数&quot;和&quot;边数&quot;</span><br>    pG-&gt;vexnum = v;<br>    pG-&gt;edgnum = e;<br>    <span class="hljs-comment">// 初始化&quot;顶点&quot;</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;vexnum; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;vertex(%d): &quot;</span>, i);<br>        pG-&gt;vexs[i] = read_char();<br>    &#125;<br>    <span class="hljs-comment">// 1. 初始化&quot;边&quot;的权值</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;vexnum; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; pG-&gt;vexnum; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i==j) &#123;<br>                pG-&gt;matrix[i][j] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                pG-&gt;matrix[i][j] = INF;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2. 初始化&quot;边&quot;的权值: 根据用户的输入进行初始化</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;edgnum; i++) &#123;<br>        <span class="hljs-comment">// 读取边的起始顶点，结束顶点，权值</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;edge(%d):&quot;</span>, i);<br>        c1 = read_char();<br>        c2 = read_char();<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;weight);<br><br>        p1 = get_position(*pG, c1);<br>        p2 = get_position(*pG, c2);<br>        <span class="hljs-keyword">if</span> (p1==<span class="hljs-number">-1</span> || p2==<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input error: invalid edge!\n&quot;</span>);<br>            <span class="hljs-built_in">free</span>(pG);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        pG-&gt;matrix[p1][p2] = weight;<br>        pG-&gt;matrix[p2][p1] = weight;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pG;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建图(用已提供的矩阵)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Graph* <span class="hljs-title">create_example_graph</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> vexs[] = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>    <span class="hljs-keyword">int</span> matrix[][<span class="hljs-number">9</span>] = &#123;<br>             <span class="hljs-comment">/*A*/</span><span class="hljs-comment">/*B*/</span><span class="hljs-comment">/*C*/</span><span class="hljs-comment">/*D*/</span><span class="hljs-comment">/*E*/</span><span class="hljs-comment">/*F*/</span><span class="hljs-comment">/*G*/</span><br>      <span class="hljs-comment">/*A*/</span> &#123;   <span class="hljs-number">0</span>,  <span class="hljs-number">12</span>, INF, INF, INF,  <span class="hljs-number">16</span>,  <span class="hljs-number">14</span>&#125;,<br>      <span class="hljs-comment">/*B*/</span> &#123;  <span class="hljs-number">12</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">10</span>, INF, INF,   <span class="hljs-number">7</span>, INF&#125;,<br>      <span class="hljs-comment">/*C*/</span> &#123; INF,  <span class="hljs-number">10</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">6</span>, INF&#125;,<br>      <span class="hljs-comment">/*D*/</span> &#123; INF, INF,   <span class="hljs-number">3</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">4</span>, INF, INF&#125;,<br>      <span class="hljs-comment">/*E*/</span> &#123; INF, INF,   <span class="hljs-number">5</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">8</span>&#125;,<br>      <span class="hljs-comment">/*F*/</span> &#123;  <span class="hljs-number">16</span>,   <span class="hljs-number">7</span>,   <span class="hljs-number">6</span>, INF,   <span class="hljs-number">2</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">9</span>&#125;,<br>      <span class="hljs-comment">/*G*/</span> &#123;  <span class="hljs-number">14</span>, INF, INF, INF,   <span class="hljs-number">8</span>,   <span class="hljs-number">9</span>,   <span class="hljs-number">0</span>&#125;&#125;;<br>    <span class="hljs-keyword">int</span> vlen = LENGTH(vexs);<br>    <span class="hljs-keyword">int</span> i, j;<br>    Graph* pG;<br><br>    <span class="hljs-comment">// 输入&quot;顶点数&quot;和&quot;边数&quot;</span><br>    <span class="hljs-keyword">if</span> ((pG=(Graph*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Graph))) == <span class="hljs-literal">NULL</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(pG, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Graph));<br>    <span class="hljs-comment">// 初始化&quot;顶点数&quot;</span><br>    pG-&gt;vexnum = vlen;<br>    <span class="hljs-comment">// 初始化&quot;顶点&quot;</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;vexnum; i++) &#123;<br>        pG-&gt;vexs[i] = vexs[i];<br>    &#125;<br>    <span class="hljs-comment">// 初始化&quot;边&quot;</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;vexnum; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; pG-&gt;vexnum; j++) &#123;<br>            pG-&gt;matrix[i][j] = matrix[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 统计边的数目</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pG-&gt;vexnum; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; pG-&gt;vexnum; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i!=j &amp;&amp; pG-&gt;matrix[i][j]!=INF) &#123;<br>                pG-&gt;edgnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    pG-&gt;edgnum /= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> pG;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 返回顶点v的第一个邻接顶点的索引，失败则返回-1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">first_vertex</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span> (v&lt;<span class="hljs-number">0</span> || v&gt;(G.vexnum<span class="hljs-number">-1</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>         <span class="hljs-keyword">if</span> (G.matrix[v][i]!=<span class="hljs-number">0</span> &amp;&amp; G.matrix[v][i]!=INF) &#123;<br>             <span class="hljs-keyword">return</span> i;<br>         &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">next_vertix</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span> (v&lt;<span class="hljs-number">0</span> || v&gt;(G.vexnum<span class="hljs-number">-1</span>) || w&lt;<span class="hljs-number">0</span> || w&gt;(G.vexnum<span class="hljs-number">-1</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = w + <span class="hljs-number">1</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-keyword">if</span> (G.matrix[v][i]!=<span class="hljs-number">0</span> &amp;&amp; G.matrix[v][i]!=INF) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 深度优先搜索遍历图的递归实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> *visited)</span> </span>&#123;                                   <br>    <span class="hljs-keyword">int</span> w; <br>    visited[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[i]);<br>    <span class="hljs-comment">// 遍历该顶点的所有邻接顶点。若是没有访问过，那么继续往下走</span><br>    <span class="hljs-keyword">for</span> (w = first_vertex(G, i); w &gt;= <span class="hljs-number">0</span>; w = next_vertix(G, i, w)) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[w]) &#123;<br>            DFS(G, w, visited);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 深度优先搜索遍历图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> visited[MAX];       <span class="hljs-comment">// 顶点访问标记</span><br>    <span class="hljs-comment">// 初始化所有顶点都没有被访问</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        visited[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DFS: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-comment">//printf(&quot;\n== LOOP(%d)\n&quot;, i);</span><br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            DFS(G, i, visited);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 广度优先搜索（类似于树的层次遍历）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> <span class="hljs-built_in">queue</span>[MAX];     <span class="hljs-comment">// 辅组队列</span><br>    <span class="hljs-keyword">int</span> visited[MAX];   <span class="hljs-comment">// 顶点访问标记</span><br>    <span class="hljs-keyword">int</span> i, j, k;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        visited[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            visited[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[i]);<br>            <span class="hljs-built_in">queue</span>[rear++] = i;  <span class="hljs-comment">// 入队列</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (head != rear) &#123;<br>            j = <span class="hljs-built_in">queue</span>[head++];  <span class="hljs-comment">// 出队列</span><br>            <span class="hljs-keyword">for</span> (k = first_vertex(G, j); k &gt;= <span class="hljs-number">0</span>; k = next_vertix(G, j, k)) &#123; <span class="hljs-comment">//k是为访问的邻接顶点</span><br>                <span class="hljs-keyword">if</span> (!visited[k]) &#123;<br>                    visited[k] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[k]);<br>                    <span class="hljs-built_in">queue</span>[rear++] = k;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 打印矩阵队列图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_graph</span><span class="hljs-params">(Graph G)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Martix Graph:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%10d &quot;</span>, G.matrix[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * prim最小生成树</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 参数说明：</span><br><span class="hljs-comment"> *       G -- 邻接矩阵图</span><br><span class="hljs-comment"> *   start -- 从图中的第start个元素开始，生成最小树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prim</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> min,i,j,k,m,n,sum;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;         <span class="hljs-comment">// prim最小树的索引，即prims数组的索引</span><br>    <span class="hljs-keyword">char</span> prims[MAX];     <span class="hljs-comment">// prim最小树的结果数组</span><br>    <span class="hljs-keyword">int</span> weights[MAX];    <span class="hljs-comment">// 顶点间边的权值</span><br><br>    <span class="hljs-comment">// prim最小生成树中第一个数是&quot;图中第start个顶点&quot;，因为是从start开始的。</span><br>    prims[index++] = G.vexs[start];<br><br>    <span class="hljs-comment">// 初始化&quot;顶点的权值数组&quot;，</span><br>    <span class="hljs-comment">// 将每个顶点的权值初始化为&quot;第start个顶点&quot;到&quot;该顶点&quot;的权值。</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++ ) &#123;<br>        weights[i] = G.matrix[start][i];<br>    &#125;<br>    <span class="hljs-comment">// 将第start个顶点的权值初始化为0。</span><br>    <span class="hljs-comment">// 可以理解为&quot;第start个顶点到它自身的距离为0&quot;。</span><br>    weights[start] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-comment">// 由于从start开始的，因此不需要再对第start个顶点进行处理。</span><br>        <span class="hljs-keyword">if</span>(start == i) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        j = <span class="hljs-number">0</span>;<br>        k = <span class="hljs-number">0</span>;<br>        min = INF;<br>        <span class="hljs-comment">// 在未被加入到最小生成树的顶点中，找出权值最小的顶点。</span><br>        <span class="hljs-keyword">while</span> (j &lt; G.vexnum) &#123;<br>            <span class="hljs-comment">// 若weights[j]=0，意味着&quot;第j个节点已经被排序过&quot;(或者说已经加入了最小生成树中)。</span><br>            <span class="hljs-keyword">if</span> (weights[j] != <span class="hljs-number">0</span> &amp;&amp; weights[j] &lt; min) &#123;<br>                min = weights[j];<br>                k = j;<br>            &#125;<br>            j++;<br>        &#125;<br>        <span class="hljs-comment">// 经过上面的处理后，在未被加入到最小生成树的顶点中，权值最小的顶点是第k个顶点。</span><br>        <span class="hljs-comment">// 将第k个顶点加入到最小生成树的结果数组中</span><br>        prims[index++] = G.vexs[k];<br>        <span class="hljs-comment">// 将&quot;第k个顶点的权值&quot;标记为0，意味着第k个顶点已经排序过了(或者说已经加入了最小树结果中)。</span><br>        weights[k] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 当第k个顶点被加入到最小生成树的结果数组中之后，更新其它顶点的权值。</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span> ; j &lt; G.vexnum; j++) &#123;<br>            <span class="hljs-comment">// 当第j个节点没有被处理，并且需要更新时才被更新。</span><br>            <span class="hljs-keyword">if</span> (weights[j] != <span class="hljs-number">0</span> &amp;&amp; G.matrix[k][j] &lt; weights[j]) &#123;<br>                weights[j] = G.matrix[k][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 计算最小生成树的权值</span><br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; index; i++) &#123;<br>        min = INF;<br>        <span class="hljs-comment">// 获取prims[i]在G中的位置</span><br>        n = get_position(G, prims[i]);<br>        <span class="hljs-comment">// 在vexs[0...i]中，找出到j的权值最小的顶点。</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            m = get_position(G, prims[j]);<br>            <span class="hljs-keyword">if</span> (G.matrix[m][n]&lt;min) &#123;<br>                min = G.matrix[m][n];<br>            &#125;<br>        &#125;<br>        sum += min;<br>    &#125;<br>    <span class="hljs-comment">// 打印最小生成树</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PRIM(%c)=%d: &quot;</span>, G.vexs[start], sum);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, prims[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 获取图中的边</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">EData* <span class="hljs-title">get_edges</span><span class="hljs-params">(Graph G)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    EData *edges;<br><br>    edges = (EData*)<span class="hljs-built_in">malloc</span>(G.edgnum*<span class="hljs-keyword">sizeof</span>(EData));<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i &lt; G.vexnum;i++) &#123;<br>        <span class="hljs-keyword">for</span> (j=i+<span class="hljs-number">1</span>;j &lt; G.vexnum;j++) &#123;<br>            <span class="hljs-keyword">if</span> (G.matrix[i][j]!=INF) &#123;<br>                edges[index].start  = G.vexs[i];<br>                edges[index].end    = G.vexs[j];<br>                edges[index].weight = G.matrix[i][j];<br>                index++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> edges;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 对边按照权值大小进行排序(由小到大)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sorted_edges</span><span class="hljs-params">(EData* edges, <span class="hljs-keyword">int</span> elen)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;elen; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j=i+<span class="hljs-number">1</span>; j&lt;elen; j++) &#123;<br>            <span class="hljs-keyword">if</span> (edges[i].weight &gt; edges[j].weight) &#123;<br>                <span class="hljs-comment">// 交换&quot;第i条边&quot;和&quot;第j条边&quot;</span><br>                EData tmp = edges[i];<br>                edges[i] = edges[j];<br>                edges[j] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 获取i的终点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_end</span><span class="hljs-params">(<span class="hljs-keyword">int</span> vends[], <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (vends[i] != <span class="hljs-number">0</span>) &#123;<br>        i = vends[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 克鲁斯卡尔（Kruskal)最小生成树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">(Graph G)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,m,n,p1,p2;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;          <span class="hljs-comment">// rets数组的索引</span><br>    <span class="hljs-keyword">int</span> vends[MAX]=&#123;<span class="hljs-number">0</span>&#125;;     <span class="hljs-comment">// 用于保存&quot;已有最小生成树&quot;中每个顶点在该最小树中的终点。</span><br>    EData rets[MAX];        <span class="hljs-comment">// 结果数组，保存kruskal最小生成树的边</span><br>    EData *edges;           <span class="hljs-comment">// 图对应的所有边</span><br><br>    <span class="hljs-comment">// 获取&quot;图中所有的边&quot;</span><br>    edges = get_edges(G);<br>    <span class="hljs-comment">// 将边按照&quot;权&quot;的大小进行排序(从小到大)</span><br>    sorted_edges(edges, G.edgnum);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;G.edgnum; i++) &#123;<br>        p1 = get_position(G, edges[i].start);   <span class="hljs-comment">// 获取第i条边的&quot;起点&quot;的序号</span><br>        p2 = get_position(G, edges[i].end);     <span class="hljs-comment">// 获取第i条边的&quot;终点&quot;的序号</span><br><br>        m = get_end(vends, p1);                 <span class="hljs-comment">// 获取p1在&quot;已有的最小生成树&quot;中的终点</span><br>        n = get_end(vends, p2);                 <span class="hljs-comment">// 获取p2在&quot;已有的最小生成树&quot;中的终点</span><br>        <span class="hljs-comment">// 如果m!=n，意味着&quot;边i&quot;与&quot;已经添加到最小生成树中的顶点&quot;没有形成环路</span><br>        <span class="hljs-keyword">if</span> (m != n) &#123;<br>            vends[m] = n;                       <span class="hljs-comment">// 设置m在&quot;已有的最小生成树&quot;中的终点为n</span><br>            rets[index++] = edges[i];           <span class="hljs-comment">// 保存结果</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(edges);<br>    <span class="hljs-comment">// 统计并打印&quot;kruskal最小生成树&quot;的信息</span><br>    length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>        length += rets[i].weight;<br>    &#125;<br>       <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Kruskal=%d: &quot;</span>, length);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%c,%c) &quot;</span>, rets[i].start, rets[i].end);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Dijkstra最短路径。</span><br><span class="hljs-comment"> * 即，统计图(G)中&quot;顶点vs&quot;到其它各个顶点的最短路径。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 参数说明：</span><br><span class="hljs-comment"> *        G -- 图</span><br><span class="hljs-comment"> *       vs -- 起始顶点(start vertex)。即计算&quot;顶点vs&quot;到其它顶点的最短路径。</span><br><span class="hljs-comment"> *     prev -- 前驱顶点数组。即，prev[i]的值是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径所经历的全部顶点中，位于&quot;顶点i&quot;之前的那个顶点。</span><br><span class="hljs-comment"> *     dist -- 长度数组。即，dist[i]是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径的长度。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> vs, <span class="hljs-keyword">int</span> prev[], <span class="hljs-keyword">int</span> dist[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,k;<br>    <span class="hljs-keyword">int</span> min;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-keyword">int</span> flag[MAX];      <span class="hljs-comment">// flag[i]=1表示&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径已成功获取。</span><br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        flag[i] = <span class="hljs-number">0</span>;              <span class="hljs-comment">// 顶点i的最短路径还没获取到。</span><br>        prev[i] = <span class="hljs-number">0</span>;              <span class="hljs-comment">// 顶点i的前驱顶点为0。</span><br>        dist[i] = G.matrix[vs][i];<span class="hljs-comment">// 顶点i的最短路径为&quot;顶点vs&quot;到&quot;顶点i&quot;的权。</span><br>    &#125;<br>    <span class="hljs-comment">// 对&quot;顶点vs&quot;自身进行初始化</span><br>    flag[vs] = <span class="hljs-number">1</span>;<br>    dist[vs] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历G.vexnum-1次；每次找出一个顶点的最短路径。</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-comment">// 寻找当前最小的路径；</span><br>        <span class="hljs-comment">// 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。</span><br>        min = INF;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++) &#123;<br>            <span class="hljs-keyword">if</span> (flag[j]==<span class="hljs-number">0</span> &amp;&amp; dist[j]&lt;min) &#123;<br>                min = dist[j];<br>                k = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 标记&quot;顶点k&quot;为已经获取到最短路径</span><br>        flag[k] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 修正当前最短路径和前驱顶点</span><br>        <span class="hljs-comment">// 即，当已经&quot;顶点k的最短路径&quot;之后，更新&quot;未获取最短路径的顶点的最短路径和前驱顶点&quot;。</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++) &#123;<br>            tmp = (G.matrix[k][j]==INF ? INF : (min + G.matrix[k][j])); <span class="hljs-comment">// 防止溢出</span><br>            <span class="hljs-keyword">if</span> (flag[j] == <span class="hljs-number">0</span> &amp;&amp; (tmp  &lt; dist[j]) ) &#123;<br>                dist[j] = tmp;<br>                prev[j] = k;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 打印dijkstra最短路径的结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dijkstra(%c): \n&quot;</span>, G.vexs[vs]);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  shortest(%c, %c)=%d\n&quot;</span>, G.vexs[vs], G.vexs[i], dist[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> prev[MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> dist[MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br>    Graph* pG;<br>    <span class="hljs-comment">// 自定义&quot;图&quot;(输入矩阵队列)</span><br>    <span class="hljs-comment">//pG = create_graph();</span><br>    <span class="hljs-comment">// 采用已有的&quot;图&quot;</span><br>    pG = create_example_graph();<br>    <span class="hljs-comment">//print_graph(*pG);       // 打印图</span><br>    <span class="hljs-comment">//DFSTraverse(*pG);       // 深度优先遍历</span><br>    <span class="hljs-comment">//BFS(*pG);               // 广度优先遍历</span><br>    <span class="hljs-comment">//prim(*pG, 0);           // prim算法生成最小生成树</span><br>    <span class="hljs-comment">//kruskal(*pG);           // kruskal算法生成最小生成树</span><br>    <span class="hljs-comment">// dijkstra算法获取&quot;第4个顶点&quot;到其它各个顶点的最短距离</span><br>    dijkstra(*pG, <span class="hljs-number">3</span>, prev, dist);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>最短路径</tag>
      
      <tag>Dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(48)王道数据结构-最短路径问题(BFS)</title>
    <link href="/iecore/14142/"/>
    <url>/iecore/14142/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>广度优先搜索查找最短路径只是对无权图而言的。图是带权图时，把从一个顶点v0到图中其余任意一个顶点vi的一条路径(可能不止一条)所经过边上的权值之和，定义为该路径的带权路径长度，把带权路径长度最短的那条路径称为最短路径。</p><h3 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h3><p>求解最短路径的算法通常都依赖于一种性质，即两点之间的最短路径也包含了路径上其他顶点间的最短路径。带权有向图G的最短路径问题一般可分为两类：一是单源最短路径，即求图中某一顶点到其他各顶点的最短路径，可通过经典的Dijkstra 算法求解；二是求每对顶点间的最短路径，可通过Floyd-Warshall算法来求解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">bool</span> visited[MAX_VERTEX_NUM]; <span class="hljs-comment">//访问标记数组</span><br><span class="hljs-comment">//广度优先遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<span class="hljs-comment">//从顶点v出发，广度优先遍历图G</span><br>    visit(v); <span class="hljs-comment">//访问初始顶点v</span><br>    visited[v]=TRUE; <span class="hljs-comment">//对v做已访问标记</span><br>    Enqueue(Q,v); <span class="hljs-comment">//顶点v入队列Q</span><br>    <span class="hljs-keyword">while</span>(!isEmpty(Q)) &#123;<br>        DeQueue(Q,v); <span class="hljs-comment">//顶点v出队列</span><br>        <span class="hljs-keyword">for</span>(w=FirstNeighbor(G,v); w&gt;=<span class="hljs-number">0</span>; w=NextNeighbor(G,v,w)) &#123;<span class="hljs-comment">//检测v所有邻接点</span><br>            <span class="hljs-keyword">if</span>(!visited[w]) &#123; <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>                 visit(w); <span class="hljs-comment">//访问顶点w</span><br>                 visited[w]=TRUE; <span class="hljs-comment">//对w做已访问标记</span><br>                 EnQueue(Q,w); <span class="hljs-comment">//顶点w入队列</span><br>            &#125;<br>        &#125;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顶点到顶点"><a href="#顶点到顶点" class="headerlink" title="顶点到顶点"></a>顶点到顶点</h3><p>代码逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//求顶点u到其他顶点的最短路径</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS_MIN_Distance</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">//d[i]表示从u到i结点的最短路径</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; ++i) &#123;<br>        d[i]=∞; <span class="hljs-comment">//初始化路径长度</span><br>        path[i]=<span class="hljs-number">-1</span>; <span class="hljs-comment">//最短路径从哪个顶点过来</span><br>    &#125;<br>    d[u]=<span class="hljs-number">0</span>;<br>    visited[u]=TRUE;<br>    EnQueue(Q,u);<br>    <span class="hljs-keyword">while</span>(!isEmpty(Q)) &#123; <span class="hljs-comment">//BFS算法主过程</span><br>        DeQueue(Q,u); <span class="hljs-comment">//队头元素u出队</span><br>        <span class="hljs-keyword">for</span>(w=FirstNeighbor(G,u); w&gt;=<span class="hljs-number">0</span>; w=NextNeighbor(G,u,w)) &#123;<br>            <span class="hljs-keyword">if</span>(!visited[w]) &#123;<span class="hljs-comment">//w为u的尚未访问的邻接顶点</span><br>                d[w]=d[u]+<span class="hljs-number">1</span>; <span class="hljs-comment">//路径长度加1</span><br>                path[w]=u; <span class="hljs-comment">//最短路径应从u到w</span><br>                visited[w]=TRUE; <span class="hljs-comment">//设已访问标记</span><br>                EnQueue(Q,w); <span class="hljs-comment">//顶点w入队</span><br>            &#125;<br>        &#125;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>最短路径</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(47)王道数据结构-最小生成树</title>
    <link href="/iecore/54883/"/>
    <url>/iecore/54883/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h4><p>连通图的生成树是包含图中全部顶点的一个极小连通子图。若图中顶点树为n，则它的生成树含有n-1条边。对于生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会变成一个回路</p><p><img src="/images/maptree01.png"></p><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><p>最小生成树即最小代价树。一个连通图是生成树是图的极小连通子图，它包含图中的所有顶点，并且只含尽可能少的边。这意味着对于生成树来说，若砍去它的一条边，则会使生成树变成非连通图；若给它增加一条边，则会形成图中的一条回路。</p><p>对于一个带权连通无向图G=(V, E), 生成树不同，每棵树的权(即树中所有边上的权值之和可能不同。 设R为G的所有生成树的集合，若T为R中边的权值之和最小的那棵生成树，则T称为G的最小生成树(Minimum-Spanning Tee MST)。</p><h4 id="重要性质"><a href="#重要性质" class="headerlink" title="重要性质"></a>重要性质</h4><p>1)最小生成树不是唯一的，即最小生成树的树形不唯一，R中可能有多个最小生成树。当图 G中的各边权值互不相等时，G的最小生成树是唯一的；若无向连通图G的边数比顶点数少1，即G本身是一棵树时，则G的最小生成树就是它本身。</p><ul><li>最小生成树可能有多个,但边的权值之和总是唯一且最小的</li><li>最小生成树的边数 = 顶点数 - 1。砍掉一条则不连通，增加一条则会出现回路</li></ul><p>2)最小生成树的边的权值之和总是唯一的，虽然最小生成树不唯一，但其对应的边的权值之和总是唯一的，而且是最小的。</p><ul><li>如果一个连通图本身就是一棵树，则其最小生成树就是它本身</li><li>只有连通图才有生成树，非联通图只有生成森林</li></ul><p>3)最小生成树的边数为顶点数减1。</p><ul><li>最小生成树可能有多个，但边的权值之和总是唯一且最小的</li><li>最小生成树的边数 = 顶点数 - 1。砍掉一条则不连通，增加一条边则会出现回路</li></ul><h3 id="构造算法"><a href="#构造算法" class="headerlink" title="构造算法"></a>构造算法</h3><p>构造最小生成树有多种算法，但大多数算法都利用了最小生成树的下列性质：假设G=(V, E) 是一个带权连通无向图，U是顶点集V的一个非空子集。若(u, v)是一条具有最小权值的边，其中 u∈U, v∈V-U，则必存在一棵包含边(u, v)的最小生成树。</p><h4 id="Prim算法-普里姆"><a href="#Prim算法-普里姆" class="headerlink" title="Prim算法(普里姆)"></a>Prim算法(普里姆)</h4><p>Prim (普里姆)算法的执行非常类似于寻找图的最短路径的Dijkstra算法。假设 N={V, E}是连通网，ET是N上最小生成树中边的集合。算法从VT= {u0} (u0∈V) ，ET= {}开始，重复执行下述操作：在所有u∈V，v∈V- VT的边(u, v)∈E中找一条代价最小的边(u0, v0)并入集合 ET，同时将v0并入VT，直至VT=V为止。此时E中必有n-1条边，则T= {VT, ET}为N的最小生成树。</p><p>具体操作是从某一顶点开始构造生成树；每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。<br><img src="/images/maptree02.png"><br><img src="/images/maptree03.png"></p><h3 id="Kruskal算法-克鲁斯卡尔"><a href="#Kruskal算法-克鲁斯卡尔" class="headerlink" title="Kruskal算法(克鲁斯卡尔)"></a>Kruskal算法(克鲁斯卡尔)</h3><p>与Prim算法从顶点开始扩展最小生成树不同，Kruskal (克鲁斯卡尔)算法是一种按权值的递增次序选择合适的边来构造最小生成树的方法。假设N= (V, E)是连通网，对应的最小生成树T= (VT, ET)，Kruskal算法的步骤如下:</p><p>每次选择一条权值最小的边，使这条边的两头连通(原本已经连通的就不选)直到所有结点都连通。在构造过程中，按照网中边的权值由小到大的顺序，不断选取当前未被选取的、边集中权值最小的边。依据生成树的概念，n个结点的生成树有n- 1条边，故反复上述过程，直到选取了n-1条边为止，这样就构成了一棵最小生成树。<br><img src="/images/maptree04.png"><br><img src="/images/maptree05.png"></p><h3 id="PK对比"><a href="#PK对比" class="headerlink" title="PK对比"></a>PK对比</h3><h4 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h4><p>1.prim从某一顶点开始构造生成树；每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止<br>2.kruskal每次选择一条权值最小的边，使这两条连通(原本已经连通的就不选)</p><p><strong>时间复杂度:</strong><br>1.prim的时间复杂度O(|V|^2)适合用于边稠密图<br>2.kruskal的时间复杂度O(|E|log2|E|)适合用于边稀疏图</p><h3 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h3><h4 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h4><p>从v0开始，总共需要n-1轮处理</p><p>每一轮处理:循环遍历所有结点，找到lowCast最低的，且还没加入树的顶点</p><p>再次循环遍历，更新还没有加入的各个顶点的lowCase值</p><p><strong>时间复杂度:</strong><br>总时间复杂度O(n^2)即O(|V|^2)<br>每一轮时间复杂度O(2n)</p><h5 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//Prim算法简单实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Prim</span><span class="hljs-params">(G,T)</span> </span>&#123;<br>     T=∅; <span class="hljs-comment">//初始化空树</span><br>     U=&#123;w&#125;; <span class="hljs-comment">//添加任一顶点w</span><br>     <span class="hljs-keyword">while</span>((V-U)!=∅) &#123;<span class="hljs-comment">//若树中不含全部顶点</span><br>          设(u,v)是使u∈U与v∈(U-V)，且权值最小的边;<br>          T=T∪&#123;(u,v)&#125;; <span class="hljs-comment">//边归入树</span><br>          U=U∪&#123;v&#125;; <span class="hljs-comment">//顶点归入树</span><br>     &#125;<br>&#125;     <br><br></code></pre></td></tr></table></figure><p>Prim 算法的时间复杂度为O(1)，不依赖于|E|，因此它适用于求解边稠密的图的最小生成树。虽然采用其他方法能改进Prim算法的时间复杂度，但增加了实现的复杂性。</p><h4 id="kruskal"><a href="#kruskal" class="headerlink" title="kruskal"></a>kruskal</h4><p>循环(重复下列操作至T是一棵树)：按G的边的权值递增顺序依次从E- ET 中选择一条边，若这条边加入T后不构成回路，则将其加入ET，否则舍弃，直到E中含有n-1条边。</p><h5 id="代码逻辑-1"><a href="#代码逻辑-1" class="headerlink" title="代码逻辑"></a>代码逻辑</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//Kruskal算法简单实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Kruskal</span><span class="hljs-params">(V,T)</span> </span>&#123;<br>    T=V; <span class="hljs-comment">//初始化树T，仅含顶点</span><br>    numS=n; <span class="hljs-comment">//连通分量数</span><br>    <span class="hljs-keyword">while</span>(numS&gt;<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//若连通分量数大于1</span><br>        从E中取出权值最小的边(v,u);<br>        <span class="hljs-keyword">if</span>(v和u属于T中不同的连通分量) &#123;<br>            T=T∪&#123;(v,u)&#125;; <span class="hljs-comment">//将此边加入生成树中</span><br>            numS--; <span class="hljs-comment">//连通分量数减1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若一条边连接了两棵不同树中的顶点，则对这两棵树来说，它必定是连通的，将这条边加入森林中，完成两棵树的合并，直到整个森林合并成一棵树。</p><p>通常在Kruskal算法中，采用堆来存放边的集合，因此每次选择最小权值的边只需O(log|E|)的时间。此外，由于生成树T中的所有边可视为一个等价类，因此每次添加新的边的过程类似于求解等价类的过程，由此可以采用并查集的数据结构来描述T，从而构造T的时间 复杂度为O(|E|log|E|)。因此，Kruskal 算法适合于边稀疏而顶点较多的图。</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>最小生成树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(46)王道数据结构-图的深度优先遍历</title>
    <link href="/iecore/55161/"/>
    <url>/iecore/55161/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>深度优先搜索类似于树的先序遍历。首先访问图中某一起始顶点v，然后由v出发，访问与v邻接且未被访问的任一顶点w1，再访问与w1邻接且未被访问的任一顶点w2·····重复上述过程。当不能再继续向下访问时，依次退回到最近被访问的顶点，若它还有邻接顶点未被访问过，则从该点开始继续上述搜索过程，直到图中所有顶点均被访问过为止。</p><p><img src="/images/map75.png"><br>从2出发深度优先遍历序列: 2, 1, 5, 6, 3, 4, 7, 8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">bool</span> visited[MAX_VERTEX_NUM]; <span class="hljs-comment">//访问标记数值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;  <span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span><br>    visit(v); <span class="hljs-comment">//访问顶点v</span><br>    visited[v] = TRUE; <span class="hljs-comment">//设已访问标记</span><br>    <span class="hljs-keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="hljs-number">0</span>; w=NextNeighor(G, v, w)) &#123;<br>        <span class="hljs-keyword">if</span>(!visited[w]) &#123; <span class="hljs-comment">//w为u的尚未访问的邻接顶点  </span><br>            DFS(G, w);<br>        &#125;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最终版-DFS"><a href="#最终版-DFS" class="headerlink" title="最终版(DFS)"></a>最终版(DFS)</h4><p>解决了非联通图问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">bool</span> visited[MAX_VERTEX_NUM]; <span class="hljs-comment">//访问标记数值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span> </span>&#123;   <span class="hljs-comment">//对图G进行深度优先遍历</span><br>    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.vexnum; ++v) &#123;<br>        visited[v] = FALSE; <span class="hljs-comment">//初始化已访问标记数据</span><br>    &#125;  <br>    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.vexnum; ++v) &#123;<span class="hljs-comment">//本代码中从v=0开始遍历</span><br>        <span class="hljs-keyword">if</span>(!visited[v]) &#123;<br>            DFS(G, v);<br>        &#125;  <br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span><br>    visit(v); <span class="hljs-comment">//访问顶点v</span><br>    visited[v] = TRUE; <span class="hljs-comment">//设已访问标记</span><br>    <span class="hljs-keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="hljs-number">0</span>; w=NextNeighor(G, v, w)) &#123;<br>        <span class="hljs-keyword">if</span>(!visited[w]) &#123;<span class="hljs-comment">//w为u的尚未访问的邻接顶点  </span><br>            DFS(G, w);<br>        &#125;<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>1.图的邻接矩阵表示是唯一的，但对于邻接表来说，若边的输入次序不同，生成的邻接表也不同。<br>2.因此，对于同样一个图，基于邻接矩阵的遍历所得到的DFS序列和BFS序列是唯一的，基于邻接表的遍历所得到的DFS和BFS序列是不唯一的</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>DFS算法是一个递归算法，需要借助一个递归栈，故其空间复杂度为O(|V|)。其中函数调用栈道最坏情况，递归深度为O(|V|)<br>。最好情况时间复杂度为O(1)</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>时间复杂度 = 访问各结点所需时间+探索各条边所需时间</p><p>1.用邻接矩阵表示，访问|V|个顶点需要O(|V|)的时间，查找每个顶点的邻接点都需要O(|V|)的时间，而总共有|V|个顶点，时间复杂度为O(|V|^2)</p><p>2.用邻接表表示，访问|V|个顶点需要O(|V|)的时间，查找各顶点的邻接点共需要O(|E|)的时间，时间复杂度=O(|V|+|E|)</p><p><img src="/images/map91.png"><br>从2出发的深度优先遍历序列: 2, 1, 5, 6, 3, 4, 7, 8<br>从3出发的深度优先遍历序列: 3, 4, 7, 6, 2, 1, 5, 8<br>从1出发的深度优先遍历序列: 1, 2, 6, 3, 4, 7, 8, 4</p><h3 id="深度优先生成树"><a href="#深度优先生成树" class="headerlink" title="深度优先生成树"></a>深度优先生成树</h3><p>对连通图调用DFS才能深度优先生成树，否则产生的将是深度优先生成森林。</p><p>1.同一个图的邻接矩阵表示方式唯一，因此深度优先遍历序列唯一，深度优先生成树也唯一<br>2.同一个图邻接表表示方式不唯一，因此深度优先遍历序列不唯一，深度优先生成树也唯一</p><pre><code class="mermaid" >graph TD;    A(("1"));    B(("2"));    C(("3"));    D(("4"));    E(("5"));    F(("6"));    G(("7"));    H(("8"));        B-->A;    B-->F;    A-->E;    F-->C;    C-->D;    D-->G;    G-->H;</code></pre><h4 id="生成森林"><a href="#生成森林" class="headerlink" title="生成森林"></a>生成森林</h4><pre><code class="mermaid" >graph TD;    A(("1"));    B(("2"));    C(("3"));    D(("4"));    E(("5"));    F(("6"));    G(("7"));    H(("8"));    I(("I"));    J(("J"));    K(("K"));        B-->A;    B-->F;    A-->E;    F-->C;    C-->D;    D-->G;    G-->H;    I-->J;    J-->K;</code></pre><h3 id="遍历与连通"><a href="#遍历与连通" class="headerlink" title="遍历与连通"></a>遍历与连通</h3><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><p>对于无向图，若无向图是连通的，则从任一结点出发，仅需一次遍历就能够访问图中的所有顶点；若无向图是非连通的，则从某一个顶点出发，一次遍历只能访问到该顶点所在连通分量的所有顶点，而对于图中其他连通分量的顶点，则无法通过这次遍历访问。</p><p><strong>调用次数:</strong><br>1.对于无向图进行BFS/DFS遍历，调用BFS/DFS函数的次数 = 连通分量数<br>2.对于连通图，只需调用1次BFS/DFS</p><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><p>对于有向图，若从初始点到图中的每个顶点都有路径，则能够访问到图中的所有顶点，否则不能访问到所有顶点。</p><p><strong>调用次数:</strong><br>1.若起始顶点到其他各顶点都有路径，则只需调用1次BFS/DFS函数<br>2.对于强连通图，从任一结点出发都只需调用1次BFS/DFS<br>3.在BFSTraverse()或DFSTraverse()中添加了第二个for循环，再选取初始点，继续进行遍历，以防止一次无法遍历图的所有顶点。</p><p>对于无向图，上述两个函数调用BFS(G, i)或DFS(G, i)的次数等于该图的连通分量数；而对于有向图则不是这样，因为一个连通的有向图分为强连通的和非强连通的，它的连通子图也分为强连通分量和非强连通分量，非强连通分量一次调用BFS(G, i)或DFS(G, i)无法访问到该连通分量的所有顶点。</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>深度优先遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(45)王道数据结构-图的广度优先遍历</title>
    <link href="/iecore/26074/"/>
    <url>/iecore/26074/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>广度优先搜索类似于二叉树层次遍历算法，其基本思想是：首先访问起始顶点v，接着由v出发，依存访问v的各个未访问过的邻接顶点w1，w2，…，wi，然后依次访问w1，w2，…，wi的所有未被访问过的邻接顶点；再从这些访问过的顶点出发，访问它们所有未被访问过的邻接顶点······依次类推，直到图中所有顶点都被访问过为止。Dijkstra单源最短路径算法和Prim最小生成树算法也应用了类似的思想。</p><p><img src="/images/map71.png"></p><h3 id="树VS图"><a href="#树VS图" class="headerlink" title="树VS图"></a>树VS图</h3><p><img src="/images/map72.png"></p><h4 id="树的广度优先遍历-层次遍历"><a href="#树的广度优先遍历-层次遍历" class="headerlink" title="树的广度优先遍历(层次遍历)"></a>树的广度优先遍历(层次遍历)</h4><p>①若树非空，则根结点入队<br>②若队列非空，队头元素出队并访问，同时将该元素的孩子依次处理<br>③重复②直到队列非空</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>广度优先搜索是一种分层的查找过程，每向前一步可能访问一批顶点，不像深层优先搜索那样有往回退的情况，因此它不是一个递归的算法。为了实现逐层的访问，算法必须借助一个辅助队列，以记忆正在访问的顶点的下一层顶点。<br><img src="/images/map73.png"><br><img src="/images/map74.png"><br><strong>要点:</strong><br>1.找到与一个顶点相邻的所有顶点<br>2.标记那些顶点被访问过<br>3.需要一个辅助队列</p><p><strong>FirstNeighbor(G, x):</strong> 求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回-1</p><p><strong>NextNeighbor(G, x, y):</strong> 假设图G中顶点y是顶点x的一个相邻点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1</p><p>bool visited[MAX_VERTEX_NUM];   //访问标记数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">bool</span> visited[MAX_VERTEX_NUM]; <span class="hljs-comment">//访问标记数组</span><br><span class="hljs-comment">//广度优先遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;  <span class="hljs-comment">//从顶点v出发，广度优先遍历图G,算法借助一个辅助队列Q</span><br>    visit(v); <span class="hljs-comment">//访问初始顶点v</span><br>    visited[v]=TRUE; <span class="hljs-comment">//对v做已访问标记</span><br>    Enqueue(Q, v); <span class="hljs-comment">//顶点v入队列Q</span><br>    <span class="hljs-keyword">while</span>(!isEmpty(Q)) &#123;<br>        DeQueue(Q, v); <span class="hljs-comment">//顶点v出队列</span><br>        <span class="hljs-keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="hljs-number">0</span>; w=NextNeighbor(G, v, w) <span class="hljs-comment">//检测v所有邻接点</span><br>            <span class="hljs-keyword">if</span>(!visited[w]) &#123; <span class="hljs-comment">//w为v的尚未访问的邻接顶点  </span><br>                visit(w); <span class="hljs-comment">//访问顶点w</span><br>                visited[w]=TRUE; <span class="hljs-comment">//对w做已访问标记</span><br>                EnQueue(Q, w); <span class="hljs-comment">//顶点w入队列</span><br>            &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>本算法中如果是非连通图，则无法遍历完所有结点</strong><br><img src="/images/map76.png"><br><img src="/images/map77.png"></p><h3 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h3><p><img src="/images/map75.png"><br>从顶点1出发得到的广度优先遍历序列:<br>1,2,5,6,3,7,4,8</p><p>从顶点3出发得到的广度优先遍历序列:<br>3,4,6,7,8,2,1,5</p><p>从顶点2出发得到的广度优先遍历序列<br>2,1,6,5,3,7,4,8</p><h4 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h4><p>1.同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一<br>2.同一个图邻接表表示方法不唯一，因此广度优先遍历序列不唯一</p><h3 id="BFS-最终版"><a href="#BFS-最终版" class="headerlink" title="BFS(最终版)"></a>BFS(最终版)</h3><p>对于无向图，调用BFS函数的次数=连通分量数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">bool</span> visited[MAX_VERTEX_NUM]; <span class="hljs-comment">//访问标记数组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(Graph G)</span> </span>&#123;<span class="hljs-comment">//对图G进行广度优先遍历，设访问函数为visit()</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum, ++i)  &#123;<br>        visited[i]=FALSE; <span class="hljs-comment">//访问标记数值初始化</span><br>    &#125;<br>    InitQueue(Q); <span class="hljs-comment">//初始化辅助队列Q</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; ++i) &#123;<br>        <span class="hljs-comment">//从0号顶点开始遍历</span><br>        <span class="hljs-keyword">if</span>(!visited[i]) &#123;<br>            BFS(G, i); <span class="hljs-comment">//vi未访问过，从vi开始BFS</span><br>        &#125; <br>    &#125;<br>&#125;<br><span class="hljs-comment">//广度优先遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<span class="hljs-comment">//从顶点v出发，广度优先遍历图G,算法借助一个辅助队列Q</span><br>    visit(v); <span class="hljs-comment">//访问初始顶点v</span><br>    visited[v]=TRUE; <span class="hljs-comment">//对v做已访问标记</span><br>    Enqueue(Q, v); <span class="hljs-comment">//顶点v入队列Q</span><br>    <span class="hljs-keyword">while</span>(!isEmpty(Q)) &#123;<br>        DeQueue(Q, v); <span class="hljs-comment">//顶点v出队列</span><br>        <span class="hljs-keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="hljs-number">0</span>; w=NextNeighbor(G, v, w) &#123;<br>            <span class="hljs-comment">//检测v所有邻接点</span><br>            <span class="hljs-keyword">if</span>(!visited[w]) &#123; <span class="hljs-comment">//w为v的尚未访问的邻接顶点  </span><br>                visit(w); <span class="hljs-comment">//访问顶点w</span><br>                visited[w]=TRUE; <span class="hljs-comment">//对w做已访问标记</span><br>                EnQueue(Q, w); <span class="hljs-comment">//顶点w入队列</span><br>            &#125;<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/map78.png"><br>辅助数组visited[]标志顶点是否被访问过，其初始状态为FALSE。在图的遍历过程中，一旦某个顶点vi被访问，就立即置visited[i]为TRUE，防止它被多次访问。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>无论是邻接表还是邻接矩阵的存储方式，BFS算法都需要借助一个辅助队列Q，n个顶点均需要入队依次，在最坏的情况下，空间复杂度为O(|V|)。</p><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>1.采用邻接表存储方式时，每个顶点均需要搜索一次(或入队一次)，故时间复杂度为O(|V|)，在搜索任一顶点的邻接点时，每条边至少访问一次，故时间复杂度为O(|E|)，算法总的时间复杂度为O(|V|+|E|)<br>2.采用邻接矩阵存储方式时，查找每个顶点的邻接点所需的时间为O(|V|)，故算法的时间复杂度为O(|V|2)</p><h3 id="广度优先生成树"><a href="#广度优先生成树" class="headerlink" title="广度优先生成树"></a>广度优先生成树</h3><p>在广度优先遍历的过程中，我们可以得到一棵遍历树，称为广度优先生成树。需要注意的是，一给定图的邻接矩阵存储表示是唯一的，故其广度优先生成树也是唯一的，故其广度优先生成树也是不唯一的。<br><img src="/images/map79.png"><br><img src="/images/map80.png"></p><h3 id="广度优先生成森林"><a href="#广度优先生成森林" class="headerlink" title="广度优先生成森林"></a>广度优先生成森林</h3><p>对于非连通图的广度优先遍历，可以得到广度优先生成森林<br><img src="/images/map81.png"></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>广度优先遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(44)王道数据结构-图的基本操作</title>
    <link href="/iecore/20695/"/>
    <url>/iecore/20695/</url>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>Adjacent(G, x, y):</strong> 判断图G是否存在边&lt;x,y&gt;或(x,y)</p><p><strong>Neighbors(G, x):</strong> 列出图G中与结点x邻接的边</p><p><strong>InsertVertex(G, x):</strong> 在图中插入顶点x</p><p><strong>DeleteVertex(G, x):</strong> 在图中删除顶点x</p><p><strong>AddEdge(G, x, y):</strong> 若无向边(x,y)或有向边&lt;x,y&gt;不存在，则向图G中添加该边</p><p><strong>RemoveEdge(G, x, y):</strong> 若无向边(x,y)或有向边&lt;x,y&gt;存在，则从图G中删除该边</p><p><strong>FirstNeighbor(G, x):</strong> 求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图不存在x，则返回-1</p><p><strong>NextNeighbor(G, x, y):</strong> 假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1</p><p><strong>Get_edge_value(G, x, y):</strong> 获取图G中边(x,y)或&lt;x,y&gt;对应的权值</p><p><strong>Set_edge_value(G, x, y, v):</strong> 设置图G中边(x,y)或&lt;x,y&gt;对应的权值为v</p><p>图还有遍历算法，包括深度优先遍历和广度优先遍历</p><h3 id="Adjacent"><a href="#Adjacent" class="headerlink" title="Adjacent"></a>Adjacent</h3><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map61.png"></p><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><p><img src="/images/map62.png"></p><h3 id="Neighbors"><a href="#Neighbors" class="headerlink" title="Neighbors"></a>Neighbors</h3><h4 id="无向图-1"><a href="#无向图-1" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map63.png"></p><h4 id="有向图-1"><a href="#有向图-1" class="headerlink" title="有向图"></a>有向图</h4><p><img src="/images/map64.png"></p><h3 id="InsertVertex"><a href="#InsertVertex" class="headerlink" title="InsertVertex"></a>InsertVertex</h3><h4 id="无向图-2"><a href="#无向图-2" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map65.png"></p><h4 id="有向图-2"><a href="#有向图-2" class="headerlink" title="有向图"></a>有向图</h4><p>与无向图类似</p><h3 id="DeleteVertex"><a href="#DeleteVertex" class="headerlink" title="DeleteVertex"></a>DeleteVertex</h3><h4 id="无向图-3"><a href="#无向图-3" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map66.png"></p><h4 id="有向图-3"><a href="#有向图-3" class="headerlink" title="有向图"></a>有向图</h4><p><img src="/images/map67.png"></p><h3 id="AddEdge"><a href="#AddEdge" class="headerlink" title="AddEdge"></a>AddEdge</h3><h4 id="无向图-4"><a href="#无向图-4" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map68.png"></p><h4 id="有向图-4"><a href="#有向图-4" class="headerlink" title="有向图"></a>有向图</h4><p>与无向图类似</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(43)王道数据结构-十字链表和邻接多重表</title>
    <link href="/iecore/38506/"/>
    <url>/iecore/38506/</url>
    
    <content type="html"><![CDATA[<h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>十字链表是有向图的一种链式存储结构。在十字链表中，对应于有向图中的每条弧有一个结点，对应于每个顶点也有一个结点。</p><p><img src="/images/map45.png"><br><strong>tailvex:</strong> 弧尾顶点编号<br><strong>headvex:</strong> 弧头顶点编号<br><strong>info:</strong> 权值<br><strong>hlink:</strong> 弧头相同的下一条弧<br><strong>tlink:</strong> 弧尾相同的下一条弧</p><p>弧结点中有5个域：尾域(tailvex)和头域(headvex)分别指示弧尾和弧头这两个顶点在图中的位置；链域hlink指向弧头相同的下一条弧；链域tlink指向弧尾相同的下一条弧；info域指向该弧的相关信息。这样，弧头相同的弧就在同一链表上，弧尾相同的弧也在同一个链表上。</p><p><img src="/images/map46.png"><br><strong>data:</strong> 数据域<br><strong>firstin:</strong> 该顶点作为弧头的第一条弧<br><strong>firstout:</strong> 该顶点作为弧尾的第一条弧</p><p>顶点结点中有3个域：data域存放顶点相关的数据信息，如顶点名称；firstin和firstout两个域分别指向以该顶点为弧头或弧尾的第一个弧结点。</p><h4 id="存储示例"><a href="#存储示例" class="headerlink" title="存储示例"></a>存储示例</h4><p><img src="/images/map47.png"></p><h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>在十字链表中，既容易找到vi为尾的弧，又容易找到vi为头的弧，因而容易求得顶点的出度和入度。图的十字链表表示是不唯一的，但一个十字链表表示确定一个图。<br><img src="/images/map47.png"><br><strong>空间复杂度:</strong> O(|V| + |E|)<br><strong>找指定顶点的所有出边:</strong> 顺着绿色线路找<br><strong>找指定顶点的所有入边:</strong> 顺着橙色线路找<br><strong>注意:</strong> 十字链表只能用于存储有向图</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//十字链表存储结构</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100 <span class="hljs-comment">//图中顶点数目的最大值</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span>&#123;</span> <span class="hljs-comment">//边表结点</span><br>    <span class="hljs-keyword">int</span> tailvex, headvex; <span class="hljs-comment">//该弧的头尾结点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> *<span class="hljs-title">hlink</span>, *<span class="hljs-title">tlink</span>;</span> <span class="hljs-comment">//分别指向弧头相同和弧尾相同的结点</span><br>    <span class="hljs-comment">//InfoType info; //相关信息指针</span><br>&#125;ArcNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span>&#123;</span> <span class="hljs-comment">//顶点表结点</span><br>    VertexType data; <span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstin, *firstout; <span class="hljs-comment">//指向第一条入弧和出弧</span><br>&#125;VNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    VNode xlist[MaxVertexNum]; <span class="hljs-comment">//邻接表</span><br>    <span class="hljs-keyword">int</span> vexnum, arcnum; <span class="hljs-comment">//图的顶点数和弧数</span><br>&#125;GLGraph; <span class="hljs-comment">//GLGraph是以十字邻接存储的图类型</span><br></code></pre></td></tr></table></figure><h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><h4 id="存储优势"><a href="#存储优势" class="headerlink" title="存储优势"></a>存储优势</h4><p>1.邻接表中每条边对应两份冗余信息，删除顶点、删除边等操作时间复杂度高<br>2.邻接矩阵法时间复杂度高</p><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>邻接多重表是无向图的另一种链式存储结构。在邻接表中，容易求得顶点和边的各种信息，但在邻接表中求两个顶点之间是否存在边而对边执行删除等操作时，需要分别在两个顶点的边表中遍历，效率较低。</p><p><img src="/images/map48.png"><br><strong>ivex,jvex:</strong> 边的两个顶点编号<br><strong>info:</strong> 权值<br><strong>ilink:</strong> 依附于顶点ivex的下一条边<br><strong>jlink:</strong> 依附于顶点jvex的下一条边</p><p>其中，mark为标志域，可用以标记该条边是否被搜素过；ivex 和 jvex为该边依附的两个顶点在图中的位置；ilink指向下一条依附于顶点ivex的边；jlink指向下一条依附于顶点jvex的边，info为指向和边相关的各种信息的指针域。每个顶点也用一个结点表示</p><p><img src="/images/map49.png"><br><strong>data:</strong> 数据域<br><strong>firstedge:</strong> 与该顶点相连的第一条边</p><p>其中，data域存储该顶点的相关信息，firstedge域指示第一条依附于该顶点的边。在邻接多重表中，所有依附于同一顶点的边串联在同一链表中，由于每条边依附于两个顶点，因此每个边结点同时链接在两个链表中。</p><h4 id="存储示例-1"><a href="#存储示例-1" class="headerlink" title="存储示例"></a>存储示例</h4><p><img src="/images/map50.png"></p><h4 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h4><p><strong>空间复杂度:</strong> O(|V|+|E|) 每条边只对应一份数据<br><strong>优点:</strong> 删除边、删除结点等操作很方便<br><strong>注意:</strong><br>1.邻接多重表只适用于存储无向图<br>2.每条边上只有一个结点</p><h4 id="代码结构-1"><a href="#代码结构-1" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100 <span class="hljs-comment">//图中顶点数目的最大值</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span>&#123;</span> <span class="hljs-comment">//边表结点</span><br>    <span class="hljs-keyword">bool</span> mark; <span class="hljs-comment">//访问标记</span><br>    <span class="hljs-keyword">int</span> ivex, jvex; <span class="hljs-comment">//分别指向该弧的两个结点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> *<span class="hljs-title">ilink</span>, *<span class="hljs-title">jlink</span>;</span> <span class="hljs-comment">//分别指向两个顶点的下一条边</span><br>    <span class="hljs-comment">//InfoType info; //相关信息指针</span><br>&#125;ArcNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span>&#123;</span> <span class="hljs-comment">//顶点表指针</span><br>    VertexType data; <span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstedge; <span class="hljs-comment">//指向第一条依附该顶点的边</span><br>&#125;VNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    VNode adjmulist[MaxVertexNum]; <span class="hljs-comment">//邻接表</span><br>    <span class="hljs-keyword">int</span> vexnum, arcnum; <span class="hljs-comment">//图的顶点数和弧数</span><br>&#125;AMLGraph; <span class="hljs-comment">//AMLGraph是以邻接多重表存储的图类型</span><br></code></pre></td></tr></table></figure><h4 id="分类比较"><a href="#分类比较" class="headerlink" title="分类比较"></a>分类比较</h4><p><img src="/images/map51.png"></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>十字链表</tag>
      
      <tag>邻接多重表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(42)王道数据结构-邻接表法</title>
    <link href="/iecore/10490/"/>
    <url>/iecore/10490/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>当一个图为稀疏图时，使用邻接矩阵表示显然要浪费大量的存储空间，而图的邻接表法结合了顺序存储和链式存储方法，大大减少了这种不必要的浪费。</p><p>邻接表，是指对图G中的每一个顶点vi建立一个单链表，第 i 个单链表中的结点表示依附于顶点 vi 的边（对于有向图则是以顶点vi为尾的弧），这个单链表就称为顶点vi的边表（对于有向图则称为出边表）。边表的头指针和顶点的数据信息采用顺序存储（成为顶点表），所以在邻接表中存在两种：顶点表结点和边表结点。</p><p>顶点表结点由顶点域（data）和指向第一条邻接边的指针（firstarc）构成，边表（邻接表）结点由邻接点域（adjvex）和指向下一条邻接边的指针域（nextarc）构成。</p><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><p>图的邻接表表示方式不唯一</p><h5 id="表示法一"><a href="#表示法一" class="headerlink" title="表示法一"></a>表示法一</h5><p><img src="/images/map41.png"><br><img src="/images/map42.png"><br>边结点的数量是2|E|,整体空间复杂度为O(|V| + 2|E|)</p><h5 id="表示法二"><a href="#表示法二" class="headerlink" title="表示法二"></a>表示法二</h5><p><img src="/images/map44.png"></p><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><p><img src="/images/map43.png"><br>边结点的数量是|E|，整体空间复杂度为O(|V| + |E|)</p><h5 id="表示法二-1"><a href="#表示法二-1" class="headerlink" title="表示法二"></a>表示法二</h5><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100; <span class="hljs-comment">//图中顶点数目的最大值</span></span><br><span class="hljs-comment">//&quot;边/弧&quot;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> adjvex; <span class="hljs-comment">//边/弧指向哪个结点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指向下一条弧的指针</span><br>    <span class="hljs-comment">//InfoType info; //边权值</span><br>&#125;ArcNode;<br><span class="hljs-comment">//&quot;顶点&quot;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span>&#123;</span><br>    VertexType data; <span class="hljs-comment">//顶点信息</span><br>    ArcNode *first; <span class="hljs-comment">//第一条边/弧</span><br>&#125;VNode, AdjList[MaxVertexNum];<br><span class="hljs-comment">//用邻接表存储的图</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    AdjList vertices; <span class="hljs-comment">//邻接表</span><br>    <span class="hljs-keyword">int</span> vexnum, arcnum; <span class="hljs-comment">//图的顶点数和弧数</span><br>&#125;ALGraph; <span class="hljs-comment">//ALGraph是以邻接表存储图类型</span><br></code></pre></td></tr></table></figure><h3 id="邻接表和邻接矩阵对比"><a href="#邻接表和邻接矩阵对比" class="headerlink" title="邻接表和邻接矩阵对比"></a>邻接表和邻接矩阵对比</h3><table><thead><tr><th></th><th>邻接表</th><th>邻接矩阵</th></tr></thead><tbody><tr><td>空间复杂度</td><td>无向图O(|V|+2|E|);有向图O(|V| + |E|)</td><td>O(|V|^2)</td></tr><tr><td>适合用于</td><td>存储稀疏图</td><td>存储稠密图</td></tr><tr><td>表示方式</td><td>不唯一</td><td>唯一</td></tr><tr><td>计算度/出度/入度</td><td>计算有向图的度、入度不方便、其余很方便</td><td>必须遍历对应的行或列</td></tr><tr><td>找相邻的边</td><td>找有向图的入边不方便、其余很方便</td><td>必须遍历对应行或列</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>邻接表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(41)王道数据结构-邻接矩阵法</title>
    <link href="/iecore/11990/"/>
    <url>/iecore/11990/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>指用一个一维数组存储图中顶点的信息，用一个二维数组存储图中边的信息（即各顶点之间的邻接关系），存储顶点之间邻接关系的二维数组称为邻接矩阵。其中有指向关系用1表示，没有指向关系用0表示</p><p>结点数为n的图G=(V, E)的邻接矩阵A是nxn的。将G的顶点编号为v1, v2,…, vn。</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>若</mtext><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mtext>或</mtext><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo><mtext>是</mtext><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mtext>的边</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>若</mtext><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mtext>或</mtext><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo><mtext>不是</mtext><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mtext>的边</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">A[i][j]=\left\{\begin{aligned}1, &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt;是E(G)的边\\0, &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt;不是E(G)的边\\\end{aligned}\right  .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.00003em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord cjk_fallback">若</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">边</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord cjk_fallback">若</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">边</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><p><img src="/images/map21.png"></p><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><p><img src="/images/map22.png"></p><h4 id="存储代码"><a href="#存储代码" class="headerlink" title="存储代码"></a>存储代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100 <span class="hljs-comment">//顶点数目的最大值</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span> Vex[MaxVertexNum]; <span class="hljs-comment">//顶点表</span><br>    <span class="hljs-keyword">int</span> Edge[MaxVertexNum][MaxVertexNum]; <span class="hljs-comment">//领接矩阵，边表</span><br>    <span class="hljs-keyword">int</span> vexnum, arcnum; <span class="hljs-comment">//图的当前顶点数和弧数</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><p>1.顶点中可以存更复杂的信息<br>2.可以用布尔型或枚举类型变量表示边</p><h3 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h3><p>第i个结点的度 = 第i行(或第i列)的非零元素个数</p><p>第i个结点的出度 = 第i行的非零元素个数</p><p>第i个结点的入度 = 第i列的非零元素个数</p><p>第i个结点的度 = 第i行、第i列的非零元素个数之和</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>邻接矩阵法求顶点的度/出度/入度的时间复杂度为O(|V|)</p><h3 id="带权图-网"><a href="#带权图-网" class="headerlink" title="带权图(网)"></a>带权图(网)</h3><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100 <span class="hljs-comment">//顶点数目的最大值</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 最大的int值 <span class="hljs-comment">//宏定义常量&quot;无穷&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType; <span class="hljs-comment">//顶点的数据类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType; <span class="hljs-comment">//带权图中边上权值的数据类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    VertexType Vex[MaxVertexNum]; <span class="hljs-comment">//顶点表</span><br>    EdgeType Edge[MaxVertexNum][MaxVertexNum]; <span class="hljs-comment">//领接矩阵，边表</span><br>    <span class="hljs-keyword">int</span> vexnum, arcnum; <span class="hljs-comment">//图的当前顶点数和弧数</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><p>无穷表示两个顶点之间不存在边(零也是相同含义)</p><p>如果G是有向带权图，则</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>w</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mtext>若</mtext><msub><mi>V</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>V</mi><mi>j</mi></msub><mtext>且</mtext><mo>&lt;</mo><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>j</mi></msub><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>0</mn><mtext>或</mtext><mi mathvariant="normal">∞</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mtext>其他</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">A[i][j]=\left\{\begin{aligned}w_{ij} &amp; \quad 若V_i \neq V_j且&lt;V_i, V_j &gt; ∈ E(G)\\  0或∞ &amp;\quad 其他\\\end{aligned}\right  .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.00003em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">若</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">且</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">他</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><p>表示为</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>w</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mtext>若</mtext><msub><mi>V</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>V</mi><mi>j</mi></msub><mtext>且</mtext><mo>&lt;</mo><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>j</mi></msub><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mtext>若</mtext><msub><mi>V</mi><mi>i</mi></msub><mo>=</mo><msub><mi>V</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mtext>若</mtext><mo>&lt;</mo><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>j</mi></msub><mo>&gt;</mo><mo mathvariant="normal">∉</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">A[i][j]=\left\{\begin{aligned}w_{ij} &amp; \quad 若V_i \neq V_j且&lt;V_i, V_j &gt; ∈ E(G)\\  0 &amp;\quad 若V_i = V_j \\  ∞ &amp; \quad 若&lt;V_i,V_j&gt; ∉E(G)\end{aligned}\right  .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">若</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">且</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">若</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">若</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><h4 id="无向网"><a href="#无向网" class="headerlink" title="无向网"></a>无向网</h4><p><img src="/images/map23.png"></p><h4 id="有向网"><a href="#有向网" class="headerlink" title="有向网"></a>有向网</h4><p><img src="/images/map24.png"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><img src="/images/map25.png"><br>①在简单应用中，可直接用二维数组作为图的邻接矩阵（顶点信息等均可省略）。<br>②当邻接矩阵中的元素仅表示相应的边是否存在时，EdgeType可定义为值为0和1的枚举类型。<br>③无向图的邻接矩阵是对称矩阵，对规模特大的邻接矩阵可采用压缩存储。<br>④邻接矩阵表示法的空间复杂度为O(n2)，其中n为图的顶点数|V|。</p><h4 id="重要性质"><a href="#重要性质" class="headerlink" title="重要性质"></a>重要性质</h4><p>1.空间复杂度O(|V|^2)只和顶点数相关，和实际的边数无关<br>2.适合用于存储稠密图<br>3.无向图的邻接矩阵是对称矩阵，可以压缩存储(只存储上三角区/下三角区)</p><h3 id="常用性质"><a href="#常用性质" class="headerlink" title="常用性质"></a>常用性质</h3><p>①无向图的邻接矩阵一定是一个对称矩阵（并且唯一）。因此，在实际存储邻接矩阵时只需存储上（或下）三角矩阵的元素。<br>②对于无向图，邻接矩阵的第i行（或第i列）非零元素（或非∞元素）的个数正好是第i个顶点的度TD(vi)。<br>③对于有向图，邻接矩阵的第i行（或第i列）非零元素（或非∞元素）的个数正好是第i个顶点的出度OD(vi)（或入度ID(vi)）。<br>④用邻接矩阵法存储图，很容易确定图中任意两个顶点之间是否有边相连。但是，要确定图中有多少条边，则必须按行、按列对每个元素进行检测，所花费的时间代价很大。这是用邻接矩阵存储图的局限性。<br>⑤稠密图适合使用邻接矩阵的存储表示。</p><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><p><img src="/images/map31.png"><br>设图G的邻接矩阵为A(矩阵元素为0/1)，则A^n的元素A^n[i][j]等于由顶点i到顶点j的长度为n的路径的数目</p><p><img src="/images/map32.png"></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><msub><mi>a</mi><mrow><mn>4</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><msub><mi>a</mi><mrow><mn>4</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><msub><mi>a</mi><mrow><mn>4</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>a</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>4</mn></mrow></msub><msub><mi>a</mi><mrow><mn>4</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}A^2[1][4] = a_{1,1}a_{1,4} + a_{1,2}a_{2,4} + a_{1,3}a_{3,4} + a_{1,4}a_{4,4} = 1 \\A^2[2][2] = a_{2,1}a_{1,2} + a_{2,2}a_{2,2} + a_{2,3}a_{3,2} + a_{2,4}a_{4,2} = 3 \\A^2[3][3] = a_{3,1}a_{1,3} + a_{3,2}a_{2,3} + a_{3,3}a_{3,3} + a_{3,4}a_{4,3} = 1 \\A^2[1][2] = a_{1,1}a_{1,2} + a_{1,2}a_{2,2} + a_{1,3}a_{3,2} + a_{1,4}a_{4,2} = 0 \\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.096432em;vertical-align:-2.798216em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.298216em;"><span style="top:-5.434108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span><span style="top:-2.385892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-0.8617840000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.798216em;"><span></span></span></span></span></span></span></span></span></span></span><p><img src="/images/map33.png"></p><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><p><img src="/images/map31.png"><br>设图G的邻接矩阵为A(矩阵元素为0/1)，则A^n的元素A^n[i][j]等于由顶点i到顶点j的长度为n的路径的数目<br><img src="/images/map34.png"></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>邻接矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(40)王道数据结构-哈夫曼树</title>
    <link href="/iecore/19258/"/>
    <url>/iecore/19258/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>路径:</strong> 定点Vp到顶点Vq之间的一条路径是指顶点序列，有向图的路径也是有向的。无向图之间可能不存在路径<br>$$<br>V_p，V_{i_1}，V_{i_2}，…，V_{i_m}，V_q<br>$$</p><p><strong>回路:</strong> 第一个顶点和最后一个顶点相同的路径称为回路或环</p><p><strong>简单路径:</strong> 在路径序列中，顶点不重复出现的路径称为简单路径</p><p><strong>路径长度:</strong> 路径上边的数目</p><p><strong>点到点的距离</strong> 从顶点u出发到顶点v的最短路径若存在，则此路径长度称为从u到v的距离。若从u到v根本不存在路径，则记该距离为无穷(∞)</p><p><strong>连通:</strong> 无向图中，若从顶点v到顶点w有路径存在，则称v和w是连通的</p><p><strong>强连通:</strong> 若从顶点v到顶点w和从顶点w到顶点v之间都有路径，则称这两个顶点是强连通的</p><h3 id="常见的图"><a href="#常见的图" class="headerlink" title="常见的图"></a>常见的图</h3><h4 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h4><p>若图G中任意两个顶点都是连通的，则称图G为连通图，否则称为非连通图<br><img src="/images/map01.png" alt="连通图"></p><p><strong>考点:</strong><br>对于n个顶点的无向图G<br>1.若G是连通图，则最少有n-1条边<br>2.若G是非连通图，则最多可能有<br>$$<br>C_{n-1}^2<br>$$<br>条边</p><h4 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h4><p>若图中任何一对顶点都是强连通的，则称此图为强连通图<br><img src="/images/map02.png" alt="强连通图"></p><p><strong>考点:</strong><br>对于n个顶点的有向图G<br>1.若G是强连通图，则最少有n条边(形成回路)</p><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><p>设有两个图G=(V,E)和G′=(V′,E′),若V′是V的子集，且E′是E的子集，则称G′是G的子图</p><p>若满足V(G′)=V(G)的子图G′，则称其为G的生成子图。并非任意挑选几个点、几条边都能构成子图</p><h5 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h5><p><img src="/images/map03.png"><br><img src="/images/map04.png"><br><img src="/images/map05.png"></p><p><strong>连通分量:</strong><br>无向图中极大连通子图称为连通分量，子图必须连通，且包含尽可能多的顶点和边<br><img src="/images/map09.png"><br><img src="/images/map10.png"></p><p><strong>强连通分量:</strong><br>有向图中的极大强连通子图称为有向图的强连通分量，子图必须强连通，同时保留尽可能多的边<br><img src="/images/map11.png"><br><img src="/images/map12.png"></p><h5 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h5><p><img src="/images/map06.png"><br><img src="/images/map07.png"><br><img src="/images/map08.png"></p><h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><p>连通图的生成树是包含图中全部顶点的一个极小连通子图。边尽可能的少，但要保持连通</p><p>若图中顶点树为n，则它的生成树含有n-1条边。对于生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边会形成一个回路</p><p><img src="/images/map13.png"><br><img src="/images/map14.png"></p><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><p><strong>实际距离:</strong> 给各边赋予一个权值</p><p><strong>转发概率:</strong> 给各边赋予一个数值</p><p><strong>边的权:</strong> 在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的权值</p><p><strong>带权网/图:</strong> 边上带有权值的图称为带权图，也称网</p><p><strong>带权路径长度:</strong> 当图是带权图时，一条路径上所有边的权值之和，称为该路径的带权路径长度</p><h3 id="特殊的图"><a href="#特殊的图" class="headerlink" title="特殊的图"></a>特殊的图</h3><h4 id="无向完全图"><a href="#无向完全图" class="headerlink" title="无向完全图"></a>无向完全图</h4><p>无向图中任意两个顶点之间都存在边，若无向图的顶点数|V|=n,则<br>$$<br>|E|∈[0,C_n^2] = [0, \frac{n(n-1)}{2}]<br>$$<br><img src="/images/map15.png"></p><h4 id="有向完全图"><a href="#有向完全图" class="headerlink" title="有向完全图"></a>有向完全图</h4><p>在有向图中任意两个顶点之间都存在方向相反的两条弧<br><img src="/images/map16.png"></p><h4 id="稀疏图-稠密图"><a href="#稀疏图-稠密图" class="headerlink" title="稀疏图/稠密图"></a>稀疏图/稠密图</h4><p>边数很少的图称为稀疏图，没有一个绝对的界限，一般来讲|E| &lt; |V|log|V|时,可以将G视为稀疏图</p><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>不存在回路，且连通的无向图。</p><p>1.n个顶点的树,必有n-1条边<br>2.n个顶点的图，若|E| &gt; n - 1，则一定有回路</p><h4 id="有向树"><a href="#有向树" class="headerlink" title="有向树"></a>有向树</h4><p>一个顶点的入度为0、其余顶点的入度均为1的有向图，称为有向树<br><img src="/images/map17.png"></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Vercel优雅的部署Hexo博客</title>
    <link href="/deploy/4555/"/>
    <url>/deploy/4555/</url>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>首先我们看一下官网的介绍:<a href="https://vercel.com/">Vercel官网</a><br>Vercel is the best place to deploy any frontend app. Start by deploying with zero configuration to our global edge network. Scale dynamically to millions of pages without breaking a sweat.<br>很明显这是一个用于自动化部署前端项目的，他的优点总结下来就是，优雅！优雅！还是xxx优雅！</p><p>了解完这是什么东西之后，让我们来看一下注册页面是什么样子的<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008303120087777280.png" alt="注册页面"><br>我们可以看到可以他是通过三个世界上最著名的开源平台来进行注册。我们这里选择github，选择之后会让你提供手机号码收验证码，填好之后进行注册。然后进行登陆，登陆之后会自动进入面板页面</p><h3 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p><img src="https://images.sunofbeaches.com/content/2022_08_14/1008305282314403840.png" alt="新建项目"><br>进入面板之后，选择new project新建一个项目</p><h4 id="选择模板"><a href="#选择模板" class="headerlink" title="选择模板"></a>选择模板</h4><p><img src="https://images.sunofbeaches.com/content/2022_08_14/1008306271838797824.png" alt="模板页面"><br>左边显示的是github中的项目，可以直接进行导入，需要github进行授权。<br>右边是选择模板项目，我记得也需要github进行授权，这里我们选择browse all template，之后往下划找到hexo模板</p><p><img src="https://images.sunofbeaches.com/content/2022_08_14/1008307124700184576.png" alt="hexo模板"></p><p>之后给项目起一个你自己喜欢的名字，创建项目，这时候他会自动在你github仓库中创建这个项目<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008307955033964544.png" alt="项目命名"></p><p>创建成功之后页面会洒彩条，到这里新建项目步骤完成，然后点击go to dashboard去管理项目<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008308953265733632.png" alt="管理项目"></p><h4 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h4><p>vercel会自动分配两个域名，但这个域名往往很长不好记忆。我们自己购买一个域名，我用的是namesilo的域名，一年平均9刀，可以用支付宝支付。namesilo缺点就是注册流程比较麻烦，可以自行搜索。<a href="https://www.namesilo.com/">namesilo官网</a></p><p>首先点击settings进入设置页面，在这一步之前可以先访问他提供的两个域名，查看能否正常访问。<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008311723402199040.png" alt="设置"></p><p>选择Domains管理域名，在这之前需要在你自己的域名里添加cname解析，解析的值是vercel给你分配的两个域名其中的一个。我的解析方案是www解析vercel分配的域名，@解析www解析。<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008312728562958336.png" alt="Domains"></p><p>填写自己的域名，点击两次add<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008314496843776000.png" alt="域名添加"></p><p><img src="https://images.sunofbeaches.com/content/2022_08_14/1008315085153632256.png"><br>这里如果你域名cname解析生效了，add成功之后就可以通过自己域名进行访问了。使用vercel比较方便的一点是他会自动配置ssl证书</p><p><img src="https://images.sunofbeaches.com/content/2022_08_14/1008316887290871808.png" alt="生成ssl证书"></p><h3 id="修改hexo主题"><a href="#修改hexo主题" class="headerlink" title="修改hexo主题"></a>修改hexo主题</h3><p>我们使用vercel部署的hexo模板用的是默认的主题，我们想要修改主题怎么办，办法很简单。只是修改过程很难在web页面进行操作，我们需要把项目克隆到本地。这里以安装fluid为例，我自己用的就是fluid主题。</p><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>首先打开github进入到刚创建的hexo项目中，把项目克隆到本地。</p><p>然后安装node环境，去官网下载，一路下一步就可以。然后在命令行中输入node -v有输出版本信息就说明安装成功<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008319322390528000.png" alt="node安装成功"></p><p>安装hexo，在命令行中输入进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>输入hexo -v验证是否安装成功<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008320442101923840.png"></p><p>进入到目录中，这里提供一个快速的方法。在win中，如果安装了git环境，可以在项目目录中右键，然后git bash here即可在命令行中进入项目目录<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008322314447618048.png"></p><p>验证hexo博客是否可用，输入hexo s，在本地测试项目。浏览器能正常打开说明项目能正常使用<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008322120029044736.png"></p><p>安装fluid主题，输入以下命令进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制过去。注意，博客原有的_config.yml文件不要动<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008323758269661184.png"></p><p>打开博客原有的_config.yml配置文件，修改主题为fluid<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008324263066730496.png"></p><p>输入hexo s验证主题是否安装成功，能够正常访问说明安装成功<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008326189909016576.png"><br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008326956262883328.png"></p><h3 id="推送编辑"><a href="#推送编辑" class="headerlink" title="推送编辑"></a>推送编辑</h3><p>需要特别注意点是，vercel创建的hexo项目在github中使用的分支是main分支。前面的配置完成后，推送到该项目的main分支，vercel会自动的检测代码更改，会重新进行部署。</p><p>需要新增博客的时候，是不是每次都需要在本地推送呢，答案是不需要。除了配置文件的修改其他时候都不需要在本地操作。可以在任何一台电脑上进行操作</p><p>首先++在github中打开这个项目，然后在键盘中按“。”键(中文读句号，英文是一个右下方的点)，会进入到一个和vscode一模一样的页面++。我们新增文章就在这个页面进行操作。hexo文章是在_post文件夹中，新增只需要在这个文件夹新建markdown文件即可。<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008328784291561472.png"></p><p>修改添加完成之后，只需要提交就可以了。至此我们实现了在任何地方编辑添加文章的操作。</p><h3 id="网站测速"><a href="#网站测速" class="headerlink" title="网站测速"></a>网站测速</h3><p>使用vercel另一个重要的原因是github因为一些众所周知的原因，时常访问不稳定。使用github page搭建推送成功的概率不高，之前基本一个文章要推送两三次才能成功推送到网站上。那么vercel的速度如何呢，我对网站进行了测速，结果如下图。可以看到速度还是相当不错的<br><img src="https://images.sunofbeaches.com/content/2022_08_14/1008400236189581312.png" alt="网站测速"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vercel</tag>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(39)王道数据结构-平衡二叉树</title>
    <link href="/iecore/10570/"/>
    <url>/iecore/10570/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>平衡二叉树，简称平衡树(AVL树)–树上任一结点的左子树和右子树的高度之差不超过1。</p><p><strong>平衡因子：</strong> 左树树高-右树树高<br>1.平衡二叉树结点的平衡因子的值只可能是-1、0或1<br>2.只要有任一结点的平衡因子绝对值大于1就不是平衡二叉树</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//平衡二叉树结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVLNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> key;        <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">int</span> balance;   <span class="hljs-comment">//平衡因子</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVLNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span> <br>&#125;AVLNode, *AVLTree;<br></code></pre></td></tr></table></figure><h4 id="最小不平衡子树"><a href="#最小不平衡子树" class="headerlink" title="最小不平衡子树"></a>最小不平衡子树</h4><p>查找路径上的所有结点都有可能受到影响。从插入点往回找到第一个不平衡结点，调整以该结点为根的子树，插入结点之后调整的对象都是最小不平衡树。</p><p>在插入操作中，只要将最小不平衡子树调整平衡，则其他祖先结点都会恢复平衡。</p><h4 id="调整最小不平衡子树A"><a href="#调整最小不平衡子树A" class="headerlink" title="调整最小不平衡子树A"></a>调整最小不平衡子树A</h4><h5 id="LL"><a href="#LL" class="headerlink" title="LL:"></a>LL:</h5><p>在A的左孩子的左子树中插入导致不平衡<br><strong>调整:</strong><br>A的左孩子结点右上旋</p><h5 id="RR"><a href="#RR" class="headerlink" title="RR:"></a>RR:</h5><p>在A的右孩子的右子树中插入导致不平衡<br><strong>调整:</strong><br>A的右孩子结点左上旋</p><h5 id="LR"><a href="#LR" class="headerlink" title="LR:"></a>LR:</h5><p>在A的左孩子中的右子树插入导致不平衡<br><strong>调整:</strong><br>A的左孩子的右孩子 先左上旋再右上旋</p><h5 id="RL"><a href="#RL" class="headerlink" title="RL:"></a>RL:</h5><p>在A的右孩子的左子树中插入导致不平衡<br><strong>调整:</strong><br>A的右孩子的左孩子 先右上旋后左上旋</p><h4 id="左孩子右上旋"><a href="#左孩子右上旋" class="headerlink" title="左孩子右上旋"></a>左孩子右上旋</h4><p>实现f向下旋转，p向上旋转；其中f是爹，p为孩子，gf为f他爹<br>1.f-&gt;lchild = p-&gt;rchild;<br>2.p-&gt;rchild = f;<br>3.gf-&gt;lchild/rchild = p;</p><h4 id="右孩子左上旋"><a href="#右孩子左上旋" class="headerlink" title="右孩子左上旋"></a>右孩子左上旋</h4><p>实现f向下旋转，p向上旋转；其中f是爹，p为孩子，gf是f他爹<br>1.f-&gt;rchild = p-&gt;rchild;<br>2.p-&gt;lchild = f;<br>3.gf-&gt;lchild/rchild = p;</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>平衡二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(38)王道数据结构-二叉排序树</title>
    <link href="/iecore/31111/"/>
    <url>/iecore/31111/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>二叉排序树，又称二叉查找树，一棵二叉树或者是空二叉树，或者是具有如下特质的二叉树</p><p>1.左子树上所以的结点的关键字均小于根结点的关键字<br>2.右子树上所有结点的关键字均大于根结点的关键字<br>3.左子树和右子树又各是一棵二叉排序树</p><p><strong>左子树结点值 &lt; 根结点值 &lt; 右子树结点值</strong><br><strong>进行中序遍历，可以得到一个递增的有序序列</strong></p><p>二叉排序树可用于元素的有序组织、搜索</p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>1.若树非空，目标值与根结点的值比较<br>2.若相等，则查找成功<br>3.若小于根结点，则在左子树上查找，否则在右子树上查找<br>4.查找成功，返回结点指针，查找失败返回NULL</p><h4 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//二叉排序树结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BSTNode, *BSTree;<br><br><span class="hljs-comment">//在二叉树中查找值为key的结点</span><br><span class="hljs-function">BSTNode *<span class="hljs-title">BST_Search</span><span class="hljs-params">(BSTree T, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (T != <span class="hljs-literal">NULL</span> &amp;&amp; key != T-&gt;key) &#123;    <span class="hljs-comment">//若树空或等于根结点值，则结束循环</span><br>        <span class="hljs-keyword">if</span> (key &lt; T-&gt;key) &#123; <span class="hljs-comment">//小于，则在左子树上查找</span><br>            T = T-&gt;lchild;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//大于，则在右子树上查找</span><br>            T = T-&gt;rchild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br></code></pre></td></tr></table></figure><p>最坏时间复杂度: O(1)</p><p><strong>递归实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//二叉排序树结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BSTNode, *BSTree;<br><br><span class="hljs-comment">//在二叉树中查找值为key的结点(递归实现)</span><br><span class="hljs-function">BSTNode *<span class="hljs-title">BSTSearch</span><span class="hljs-params">(BSTree T, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//查找失败</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (key == T-&gt;key) &#123;<br>        <span class="hljs-keyword">return</span> T:       <span class="hljs-comment">//查找成功</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; T-&gt;key) &#123;<br>        <span class="hljs-keyword">return</span> BSTSearch(T-&gt;lchild, key);   <span class="hljs-comment">//在左子树中招</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> BSTSearch(T-&gt;rchild, key);   <span class="hljs-comment">//在右子树中找</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最坏空间复杂度: O(h)</p><h4 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h4><p>在查找运算中，需要对比关键字的次数称为查找长度，反应了查找操作的时间复杂度。若树高h，找到最下层的一个结点需要对比h次</p><p><strong>最好情况:</strong><br>n个结点的二叉树最小高度为[log2n + 1]，平均查找长度=O(long2n)</p><p><strong>最坏情况:</strong><br>每个结点只有一个分支，树高h=结点数n。平均查找长度=O(n)</p><p><strong>平均查找长度</strong><br>英文缩写ASL，值为单层结点树乘以层序号(1,2,3,…)在把每层的值加起来除以结点数</p><pre><code class="mermaid" >graph TD;    A(("50"));    B(("26"));    C(("66"));    D(("21"));    E(("30"));    F(("60"));    G(("70"));    H(("68"));        A-->B;    A-->C;    B-->D;    B-->E;    C-->F;    C-->G;    G-->H;    G-->N(( ));        style N fill:#f100,stroke-width:0px    linkStyle 7 stroke:#0ff,stroke-width:0px</code></pre><p>查找成功ASL = (1x1 + 2x2 + 3x4 + 4x1)/8 = 2.625</p><pre><code class="mermaid" >graph TD;    A(("50"));    B(("26"));    C(("66"));    D(("21"));    E(("30"));    F(("60"));    G(("70"));    H(("68"));        A-->B;    A-->C;    B-->D;    B-->E;    C-->F;    C-->G;    D-.-R1[ ];    D-.-R2[ ];    E-.-R3[ ];    E-.-R4[ ];    F-.-R5[ ];    F-.-R6[ ];    G-->H;    G-.-R7[ ];    H-.-R8[ ];    H-.-R9[ ];</code></pre><p>倒数第二层需要对比3次，共有7个结点<br>倒数第一层需要对比4次，共有2个结点</p><p>查找失败ASL = (3x7 + 4x2)/9 = 3.22</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>若原二叉排序树为空，则直接插入结点。否则，若关键字k小于根结点值，则插入到左子树，若关键字k大于根结点值，则插入到右子树</p><h4 id="相关代码-1"><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//在二叉排序树插入关键字为k的新结点(递归实现)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BST_Insert</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//原树为空，新插入的结点为根结点</span><br>        T = (BSTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));<br>        T-&gt;key = k;<br>        T-&gt;lchild = T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">//返回1，插入成功</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == T-&gt;key) &#123;   <span class="hljs-comment">//树中存在相同关键字的结点，插入失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &lt; T-&gt;key) &#123;    <span class="hljs-comment">//插入到左子树</span><br>        <span class="hljs-keyword">return</span> BST_Insert(T-&gt;lchild, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//插入到T的右子树</span><br>        <span class="hljs-keyword">return</span> BST_Insert(T-&gt;rchild, k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最坏空间复杂度:O(h)</p><h3 id="构造操作"><a href="#构造操作" class="headerlink" title="构造操作"></a>构造操作</h3><p>根据相关数组序列，构造二叉排序树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Creat_BST</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-keyword">int</span> str[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    T = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//初始化时T为空树</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; n) &#123; <span class="hljs-comment">//依次将每个关键字插入到二叉排序树中</span><br>        BST_Insert(T, str[i]);<br>        i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不同的关键字序列可能得到同款二叉排序树<br>str1 = {50, 66, 26, 21, 30, 70, 68}<br>str2 = {50, 26, 21, 30, 66, 70, 68}</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>先搜索找到目标结点<br>1.若被删除结点z是叶结点，则直接删除，不会破坏二叉排序树的性质<br>2.若结点z只有一棵左子树或右子树，则让z的子树成为z父结点的子树，替代z的位置<br>3.若结点z有左、右两棵子树，则令z的直接后继(或直接前驱)替代z，然后从二叉排序树中删去这个直接后继(或直接前驱)，这样就转换成了第一种或第二种情况</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BSTNode, *BSTree;<br><br><span class="hljs-comment">//在二叉树中查找值为key的结点</span><br><span class="hljs-function">BSTNode *<span class="hljs-title">BST_Search</span><span class="hljs-params">(BSTree T, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (T != <span class="hljs-literal">NULL</span> &amp;&amp; key != T-&gt;key) &#123;    <span class="hljs-comment">//若树空或等于根结点值，则结束循环</span><br>        <span class="hljs-keyword">if</span> (key &lt; T-&gt;key) &#123; <span class="hljs-comment">//小于，则在左子树上查找</span><br>            T = T-&gt;lchild;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//大于，则在右子树上查找</span><br>            T = T-&gt;rchild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BST_Insert</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//原树为空，新插入的结点为根结点</span><br>        T = (BSTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));<br>        T-&gt;key = k;<br>        T-&gt;lchild = T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">//返回1，插入成功</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == T-&gt;key) &#123;   <span class="hljs-comment">//树中存在相同关键字的结点，插入失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &lt; T-&gt;key) &#123;    <span class="hljs-comment">//插入到左子树</span><br>        <span class="hljs-keyword">return</span> BST_Insert(T-&gt;lchild, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//插入到T的右子树</span><br>        <span class="hljs-keyword">return</span> BST_Insert(T-&gt;rchild, k);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Creat_BST</span><span class="hljs-params">(BSTree &amp;T, <span class="hljs-keyword">int</span> str[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    T = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//初始化时T为空树</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; n) &#123; <span class="hljs-comment">//依次将每个关键字插入到二叉排序树中</span><br>        BST_Insert(T, str[i]);<br>        i++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(BSTree root)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, root-&gt;key);<br>&#125;<br><br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">(BSTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        midOrder(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        visit(T);   <span class="hljs-comment">//访问根节点</span><br>        midOrder(T-&gt;rchild);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//删除函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteBST</span><span class="hljs-params">(BSTNode* T, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    BSTNode* p = T;<br>    BSTNode* f = <span class="hljs-literal">NULL</span>;<br>    BSTNode* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//循环找p-&gt;key==key的值，以及它的双亲结点</span><br>    <span class="hljs-keyword">while</span> (p) &#123;<br>    <span class="hljs-keyword">if</span> (key == p-&gt;key) &#123;<br>         <span class="hljs-keyword">break</span>;<br>    &#125;<br>    f = p;<span class="hljs-comment">//f为p的双亲结点</span><br>    <span class="hljs-keyword">if</span> (key &lt; p-&gt;key) &#123; <span class="hljs-comment">//在左子树找</span><br>        p = p-&gt;lchild;<br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//在右子树找</span><br>        p = p-&gt;rchild;<br>    &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果没找到</span><br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//考虑三种情况：左右都不为空、左子树不为空、右子树不为空</span><br>    q = p;<br>    <span class="hljs-comment">//1.左右都不为空</span><br>    <span class="hljs-keyword">if</span> ((p-&gt;lchild) &amp;&amp; (p-&gt;rchild)) &#123;<br>    BSTNode* s = p-&gt;lchild;<br>    q = p;<br>    <span class="hljs-comment">//找到左子树的最右结点，即其直接前驱</span><br>    <span class="hljs-keyword">while</span> (s-&gt;rchild) &#123;<br>            q = s;<br>            s = s-&gt;rchild;<br>    &#125;<br>    p-&gt;key = s-&gt;key;<span class="hljs-comment">//令*p的直接前驱代替*p，即s代替p</span><br>    <span class="hljs-keyword">if</span> (q != p) &#123;<br>        q-&gt;rchild = s-&gt;lchild;<span class="hljs-comment">//重接*q的右子树</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        q-&gt;lchild = s-&gt;lchild;<span class="hljs-comment">//重接*q的左子树</span><br>    &#125;<br>        <span class="hljs-keyword">delete</span>(s);<br>    <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;lchild) &#123; <span class="hljs-comment">//2.没有右子树</span><br>    <span class="hljs-comment">//置换</span><br>    q = p;<span class="hljs-comment">//q指向要删除的结点</span><br>    p = p-&gt;lchild;<span class="hljs-comment">//p指向它的左孩子</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;rchild) &#123;   <span class="hljs-comment">//3.没有左子树</span><br>    <span class="hljs-comment">//置换</span><br>    q = p;<span class="hljs-comment">//q指向要删除的结点</span><br>    p = p-&gt;rchild;<span class="hljs-comment">//p指向它的右孩子</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!p-&gt;lchild &amp;&amp; !p-&gt;rchild) &#123; <span class="hljs-comment">//4.是叶子结点</span><br>        <span class="hljs-comment">//置换</span><br>    q = p;<br>    p = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">//开始重接删除结点的左孩子或右孩子</span><br>    <span class="hljs-keyword">if</span> (!f) &#123;<br>        T = p;<span class="hljs-comment">//删除的是根节点</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q == f-&gt;lchild) &#123;<br>        f-&gt;lchild = p;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q == f-&gt;rchild) &#123;<br>        f-&gt;rchild = p;<br>    &#125;<br>    <span class="hljs-keyword">delete</span>(q);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> str1[] = &#123;<span class="hljs-number">50</span>, <span class="hljs-number">66</span>, <span class="hljs-number">26</span>, <span class="hljs-number">21</span>, <span class="hljs-number">30</span>, <span class="hljs-number">70</span>, <span class="hljs-number">68</span>&#125;;<br>    BSTree T;<br>    BSTNode *node;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-keyword">sizeof</span>(str1) / <span class="hljs-number">4</span>;<br>    Creat_BST(T, str1, n);<br>    <br>    <span class="hljs-comment">//查找验证</span><br>    node = BST_Search(T, <span class="hljs-number">66</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;node key is=%d\n&quot;</span>, node-&gt;key);<br>    <br>    <span class="hljs-comment">//中序遍历</span><br>    midOrder(T);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">//删除验证</span><br>    DeleteBST(T, <span class="hljs-number">68</span>);<br>    midOrder(T);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉排序树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(37)王道数据结构-树和森林的遍历</title>
    <link href="/iecore/51496/"/>
    <url>/iecore/51496/</url>
    
    <content type="html"><![CDATA[<h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><h4 id="先根遍历"><a href="#先根遍历" class="headerlink" title="先根遍历"></a>先根遍历</h4><p>先根遍历。若树非空，先访问根结点，再依次对每棵子树进行先根遍历</p><h5 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//树的先根遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(ThreeNode *R)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (R != <span class="hljs-literal">NULL</span>) &#123;<br>        visit(R);   <span class="hljs-comment">//访问根结点</span><br>        <span class="hljs-keyword">while</span>(R还有下一个子树T) &#123;<br>            PreOrder(T);    <span class="hljs-comment">//先根遍历下一棵子树</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h5><pre><code class="mermaid" >graph TD;   A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));        A-->B;    A-->C;    A-->D;    B-->E;    B-->F;    C-->G;    D-->H;    D-->I;    D-->J;    E-->K;    E-->N(( ));    style N fill:#f100,stroke-width:0px    linkStyle 10 stroke:#0ff,stroke-width:0px</code></pre><p>树的先根遍历序列与这棵树相应二叉树的先序序列相同。</p><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));        A-->B;    B-->E;    B-->C;    E-->K;    E-->F;    C-->G;    C-->D;    D-->H;    D-->N1(( ));    H-->N2(( ));    H-->I;    I-->N3(( ));    I-->J;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    style N3 fill:#f100,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 11 stroke:#0ff,stroke-width:0px</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span>       <span class="hljs-variable">B</span>               <span class="hljs-built_in">C</span>       <span class="hljs-built_in">D</span><br><span class="hljs-variable">A</span>       <span class="hljs-punctuation">(</span><span class="hljs-variable">B</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span><span class="hljs-punctuation">)</span>         <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">A</span>       <span class="hljs-punctuation">(</span><span class="hljs-variable">B</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">F</span><span class="hljs-punctuation">)</span>     <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h4 id="后根遍历"><a href="#后根遍历" class="headerlink" title="后根遍历"></a>后根遍历</h4><p>后根遍历。若树非空，先依次对每棵子树进行后根遍历，最后再访问根结点。</p><h5 id="代码逻辑-1"><a href="#代码逻辑-1" class="headerlink" title="代码逻辑"></a>代码逻辑</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//树的后根遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(TreeNode *R)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (R != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">while</span>(R还要下一个子树T) &#123;<br>            PostOrder(T);   <span class="hljs-comment">//后根遍历下一棵子树</span><br>        &#125;<br>        visit(R);   <span class="hljs-comment">//访问根结点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="遍历序列-1"><a href="#遍历序列-1" class="headerlink" title="遍历序列"></a>遍历序列</h5><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));        A-->B;    A-->C;    A-->D;    B-->E;    B-->F;    C-->G;    D-->H;    D-->I;    D-->J;    E-->K;    E-->N(( ));    style N fill:#f100,stroke-width:0px    linkStyle 10 stroke:#0ff,stroke-width:0px</code></pre><p>树的后根遍历序列与这棵树相应二叉树的中序序列相同</p><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));        A-->B;    B-->E;    B-->C;    E-->K;    E-->F;    C-->G;    C-->D;    D-->H;    D-->N(( ));    H-->N1(( ));    H-->I;    I-->N2(( ));    I-->J;    style N fill:#f100,stroke-width:0px    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 11 stroke:#0ff,stroke-width:0px</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">     <span class="hljs-variable">B</span>               <span class="hljs-built_in">C</span>       <span class="hljs-built_in">D</span>           <span class="hljs-variable">A</span><br><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>          <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <span class="hljs-variable">A</span><br><span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span> <span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>      <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <span class="hljs-variable">A</span><br></code></pre></td></tr></table></figure><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><p>使用队列实现，采用的是广度优先遍历<br>1.若树非空，则根结点入队<br>2.若队列非空，对头元素出对并访问，同时将该元素的孩子依次入队<br>3.重复2直到队列为空</p><h3 id="森林遍历"><a href="#森林遍历" class="headerlink" title="森林遍历"></a>森林遍历</h3><p>森林是m(m≥0)棵互不相交树的集合。每棵树去掉根结点后，其各个子树又组成森林。</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>若森林为非空，按照如下规则进行遍历:<br>1.访问森林中第一棵树的根结点<br>2.先序遍历第一棵树中根结点的子树森林<br>3.先序遍历除去第一棵树之后剩余的树构成的森林</p><h5 id="遍历序列-2"><a href="#遍历序列-2" class="headerlink" title="遍历序列"></a>遍历序列</h5><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->F;    E-->K;    E-->L;    C-->G;        D-->H;    D-->I;    D-->J;    H-->M;</code></pre><p>效果等同于依次对各个树进行先序遍历</p><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->C;        E-->K;    E-->F;    C-->G;    C-->D;    K-->N1(( ));    K-->L;    D-->H;    D-->N2(( ));    H-->M;    H-->I;    I-->N3(( ));    I-->J;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    style N3 fill:#f100,stroke-width:0px    linkStyle 6 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 12 stroke:#0ff,stroke-width:0px</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">     <span class="hljs-variable">B</span>               <span class="hljs-built_in">C</span>       <span class="hljs-built_in">D</span>           <span class="hljs-variable">A</span>          <br><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>          <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <span class="hljs-variable">A</span><br><span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span> <span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>      <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-variable">H</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <span class="hljs-variable">A</span><br></code></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>若森林为非空，按照如下规则进行遍历:<br>1.中序遍历森林中第一棵树的根结点的子树森林<br>2.访问第一棵树的根结点<br>3.中序遍历除去第一棵树之后剩余的树构成的森林</p><h5 id="遍历序列-3"><a href="#遍历序列-3" class="headerlink" title="遍历序列"></a>遍历序列</h5><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->F;    E-->K;    E-->L;    C-->G;        D-->H;    D-->I;    D-->J;    H-->M;</code></pre><p>效果等同于依次对各个树进行中序遍历</p><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->C;        E-->K;    E-->F;    C-->G;    C-->D;    K-->N1(( ));    K-->L;    D-->H;    D-->N2(( ));    H-->M;    H-->I;    I-->N3(( ));    I-->J;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    style N3 fill:#f100,stroke-width:0px    linkStyle 6 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 12 stroke:#0ff,stroke-width:0px</code></pre><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">     <span class="hljs-variable">B</span>               <span class="hljs-built_in">C</span>       <span class="hljs-built_in">D</span>           <br><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>          <span class="hljs-punctuation">(</span><span class="hljs-variable">G</span> <span class="hljs-built_in">C</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span>   <span class="hljs-variable">H</span>  <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <br><span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span> <span class="hljs-variable">L</span> <span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">)</span>    <span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span> <span class="hljs-variable">G</span><span class="hljs-punctuation">)</span>   <span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-variable">M</span> <span class="hljs-variable">H</span><span class="hljs-punctuation">)</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">J</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span>       <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>森林</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(36)王道数据结构-树的存储结构</title>
    <link href="/iecore/24852/"/>
    <url>/iecore/24852/</url>
    
    <content type="html"><![CDATA[<h3 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h3><p>每个结点中保存指向双亲的指针，采用的是顺序存储</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <span class="hljs-comment">//树结构定义</span><br>    PTNode nodes[MAX_TREE_SIZE];    <span class="hljs-comment">//双亲表示</span><br>    <span class="hljs-keyword">int</span> n;     <span class="hljs-comment">//结点数</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="增删结点"><a href="#增删结点" class="headerlink" title="增删结点"></a>增删结点</h4><h5 id="新增结点"><a href="#新增结点" class="headerlink" title="新增结点"></a>新增结点</h5><p>新增数据元素，无需按逻辑上的次序存储</p><h5 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h5><p><strong>方案一:</strong><br>待删除结点的双亲指针设为-1代表当前结点是空的</p><p><strong>方案二:</strong><br>尾部数据上移，填充空白结点</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>查找指定结点的双亲很方便</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>1.空数据导致遍历更慢(删除方案二)<br>2.查找指定结点的孩子只能从头遍历</p><h3 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h3><p>顺序存储各个结点，每个结点中保存孩子链表头指针，采用的是顺序加链式的存储</p><h4 id="代码结构-1"><a href="#代码结构-1" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> child;  <span class="hljs-comment">//孩子结点在数组中的位置</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> *<span class="hljs-title">next</span>;</span>    <span class="hljs-comment">//下一个孩子</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    ELemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> *<span class="hljs-title">firstChild</span>;</span>  <span class="hljs-comment">//第一个孩子</span><br>&#125; CTBox;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    CTBox nodes[MAX_TREE_SIZE];<br>    <span class="hljs-keyword">int</span> n, r;   <span class="hljs-comment">//结点数和根的位置</span><br>&#125;CTree;<br></code></pre></td></tr></table></figure><h3 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h3><p>孩子兄弟表示法是纯链式存储,可以利用熟悉的二叉树进行响应的操作</p><h4 id="代码结构-2"><a href="#代码结构-2" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span> &#123;</span><br>    ElemType data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span> *<span class="hljs-title">firstchild</span>, *<span class="hljs-title">nextsibling</span>;</span><span class="hljs-comment">//第一个孩子和右兄弟指针(可以看作左指针和右指针)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));        A-->B;    A-->C;    A-->D;    B-->E;    B-->F;    C-->G;    D-->H;    D-->I;    D-->J;    E-->K;</code></pre><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    A-->B;    B-->E;    B-->C;    E-->K;    E-->F;    C-->G;    C-->D;    D-->H;    D-->N1(( ));    H-->N2(( ));    H-->I;    I-->N3(( ));    I-->J;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    style N3 fill:#f100,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 11 stroke:#0ff,stroke-width:0px</code></pre><h3 id="树森林转换"><a href="#树森林转换" class="headerlink" title="树森林转换"></a>树森林转换</h3><p>森林是m(m≥0棵互不相交的树的集合)</p><h4 id="森林转树"><a href="#森林转树" class="headerlink" title="森林转树"></a>森林转树</h4><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->F;    E-->K;    E-->L;    C-->G;    D-->H;    D-->I;    D-->J;    H-->M;</code></pre><pre><code class="mermaid" >graph TD;    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));    M(("M"));        B-->E;    B-->C;    E-->K;    E-->F;    C-->G;    C-->D;    K-->N1(( ));    K-->L;    D-->H;    D-->N2(( ));    H-->M;    H-->I;    I-->N3(( ));    I-->J;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    style N3 fill:#f100,stroke-width:0px    linkStyle 6 stroke:#0ff,stroke-width:0px    linkStyle 9 stroke:#0ff,stroke-width:0px    linkStyle 12 stroke:#0ff,stroke-width:0px</code></pre><h4 id="树转森林"><a href="#树转森林" class="headerlink" title="树转森林"></a>树转森林</h4><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));        A-->B;    A-->C;    B-->D;    C-->E;    C-->F;    D-->G;    D-->H;    E-->I;    E-->J;    F-->K;    F-->L;</code></pre><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    F(("F"));    G(("G"));    H(("H"));    I(("I"));    J(("J"));    K(("K"));    L(("L"));        A-->B;    B-->D;    B-->H;    D-->G;    C-->E;    C-->J;    E-->I;    F-->K;</code></pre>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(35)王道数据结构-二叉线索树前驱后继</title>
    <link href="/iecore/35069/"/>
    <url>/iecore/35069/</url>
    
    <content type="html"><![CDATA[<h3 id="中序后继"><a href="#中序后继" class="headerlink" title="中序后继"></a>中序后继</h3><p>在中序线索二叉树中找到指定结点*p的中序后继next<br>①若p-&gt;rtag==1，则next = p-&gt;rchild<br>②若p-&gt;rtag == 0，指定结点有右孩子<br>中序遍历====左 根 右<br>===========左 根 (左 根 右)<br>===========左 根 ((左 根 右) 根 左)<br>next = p的右子树种最左下结点</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag;     <span class="hljs-comment">//左、右线索标志</span><br>&#125;ThreadNode, *ThreadTree;<br><br><span class="hljs-comment">//全局变量pre，指向当前访问结点的前驱</span><br>ThreadNode *pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//找到以P为根的子树中，第一个被中序遍历的结点</span><br><span class="hljs-function">ThreadNode *<span class="hljs-title">Firstnode</span><span class="hljs-params">(ThreadNode *p)</span> </span>&#123;<br>    <span class="hljs-comment">//循环找到最左下结点(不一定是叶结点)</span><br>    <span class="hljs-keyword">while</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;<br>        p = p-&gt;lchild;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//在中序线索二叉树中找到结点p的后继结点</span><br><span class="hljs-function">ThreadNode *<span class="hljs-title">Nextnode</span><span class="hljs-params">(ThreadNode *p)</span> </span>&#123;<br>    <span class="hljs-comment">//右子树中最左下结点</span><br>    <span class="hljs-keyword">if</span> (p-&gt;rtag == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Firstnode(p-&gt;rchild);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> p-&gt;rchild;   <span class="hljs-comment">//rtag==1直接返回后继线索</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序对二叉树进行线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-comment">//如果当前结点存在</span><br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        InThreading(p-&gt;lchild);<span class="hljs-comment">//递归当前结点的左子树，进行线索化</span><br>        <span class="hljs-comment">//如果当前结点没有左孩子，左标志位设为1，左指针域指向上一结点 pre</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;lchild) &#123;<br>            p-&gt;ltag = <span class="hljs-number">1</span>;<br>            p-&gt;lchild = pre;<br>        &#125;<br>        <span class="hljs-comment">//如果 pre 没有右孩子，右标志位设为 1，右指针域指向当前结点。</span><br>        <span class="hljs-keyword">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123;<br>            pre-&gt;rtag = <span class="hljs-number">1</span>;<br>            pre-&gt;rchild = p;<br>        &#125;<br>        pre = p;<span class="hljs-comment">//pre指向当前结点</span><br>        InThreading(p-&gt;rchild);<span class="hljs-comment">//递归右子树进行线索化</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序遍历线索二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d, rtag=%d\n&quot;</span>, p-&gt;data, p-&gt;ltag, p-&gt;rtag); <br>&#125;<br><br><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThread</span><span class="hljs-params">(ThreadNode *T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (ThreadNode *p = Firstnode(T); p != <span class="hljs-literal">NULL</span>; p = Nextnode(p)) &#123;<br>        visit(p);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(ThreadTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;lchild);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;rchild);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  ThreadTree root;<br>  root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为D结点添加子结点</span><br>  addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  <br>  <span class="hljs-comment">//线索化二叉树</span><br>  InThreading(root);<br>  <br>  <span class="hljs-comment">//中序遍历</span><br>  InThread(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序前驱"><a href="#中序前驱" class="headerlink" title="中序前驱"></a>中序前驱</h3><p>在中序线索二叉树中找到指定结点*p的中序前驱pre<br>①若p-&gt;ltag==1，则pre = p-&gt;lchild<br>②若p-&gt;ltag == 0，指定结点有左孩子<br>中序遍历====左 根 右<br>===========(左 根 右) 根 右<br>===========(左 根 (左 根 右)) 根 右<br>pre = p的左子树中最右下结点</p><h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag;     <span class="hljs-comment">//左、右线索标志</span><br>&#125;ThreadNode, *ThreadTree;<br><br><span class="hljs-comment">//全局变量pre，指向当前访问结点的前驱</span><br>ThreadNode *pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//找到以P为根的子树中，最后一个被中序遍历的结点</span><br><span class="hljs-function">ThreadNode *<span class="hljs-title">Lastnode</span><span class="hljs-params">(ThreadNode *p)</span> </span>&#123;<br>    <span class="hljs-comment">//循环找到最右下结点(不一定是叶结点)</span><br>    <span class="hljs-keyword">while</span> (p-&gt;rtag == <span class="hljs-number">0</span>) &#123;<br>        p = p-&gt;rchild;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//在中序线索二叉树中找到结点p的前驱结点</span><br><span class="hljs-function">ThreadNode *<span class="hljs-title">Prenode</span><span class="hljs-params">(ThreadNode *p)</span> </span>&#123;<br>    <span class="hljs-comment">//左子树中最右下结点</span><br>    <span class="hljs-keyword">if</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Lastnode(p-&gt;lchild);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> p-&gt;lchild;   <span class="hljs-comment">//ltag==1直接返回前驱线索</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序对二叉树进行线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-comment">//如果当前结点存在</span><br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        InThreading(p-&gt;lchild);<span class="hljs-comment">//递归当前结点的左子树，进行线索化</span><br>        <span class="hljs-comment">//如果当前结点没有左孩子，左标志位设为1，左指针域指向上一结点 pre</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;lchild) &#123;<br>            p-&gt;ltag = <span class="hljs-number">1</span>;<br>            p-&gt;lchild = pre;<br>        &#125;<br>        <span class="hljs-comment">//如果 pre 没有右孩子，右标志位设为 1，右指针域指向当前结点。</span><br>        <span class="hljs-keyword">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123;<br>            pre-&gt;rtag = <span class="hljs-number">1</span>;<br>            pre-&gt;rchild = p;<br>        &#125;<br>        pre = p;<span class="hljs-comment">//pre指向当前结点</span><br>        InThreading(p-&gt;rchild);<span class="hljs-comment">//递归右子树进行线索化</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序遍历线索二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------visit\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d, rtag=%d\n&quot;</span>, p-&gt;data, p-&gt;ltag, p-&gt;rtag); <br>&#125;<br><br><span class="hljs-comment">// 对中序线索二叉树进行逆中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RevInorder</span><span class="hljs-params">(ThreadNode *T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (ThreadNode *p = Lastnode(T); p != <span class="hljs-literal">NULL</span>; p = Prenode(p)) &#123;<br>        visit(p);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(ThreadTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;lchild);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;rchild);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  ThreadTree root;<br>  root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为D结点添加子结点</span><br>  addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  <br>  <span class="hljs-comment">//线索化二叉树</span><br>  InThreading(root);<br>  <br>  <span class="hljs-comment">//中序遍历</span><br>  RevInorder(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="先序后继"><a href="#先序后继" class="headerlink" title="先序后继"></a>先序后继</h3><p>在先序线索二叉树中找到指定结点*P的先序后继next<br>①若p-&gt;rtag == 1，则next = p-&gt;rchild<br>②若p-&gt;rtag == 0，p必有右孩子<br><strong>1.假设有左孩子</strong><br>若p有左孩子，则先序后继为左孩子</p><p>先序遍历===根 左 右<br>==========根 (根 左 右) 右</p><p><strong>2.假设无左孩子</strong><br>若p没有左孩子，则先序后继为右孩子</p><p>先序遍历===根 右<br>==========根 (根 左 右) </p><h3 id="先序前驱"><a href="#先序前驱" class="headerlink" title="先序前驱"></a>先序前驱</h3><p>在先序线索二叉树中找到指定结点*p的先序前驱pre<br>①若p-&gt;ltag == 1，则next = p-&gt;lchild<br>②若p-&gt;ltag == 0，p必有左孩子</p><p>先序遍历中，左右子树中的结点只可能是根的后继，不可能是前驱</p><p><strong>①如果能找到p的付结点，且p是左孩子</strong><br>先序遍历===根 左 右<br>==========根 (根 左 右) 右<br>p的父结点即为其前驱</p><p><strong>②如果能找到p的父结点，且p是右孩子，其左兄弟为空</strong><br>先序遍历===根 右<br>==========根 (根 左 右)<br>p到父结点即为其前驱</p><p><strong>③如果能找到p的父结点，且p是右孩子，其左兄弟非空</strong><br>先序遍历===根 左 右<br>p的前驱为左兄弟子树中最后一个被先序遍历的结点</p><p>④如果p是根结点，则p没有先序前驱</p><h3 id="后续前驱"><a href="#后续前驱" class="headerlink" title="后续前驱"></a>后续前驱</h3><p>在后续线索二叉树中找到指定结点*p的后续前驱pre<br>①若p-&gt;ltag == 1，则pre = p-&gt;lchild<br>②若p-&gt;ltag == 0，p必有左孩子</p><p><strong>1.假设有右孩子</strong><br>后续遍历===左 右 根<br>==========左 (左 右 根) 根<br>若p有右孩子，则后续前驱为右孩子</p><p><strong>2.假设无右孩子</strong><br>后续遍历===左 根<br>若p没有右孩子，则后续前驱为左孩子</p><h3 id="后续后继"><a href="#后续后继" class="headerlink" title="后续后继"></a>后续后继</h3><p>在后续线索二叉树中找到指定结点*p的后续后继next<br>①若p-&gt;rtag == 1，则next = p-&gt;rchild<br>②若p-&gt;rtag == 0，p必有左孩子,p必有右孩子</p><p>后续遍历===左 右 根<br>后续遍历中，左右子树中的结点只可能是根的前驱，不可能是后继</p><p><strong>①如果能找到p的父结点，且p是右孩子</strong><br>后续遍历===左 右 根<br>==========左 (左 右 根) 根(这里p的父结点即为其后继)<br>改用三叉链表可以找到父结点</p><p><strong>②如果能找到p的父结点，且p是左孩子，其左兄弟为空</strong><br>后续遍历====左 根<br>===========(左 右 根) 根<br>p的父结点即为其后继</p><p><strong>③如果能找到p的父结点，且p是左孩子，其右兄弟非空</strong><br>p的后继为右兄弟子树中第一个被后续便利店结点</p><p>④如果p是根结点，则p没有后续后继是</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
      <tag>二叉线索树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(34)王道数据结构-二叉线索树的概念</title>
    <link href="/iecore/56134/"/>
    <url>/iecore/56134/</url>
    
    <content type="html"><![CDATA[<h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>从中序遍历的角度来看，找前驱、后继很不方便；遍历操作必须从根开始</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>从根节点开始，重新进行一次中序遍历，指针q记录当前访问的节点，指针p记录上一个被访问的结点。<br>①当q == p时，p为前驱<br>②当p == p时，q为后继</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>n个结点的二叉树，有n+1个空链域！可以用来记录前驱、后继的信息。指向前驱、后继的指针称为“线索”</p><p><strong>前驱线索:</strong> 由左孩子指针充当<br><strong>后继线索:</strong> 由右孩子指针充当</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//tag称为线索链表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag; <span class="hljs-comment">//左、右线索标志</span><br>&#125; ThreadNode, * ThreadTree;<br></code></pre></td></tr></table></figure><p>tag == 0, 表示指针指向孩子<br>tag == 1, 表示指针是“线索”</p><p>需要注意的是，先序线索二叉树是按照“先序序列”进行线索化，后续线索二叉树是按照“后序序列”进行线索化的。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h4><h5 id="代码一：右线索出现了问题"><a href="#代码一：右线索出现了问题" class="headerlink" title="代码一：右线索出现了问题"></a>代码一：右线索出现了问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag;     <span class="hljs-comment">//左、右线索标志</span><br>&#125;ThreadNode, *ThreadTree;<br><br><span class="hljs-comment">//全局变量pre，指向当前访问结点的前驱</span><br>ThreadNode *pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(ThreadNode *q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (q-&gt;lchild == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//左字树为空，建立前驱线索</span><br>        q-&gt;lchild = pre;<br>        q-&gt;ltag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>        pre-&gt;rchild = q;    <span class="hljs-comment">//建立前驱结点的后继线索</span><br>        pre-&gt;rtag = <span class="hljs-number">1</span>;<br>    &#125;<br>    pre = q;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d rtag=%d\n&quot;</span>, q-&gt;data,q-&gt;ltag,q-&gt;rtag);<br>&#125;<br><br><span class="hljs-comment">// 中序遍历，一边遍历一边线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        InThread(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        visit(T);              <span class="hljs-comment">//访问根节点</span><br>        InThread(T-&gt;rchild);   <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(ThreadTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;lchild);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;rchild);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序线索化二叉树T</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateInThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    pre = <span class="hljs-literal">NULL</span>;         <span class="hljs-comment">//pre初始为NULL</span><br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//非空二叉树才能线索化</span><br>        InThread(T);<br>        <span class="hljs-keyword">if</span> (pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>            pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">//处理遍历最后一个结点</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  ThreadTree root;<br>  root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为D结点添加子结点</span><br>  addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  <br>  <span class="hljs-comment">//线索化二叉树</span><br>  CreateInThread(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="代码二：无问题"><a href="#代码二：无问题" class="headerlink" title="代码二：无问题"></a>代码二：无问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TElemType char<span class="hljs-comment">//宏定义，结点中数据域的类型</span></span><br><span class="hljs-comment">//枚举，Link为0，Thread为1</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    Link,<br>    Thread<br>&#125;PointerTag;<br><br><span class="hljs-comment">//结点结构构造</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    TElemType data;<span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span>* <span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><span class="hljs-comment">//左孩子，右孩子指针域</span><br>    PointerTag ltag, rtag;<span class="hljs-comment">//标志域，枚举类型</span><br>&#125;ThreadNode, *ThreadTree;<br>ThreadTree pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//中序对二叉树进行线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-comment">//如果当前结点存在</span><br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        InThreading(p-&gt;lchild);<span class="hljs-comment">//递归当前结点的左子树，进行线索化</span><br>        <span class="hljs-comment">//如果当前结点没有左孩子，左标志位设为1，左指针域指向上一结点 pre</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;lchild) &#123;<br>            p-&gt;ltag = Thread;<br>            p-&gt;lchild = pre;<br>        &#125;<br>        <span class="hljs-comment">//如果 pre 没有右孩子，右标志位设为 1，右指针域指向当前结点。</span><br>        <span class="hljs-keyword">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123;<br>            pre-&gt;rtag = Thread;<br>            pre-&gt;rchild = p;<br>        &#125;<br>        pre = p;<span class="hljs-comment">//pre指向当前结点</span><br>        InThreading(p-&gt;rchild);<span class="hljs-comment">//递归右子树进行线索化</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序遍历线索二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThread</span><span class="hljs-params">(ThreadTree p)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//一直找左孩子，最后一个为中序序列中排第一的</span><br>        <span class="hljs-keyword">while</span> (p-&gt;ltag == Link) &#123;<br>            p = p-&gt;lchild;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d, rtag=%d\n&quot;</span>, p-&gt;data, p-&gt;ltag, p-&gt;rtag);  <span class="hljs-comment">//操作结点数据</span><br>        <span class="hljs-comment">//当结点右标志位为1时，直接找到其后继结点</span><br>        <span class="hljs-keyword">while</span> (p-&gt;rtag == Thread &amp;&amp; p-&gt;rchild != <span class="hljs-literal">NULL</span>) &#123;<br>            p = p-&gt;rchild;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d, rtag=%d\n&quot;</span>, p-&gt;data, p-&gt;ltag, p-&gt;rtag);<br>        &#125;<br>        <span class="hljs-comment">//否则，按照中序遍历的规律，找其右子树中最左下的结点，也就是继续循环遍历</span><br>        p = p-&gt;rchild;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ThreadTree root;<br>    root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>    <span class="hljs-comment">//根节点A</span><br>    root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>    addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>    <span class="hljs-comment">//为B节点增加子节点</span><br>    addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>    addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>    <span class="hljs-comment">//为D结点添加子结点</span><br>    addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>    <span class="hljs-comment">//为C节点增加子节点</span><br>    addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>    <br>    InThreading(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中序序列:\n&quot;</span>);<br>    InThread(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="先序线索化"><a href="#先序线索化" class="headerlink" title="先序线索化"></a>先序线索化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag;     <span class="hljs-comment">//左、右线索标志</span><br>&#125;ThreadNode, *ThreadTree;<br><br><span class="hljs-comment">//全局变量pre，指向当前访问结点的前驱</span><br>ThreadNode *pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(ThreadNode *q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (q-&gt;lchild == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//左字树为空，建立前驱线索</span><br>        q-&gt;lchild = pre;<br>        q-&gt;ltag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>        pre-&gt;rchild = q;    <span class="hljs-comment">//建立前驱结点的后继线索</span><br>        pre-&gt;rtag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d rtag=%d\n&quot;</span>, q-&gt;data,q-&gt;ltag,q-&gt;rtag);<br>    pre = q;<br>&#125;<br><br><span class="hljs-comment">//先序遍历，一边遍历一边线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        visit(T);              <span class="hljs-comment">//访问根节点</span><br>        <br>        <span class="hljs-keyword">if</span> (T-&gt;ltag == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//lchild不是前驱线索</span><br>            PreThread(T-&gt;lchild);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (T-&gt;rtag == <span class="hljs-number">0</span>) &#123;<br>            PreThread(T-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(ThreadTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;lchild);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;rchild);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//先序线索化二叉树T</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatePreThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    pre = <span class="hljs-literal">NULL</span>;         <span class="hljs-comment">//pre初始为NULL</span><br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//非空二叉树才能线索化</span><br>        PreThread(T);<br>        <span class="hljs-keyword">if</span> (pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>            pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">//处理遍历最后一个结点</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  ThreadTree root;<br>  root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为D结点添加子结点</span><br>  addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  <br>  <span class="hljs-comment">//线索化二叉树</span><br>  CreatePreThread(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-keyword">int</span> ltag, rtag;     <span class="hljs-comment">//左、右线索标志</span><br>&#125;ThreadNode, *ThreadTree;<br><br><span class="hljs-comment">//全局变量pre，指向当前访问结点的前驱</span><br>ThreadNode *pre = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree leftNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(ThreadTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  ThreadTree rightNode = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(ThreadNode *q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (q-&gt;lchild == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//左字树为空，建立前驱线索</span><br>        q-&gt;lchild = pre;<br>        q-&gt;ltag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>        pre-&gt;rchild = q;    <span class="hljs-comment">//建立前驱结点的后继线索</span><br>        pre-&gt;rtag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ltag=%d rtag=%d\n&quot;</span>, q-&gt;data,q-&gt;ltag,q-&gt;rtag);<br>    pre = q;<br>&#125;<br><br><span class="hljs-comment">// 中序遍历，一边遍历一边线索化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        PostThread(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        PostThread(T-&gt;rchild);   <span class="hljs-comment">//递归遍历右子树</span><br>        visit(T);              <span class="hljs-comment">//访问根节点</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(ThreadTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;lchild);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;rchild);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中序线索化二叉树T</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatePostThread</span><span class="hljs-params">(ThreadTree T)</span> </span>&#123;<br>    pre = <span class="hljs-literal">NULL</span>;         <span class="hljs-comment">//pre初始为NULL</span><br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//非空二叉树才能线索化</span><br>        PostThread(T);<br>        <span class="hljs-keyword">if</span> (pre-&gt;rchild == <span class="hljs-literal">NULL</span>) &#123;<br>            pre-&gt;rtag = <span class="hljs-number">1</span>;  <span class="hljs-comment">//处理遍历最后一个结点</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  ThreadTree root;<br>  root = (ThreadTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ThreadNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为D结点添加子结点</span><br>  addRightChild(root-&gt;lchild-&gt;lchild,<span class="hljs-string">&#x27;G&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  <br>  <span class="hljs-comment">//线索化二叉树</span><br>  CreatePostThread(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
      <tag>二叉线索树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(33)王道数据结构-遍历序列构造二叉树</title>
    <link href="/iecore/56288/"/>
    <url>/iecore/56288/</url>
    
    <content type="html"><![CDATA[<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>如果只给出一棵二叉树的前/中/后/层 序遍历序列中的一种，不能唯一确定一棵二叉树，构造分以下三种情况<br>①前序 + 中序遍历序列<br>②后续 + 中序遍历序列<br>③层序 + 中序遍历序列</p><h3 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h3><h4 id="前序-中序"><a href="#前序-中序" class="headerlink" title="前序+中序"></a>前序+中序</h4><p><strong>前序遍历:</strong> 根节点、前序遍历左子树、前序遍历右子树<br><strong>中序遍历:</strong> 中序遍历左子树、根节点、中序遍历右子树</p><p>左子树的前序遍历序列 = 左子树的中序遍历序列<br>右子树的前序遍历序列 = 右子树的中序遍历序列</p><h5 id="例子一"><a href="#例子一" class="headerlink" title="例子一:"></a>例子一:</h5><p>前序序列: A D B C E<br>中序遍历: B D C A E</p><pre><code class="mermaid" >graph TD;    A(("A"));    BCD(("BDC"));    C(("E"));    A-->BCD;    A-->C;</code></pre><pre><code class="mermaid" >graph TD;    A(("A"));    B(("B"));    C(("C"));    D(("D"));    E(("E"));    A-->D;    A-->E;    D-->B;    D-->C;</code></pre><h5 id="例子二"><a href="#例子二" class="headerlink" title="例子二:"></a>例子二:</h5><p>前序序列: D A E F B C H G I<br>中序遍历: E A F D H C B G I</p><pre><code class="mermaid" >graph TD;    D(("D"));    EAF(("EAF"));    HCBGI(("HCBGI"));    D-->EAF;    D-->HCBGI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    A(("A"));    E(("E"));    F(("F"));    HCBGI(("HCBGI"));    D-->A;    D-->HCBGI;    A-->E;    A-->F;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    A(("A"));    E(("E"));    F(("F"));    B(("B"));    HC(("HC"));    GI(("GI"));    D-->A;    A-->E;    A-->F;    D-->B;    B-->HC;    B-->GI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    A(("A"));    E(("E"));    F(("F"));    B(("B"));    H(("H"));    C(("C"));    G(("G"));    I(("I"));    D-->A;    A-->E;    A-->F;    D-->B;    B-->C;    B-->G;    C-->H;    C-->N1(( ));    G-->N2(( ));    G-->I;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    linkStyle 7 stroke:#0ff,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px</code></pre><h4 id="后序-中序"><a href="#后序-中序" class="headerlink" title="后序+中序"></a>后序+中序</h4><p><strong>前序遍历:</strong> 前序遍历左子树、前序遍历右子树、根节点<br><strong>中序遍历:</strong> 中序遍历左子树、根节点、中序遍历右子树<br>左子树的后序遍历序列 = 左子树的中序遍历序列<br>右子树的后序遍历序列 = 右子树的中序遍历序列</p><h5 id="例子一-1"><a href="#例子一-1" class="headerlink" title="例子一:"></a>例子一:</h5><p>前序序列: E F A H C I G B D<br>中序遍历: E A F D H C B G I</p><pre><code class="mermaid" >graph TD;    D(("D"));    EAF(("EAF"));    HCBGI(("HCBGI"));    D-->EAF;    D-->HCBGI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    E(("E"));    F(("F"));    A(("A"));    HCBGI(("HCBGI"));    D-->A;    D-->HCBGI;    A-->E;    A-->F;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    E(("E"));    F(("F"));    A(("A"));    B(("B"));    HC(("HC"));    GI(("GI"));    D-->A;    D-->B;    A-->E;    A-->F;    B-->HC;    B-->GI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    E(("E"));    F(("F"));    A(("A"));    B(("B"));    H(("H"));    C(("C"));    G(("G"));    I(("I"));    D-->A;    D-->B;    A-->E;    A-->F;    B-->C;    B-->G;    C-->H;    C-->N1(( ));    G-->N2(( ));    G-->I;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    linkStyle 7 stroke:#0ff,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px</code></pre><h4 id="层次-中序"><a href="#层次-中序" class="headerlink" title="层次+中序"></a>层次+中序</h4><p><strong>层次序列:</strong> 根节点、左子树的根、右子树的根<br><strong>中序序列:</strong> 左子树的中序遍历序列、根节点、右子树的中序遍历序列</p><p>左子树的根 -&gt; 左子树的中序遍历序列<br>右子树的根 -&gt; 右子树的中序遍历序列</p><pre><code class="mermaid" >graph TD;    D(("D"));    EAF(("EAF"));    HCBGI(("HCBGI"));    D-->EAF;    D-->HCBGI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    A(("A"));    E(("E"));    F(("F"));    B(("B"));    HC(("HC"));    GI(("GI"));    D-->A;    D-->B;    A-->E;    A-->F;    B-->HC;    B-->GI;</code></pre><pre><code class="mermaid" >graph TD;    D(("D"));    A(("A"));    E(("E"));    F(("F"));    B(("B"));    H(("H"));    C(("C"));    G(("G"));    I(("I"));    D-->A;    D-->B;    A-->E;    A-->F;    B-->C;    B-->G;    C-->H;    C-->N1(( ));    G-->N2(( ));    G-->I;    style N1 fill:#f100,stroke-width:0px    style N2 fill:#f100,stroke-width:0px    linkStyle 7 stroke:#0ff,stroke-width:0px    linkStyle 8 stroke:#0ff,stroke-width:0px</code></pre>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(32)王道数据结构-二叉树的层次遍历</title>
    <link href="/iecore/28833/"/>
    <url>/iecore/28833/</url>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>①初始化一个辅助队列<br>②根节点入队<br>③若队列非空，则队头结点出队，访问该节点，并将其左、右孩子插入队尾(存在的话)<br>④重复③直到队列为空</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">//二叉树 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>BiTNode* lchild, * rchild;<br><span class="hljs-keyword">char</span> data;<br>&#125;BiTNode, * BiTree;<br><span class="hljs-comment">//队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> &#123;</span><br>BiTNode* data;<br>LinkNode* next;<br>&#125;LinkNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>LinkNode* front, * rear;<br>&#125;LinkQueue;<br><br><span class="hljs-comment">//初始化 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue&amp; L)</span> </span>&#123;<br>L.front = L.rear = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br><span class="hljs-keyword">if</span> (L.front == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>L.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PushNode</span><span class="hljs-params">(LinkQueue&amp; L, BiTree T)</span> </span>&#123;<br>LinkNode* s = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>s-&gt;data = T;<br>s-&gt;next = <span class="hljs-literal">NULL</span>;<br>L.rear-&gt;next = s;<br>L.rear = s;<br>&#125;<br><br><span class="hljs-comment">//入队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PopNode</span><span class="hljs-params">(LinkQueue&amp; L, BiTree&amp; T1)</span> </span>&#123;<br>T1 = L.front-&gt;next-&gt;data;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, L.front-&gt;next-&gt;data-&gt;data);<br>L.front = L.front-&gt;next;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelTraversal</span><span class="hljs-params">(BiTree&amp; T)</span> </span>&#123;<br>BiTree T1;<br>LinkQueue L;<br>InitQueue(L);<br>PushNode(L, T);<br><span class="hljs-keyword">while</span> (L.front != L.rear) &#123;<br>PopNode(L, T1);<br><span class="hljs-keyword">if</span> (T1-&gt;lchild != <span class="hljs-literal">NULL</span>) &#123;<br>            PushNode(L, T1-&gt;lchild);<br>        &#125;<br><span class="hljs-keyword">if</span> (T1-&gt;rchild != <span class="hljs-literal">NULL</span>) &#123;<br>            PushNode(L, T1-&gt;rchild);<br>        &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(BiTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  BiTree leftNode = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;lchild = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(BiTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  BiTree rightNode = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;rchild = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//设定根节点</span><br>    BiTree root;<br>    root = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <br>    <span class="hljs-comment">//根节点A</span><br>    root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>    addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>    <span class="hljs-comment">//为B节点增加子节点</span><br>    addLeftChild(root-&gt;lchild, <span class="hljs-string">&#x27;D&#x27;</span>);<br>    addRightChild(root-&gt;lchild, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>    <span class="hljs-comment">//为C节点增加子节点</span><br>    addLeftChild(root-&gt;rchild, <span class="hljs-string">&#x27;F&#x27;</span>);<br>    addRightChild(root-&gt;rchild, <span class="hljs-string">&#x27;G&#x27;</span>);<br><br>LevelTraversal(root);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
      <tag>层次遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(31)王道数据结构-二叉树的前中后序遍历</title>
    <link href="/iecore/14001/"/>
    <url>/iecore/14001/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>遍历:</strong> 按照某种次序把所有结点都访问一遍<br><strong>层次遍历:</strong> 基于树的层次特性确定的次序规则</p><p><strong>递归特征:</strong><br>①要么是个空二叉树<br>②要么就是由“根节点+左子树+右子树”组成的二叉树</p><p><strong>先序遍历:</strong> 根左右(NLR)<br><strong>中序遍历:</strong> 左根右(LNR)<br><strong>后续遍历:</strong> 左右根(LRN)</p><h4 id="算数表达式分析树"><a href="#算数表达式分析树" class="headerlink" title="算数表达式分析树"></a>算数表达式分析树</h4><p>将操作数作为二叉树的叶子结点,操作符作为二叉树的非叶子结点</p><pre><code class="mermaid" >graph TD;    A(("-"));    B(("+"));    C(("/"));    D(("a"));    E(("*"));    F(("e"));    G(("f"));    H(("b"));    I(("-"));    J(("c"));    K(("d"));    A-->B;    A-->C;    B-->D;    B-->E;    C-->F;    C-->G;    E-->H;    E-->I;    I-->J;    I-->K;</code></pre><p><strong>算数表达式:</strong><br>a + b * (c - d) - e/f</p><p><strong>先序遍历:</strong> -+a<em>b-cd/ef<br><strong>中序遍历:</strong> a+b</em>c-d-e/f<br><strong>后续遍历:</strong> abcd-*ef/-</p><p>先序遍历-&gt;前缀表达式<br>中序遍历-&gt;中缀表达式(要加界限符)<br>后续遍历-&gt;后缀表达式</p><h3 id="三种遍历"><a href="#三种遍历" class="headerlink" title="三种遍历"></a>三种遍历</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>先序遍历的操作过程如下:<br>1.若二叉树为空，则什么也不做<br>2.若二叉树非空:<br>①访问根节点<br>②先序遍历左子树<br>③先序遍历右子树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125; BiTNode, *BiTree;<br><br><span class="hljs-comment">//先序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        visit(T);   <span class="hljs-comment">//访问根节点</span><br>        PreOrder(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        PreOrder(T-&gt;rchild);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>中序遍历操作过程如下<br>1.若二叉树为空，则什么也不做<br>2.若二叉树非空:<br>②先序遍历左子树<br>①访问根节点<br>③先序遍历右子树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125; BiTNode, *BiTree;<br><br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        midOrder(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        visit(T);   <span class="hljs-comment">//访问根节点</span><br>        midOrder(T-&gt;rchild);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h4><p>后续遍历操作过程如下<br>1.若二叉树为空，则什么也不做<br>2.若二叉树非空:<br>②先序遍历左子树<br>③先序遍历右子树<br>①访问根节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125; BiTNode, *BiTree;<br><br><span class="hljs-comment">//后续遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterOrder</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        afterOrder(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        afterOrder(T-&gt;rchild);    <span class="hljs-comment">//递归遍历右子树</span><br>        visit(T);   <span class="hljs-comment">//访问根节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">left</span>, *<span class="hljs-title">right</span>;</span><br>&#125;BiTNode, *BiTree;<br><br><span class="hljs-comment">//为树的当前节点添加左子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addLeftChild</span><span class="hljs-params">(BiTree root, <span class="hljs-keyword">char</span> leftData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  BiTree leftNode = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  leftNode-&gt;data = leftData;<br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  leftNode-&gt;left = <span class="hljs-literal">NULL</span>;<br>  leftNode-&gt;right = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;left = leftNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//为树的当前节点添加右子节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addRightChild</span><span class="hljs-params">(BiTree root, <span class="hljs-keyword">char</span> rightData)</span> </span>&#123;<br>  <span class="hljs-comment">//分配新节点</span><br>  BiTree rightNode = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <span class="hljs-comment">//为新节点挂载数据</span><br>  rightNode-&gt;data = rightData;<br>  <br>  <span class="hljs-comment">//新节点暂时无子节点</span><br>  rightNode-&gt;left = <span class="hljs-literal">NULL</span>;<br>  rightNode-&gt;right = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-comment">//将新节点挂到当前节点下</span><br>  root-&gt;right = rightNode;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(BiTree root)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, root-&gt;data);<br>&#125;<br><br><span class="hljs-comment">// 前序遍历，根--左--右</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BiTree root)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        visit(root);   <span class="hljs-comment">//访问根节点</span><br>        preOrder(root-&gt;left);    <span class="hljs-comment">//递归遍历左子树</span><br>        preOrder(root-&gt;right);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 中序遍历，左--根--右</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">(BiTree root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        midOrder(root-&gt;left);    <span class="hljs-comment">//递归遍历左子树</span><br>        visit(root);   <span class="hljs-comment">//访问根节点</span><br>        midOrder(root-&gt;right);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 后序遍历，左--根--右</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterOrder</span><span class="hljs-params">(BiTree root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        afterOrder(root-&gt;left);    <span class="hljs-comment">//递归遍历左子树</span><br>        afterOrder(root-&gt;right);    <span class="hljs-comment">//递归遍历右子树</span><br>        visit(root);   <span class="hljs-comment">//访问根节点</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放二叉树节点内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deltree</span><span class="hljs-params">(BiTree tree)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">NULL</span>) &#123;<br>        deltree(tree-&gt;left);<span class="hljs-comment">//先往左子树一直寻找</span><br>        deltree(tree-&gt;right);<span class="hljs-comment">//再往右子树一直寻找</span><br>        <span class="hljs-built_in">free</span>(tree); <span class="hljs-comment">//找不到了free返回上一级</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//设定根节点</span><br>  BiTree root;<br>  root = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>  <br>  <span class="hljs-comment">//根节点A</span><br>  root-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  addLeftChild(root, <span class="hljs-string">&#x27;B&#x27;</span>);<br>  addRightChild(root, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为B节点增加子节点</span><br>  addLeftChild(root-&gt;left, <span class="hljs-string">&#x27;D&#x27;</span>);<br>  addRightChild(root-&gt;left, <span class="hljs-string">&#x27;E&#x27;</span>);<br>  <br>  <span class="hljs-comment">//为C节点增加子节点</span><br>  addLeftChild(root-&gt;right, <span class="hljs-string">&#x27;F&#x27;</span>);<br>  addRightChild(root-&gt;right, <span class="hljs-string">&#x27;G&#x27;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n前序遍历：&quot;</span>);<br>  preOrder(root);<br>  <br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n中序遍历：&quot;</span>);<br>  midOrder(root);<br>  <br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n后序遍历：&quot;</span>);<br>  afterOrder(root);<br>  <br>  deltree(root);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
      <tag>前序遍历</tag>
      
      <tag>中序遍历</tag>
      
      <tag>后续遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(30)王道数据结构-二叉树的存储结构</title>
    <link href="/iecore/37476/"/>
    <url>/iecore/37476/</url>
    
    <content type="html"><![CDATA[<h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><p>定义一个长度为MaxSize的数组t，按照从上至下、从右至左的顺序依次存储完全二叉树的各个节点</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 100</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> value;       <span class="hljs-comment">//结点中的数据元素</span><br>    <span class="hljs-keyword">bool</span> isEmpty;   <span class="hljs-comment">//结点是否为空</span><br>&#125;;<br>TreeNode t[MaxSize];<br></code></pre></td></tr></table></figure><p><strong>初始化操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//初始化时所有节点标记为空</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i &lt; MaxSize; i++) &#123;<br>  t[i].isEmpty = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>i的左孩子:</strong>    2i<br><strong>i的右孩子:</strong>    2i+1<br><strong>i的父节点:</strong>    [i/2]<br><strong>i所在的层次:</strong>  [log2(n+1)]或[log2n]+1</p><p><strong>二叉树的顺序存储中，一定要把二叉树的结点编号与完全二叉树对应起来</strong></p><h4 id="时间分析"><a href="#时间分析" class="headerlink" title="时间分析"></a>时间分析</h4><p><strong>最坏情况:</strong><br>高度为h且只有h个结点的单支树(所有节点只有右孩子),也至少需要2^h-1个存储单元</p><p><strong>结论:</strong><br>二叉树的顺序存储结构，只适合存储完全二叉树</p><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//二叉树的结点(链式存储)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;                       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span> <span class="hljs-comment">//左、右孩子指针</span><br>&#125;BiTNode, *BiTree;<br></code></pre></td></tr></table></figure><p>n个结点的二叉链表共有n+1个空链域，可以用于构造线索二叉树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//二叉树的结点(链式存储)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;                       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, <span class="hljs-title">rchild</span>;</span> <span class="hljs-comment">//左、右孩子指针</span><br>&#125;BiTNode, *BiTree;<br><br><span class="hljs-comment">//定义一棵空树</span><br>BiTree root = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//插入根节点</span><br>root = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>root-&gt;data = &#123;<span class="hljs-number">1</span>&#125;;<br>root-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>root-&gt;rchild = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//插入新结点</span><br>BiTNode *p = (BiTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>p-&gt;data = &#123;<span class="hljs-number">2</span>&#125;;<br>p-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>p-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>root-&gt;lchild = p; <span class="hljs-comment">//作为根节点的左孩子</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//二叉树的结点(链式存储)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;                       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, <span class="hljs-title">rchild</span>;</span> <span class="hljs-comment">//左、右孩子指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">parent</span>;</span>         <span class="hljs-comment">//父节点指针</span><br>&#125;BiTNode, *BiTree;<br></code></pre></td></tr></table></figure><p>三叉链表，方便找到父节点</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(29)王道数据结构-二叉树的定义</title>
    <link href="/iecore/39777/"/>
    <url>/iecore/39777/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>二叉树是n(n≥0)个节点的有限集合：<br>①或者为空二叉树,即n=0<br>②或者由一个根节点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树<br><strong>特点:</strong><br>①每个节点至多只有两棵子树<br>②左右子树不能颠倒(二叉树是有序树)</p><h4 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h4><h5 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树:"></a>满二叉树:</h5><p>一棵高度为h，且含有2^h - 1个节点的二叉树<br><strong>特点:</strong><br>①只有最后一层有叶子节点<br>②不存在度为1的节点<br>③按层序从1开始编号，节点为i的做孩子为2i，右孩子为2i + 1，节点i的父亲节点为<a href="%E5%A6%82%E6%9E%9C%E6%9C%89%E7%9A%84%E8%AF%9D">i/2</a></p><h5 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树:"></a>完全二叉树:</h5><p>当且仅当其每个节点都与高度为h的满二叉树编号为1~n个节点一一对应时，称为完全二叉树<br><strong>特点:</strong><br>①只有最后两层可能有叶子节点<br>②最多只有一个度为1的节点<br>③按层序从1开始编号，节点为i的做孩子为2i，右孩子为2i + 1，节点i的父亲节点为<a href="%E5%A6%82%E6%9E%9C%E6%9C%89%E7%9A%84%E8%AF%9D">i/2</a><br>④i ≤ [n/2]为分支节点，i &gt; [n/2]为叶子节点</p><h5 id="二叉排列树"><a href="#二叉排列树" class="headerlink" title="二叉排列树:"></a>二叉排列树:</h5><p>一棵二叉树或者空二叉树，或者具有如下性质的二叉树<br><strong>性质:</strong><br>①左子树上所有节点的关键字均小于根节点的关键字<br>②右子树上所有节点的关键字均大于根节点的关键字<br>③左子树和右子树又是各是一棵二叉排序树</p><p><strong>可用于元素的排序、搜索</strong></p><h5 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h5><p>树上任意一个节点左子树和右子树的深度不超过1，能有更高的搜索效率</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(28)王道数据结构-树的基本概念</title>
    <link href="/iecore/11396/"/>
    <url>/iecore/11396/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>树是n(n≥0)个节点的有限集合，n=0时，称为空树,这是一种特殊情况。在任意一个非空树种应满足:<br>1)有且仅有一个特点的称为根的节点。<br>2)当n&gt;1时，其余节点可分为m(m&gt;0)个互不相交的有限集合<br>$$<br>T_1,T_2,..T_m<br>$$<br>其中每个集合又是一颗树，并且称为根节点的子树</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>节点的层次(深度):</strong> 从上往下数<br><strong>节点的高度:</strong> 从下往上数<br><strong>树的高度(深度):</strong> 总共多少层<br><strong>节点的度:</strong> 有几个孩子(分支),非叶子节点度&gt;0，叶子节点的度=0<br><strong>树的度:</strong> 各节点度的最大值</p><p><strong>有序树:</strong> 逻辑上看，树种节点的各子树从左至右是有次序的，不能互换<br><strong>无需树:</strong> 逻辑上看，书中节点的各子树从左至右是无序的，可以互换<br><strong>森林:</strong> 森林是m(m≥0)棵互不相交树的集合</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p><strong>性质一:</strong> 节点数 = 总度数 + 1<br><strong>性质二:</strong> 度为m的数、m叉树的区别</p><table><thead><tr><th>度为m的树</th><th>m叉树</th></tr></thead><tbody><tr><td>任意节点的度≤(最多m个孩子)</td><td>任意节点的度≤m(最多m个孩子)</td></tr><tr><td>至少有一个节点的度=m(有m个孩子)</td><td>允许所有节点的度都&lt;m</td></tr><tr><td>一定是非空树，至少有m+1个节点</td><td>可以是空树</td></tr></tbody></table><p><strong>性质三:</strong><br>$$<br>度为m的数第i层至多有m^{i-1}个节点(i≥1),m叉树第i层至多有m^{i-1}个节点(i≥1)<br>$$</p><p><strong>性质四:</strong><br>$$<br>高度为h的m叉树至多有\frac{m^h-1}{m-1}个节点,等比数列求和: a + aq + aq^2 + … + aq^{n-1} = \frac{a(1-qn)}{1-q}<br>$$</p><p><strong>性质五:</strong><br>高度为h的m叉树至少有h个节点。高度为h、度为m的数至少有h+m-1个节点</p><p><strong>性质六:</strong><br>具有n个节点的m叉树的最小高度为<br>$$<br>log_m[{n(m-1)+1}]<br>$$<br>高度最小情况-所有节点都有m个孩子，左边为前h-1层最多有几个节点，右边为前h层最多有几个节点<br>$$<br>\begin{align*}<br> \frac{m^{h-1}}{m-1} &amp;&lt; n ≤ \frac{m^h - 1}{m -1} \\[2ex]<br> m^{h-1} &amp;&lt; n(m-1) + 1 ≤ mh \\[2ex]<br> h - 1 &amp;&lt; log_m[{n(m-1)+1}] ≤ h \\[2ex]<br> h_{min} &amp;= log_m[{n(m-1)+1}]<br>\end{align*}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(26)王道数据结构-串的朴素匹配</title>
    <link href="/iecore/51680/"/>
    <url>/iecore/51680/</url>
    
    <content type="html"><![CDATA[<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p><strong>串的匹配模式:</strong> 在主串中找到与模式串相同的子串，并返回其所在的位置</p><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>若主串S中存在与串T相同的子串，则返回它在主串S中第一次出现的位置，否则函数值为0。只要有一个字符不同，就可以停止检查当前子串</p><h4 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h4><p><strong>代码一:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255  <span class="hljs-comment">//预定义最大串长为255</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> ch[MAXLEN];<span class="hljs-comment">//每个分量存储一个字符</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;SString;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> ch[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SString S, sub;<br>    <span class="hljs-keyword">char</span> ch[] = <span class="hljs-string">&quot;This is String Demo Code&quot;</span>;<br>    StrAssing(&amp;S, ch);<br>    SubString(&amp;sub, S, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    <br>    <span class="hljs-keyword">int</span> index = Index(S, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;index=%d\n&quot;</span>, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> str[])</span> </span>&#123;<br>    <span class="hljs-comment">//清空原始内容</span><br>    <span class="hljs-built_in">memset</span>(T-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    T-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//重新赋值为chars</span><br>    <span class="hljs-built_in">strcpy</span>(T-&gt;ch, str);<br>    T-&gt;length = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(T-&gt;ch));<br>&#125;<br><br><span class="hljs-comment">//求子串</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//子串范围越界</span><br>    <span class="hljs-keyword">if</span> (pos + len - <span class="hljs-number">1</span> &gt; S.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//清空T中的原始内容</span><br>    <span class="hljs-built_in">memset</span>(sub-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    sub-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">strncpy</span>(sub-&gt;ch, S.ch + pos, len);<br>    <span class="hljs-comment">//重新设置串的长度</span><br>    sub-&gt;length=len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//比较操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= S.length &amp;&amp; i &lt;= T.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] != T.ch[i]) &#123;<br>            <span class="hljs-keyword">return</span> S.ch[i] - T.ch[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S.length - T.length;<br>&#125;<br><br><span class="hljs-comment">//朴素模式匹配算法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> i = k, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] == T.ch[j]) &#123;<br>            ++i;<br>            ++j;    <span class="hljs-comment">//继续比较后继字符</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            k++;    <span class="hljs-comment">//检查下一个字符</span><br>            i = k;<br>            j = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &gt; T.length) &#123;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取字符串长度</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> T.length;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码二:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255  <span class="hljs-comment">//预定义最大串长为255</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> ch[MAXLEN];<span class="hljs-comment">//每个分量存储一个字符</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;SString;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> ch[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SString S, sub;<br>    <span class="hljs-keyword">char</span> ch[] = <span class="hljs-string">&quot;This is String Demo Code&quot;</span>;<br>    StrAssing(&amp;S, ch);<br>    SubString(&amp;sub, S, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    <br>    <span class="hljs-keyword">int</span> index = Index(S, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;index=%d\n&quot;</span>, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> str[])</span> </span>&#123;<br>    <span class="hljs-comment">//清空原始内容</span><br>    <span class="hljs-built_in">memset</span>(T-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    T-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//重新赋值为chars</span><br>    <span class="hljs-built_in">strcpy</span>(T-&gt;ch, str);<br>    T-&gt;length = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(T-&gt;ch));<br>&#125;<br><br><span class="hljs-comment">//求子串</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//子串范围越界</span><br>    <span class="hljs-keyword">if</span> (pos + len - <span class="hljs-number">1</span> &gt; S.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//清空T中的原始内容</span><br>    <span class="hljs-built_in">memset</span>(sub-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    sub-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">strncpy</span>(sub-&gt;ch, S.ch + pos, len);<br>    <span class="hljs-comment">//重新设置串的长度</span><br>    sub-&gt;length=len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//比较操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= S.length &amp;&amp; i &lt;= T.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] != T.ch[i]) &#123;<br>            <span class="hljs-keyword">return</span> S.ch[i] - T.ch[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S.length - T.length;<br>&#125;<br><br><span class="hljs-comment">//朴素模式匹配算法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] == T.ch[j]) &#123;<br>            ++i;    <span class="hljs-comment">//继续比较后继字符</span><br>            ++j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - j + <span class="hljs-number">2</span>;<br>            j = <span class="hljs-number">1</span>;  <span class="hljs-comment">//指针后退重新开始匹配</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &gt; T.length) &#123;<br>        <span class="hljs-keyword">return</span> i - T.length;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取字符串长度</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> T.length;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>较好情况下，每一个子串第一个字符就与模式串不匹配<br><strong>时间复杂度:</strong><br>若模式串长度为m, 主串长度为n, 最多需要(n-m+1)*m次 比较则:<br>匹配成功的最好时间复杂度: O(m)<br>匹配失败的最好时间复杂度: O(n-m+1) = O(n-m)≈O(n)<br>匹配失败最坏时间复杂度: 每个子串的前m-1个字符都与模式串匹配,只有第m个串不匹配最坏时间复杂度: O(mn)</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>串</tag>
      
      <tag>顺序存储</tag>
      
      <tag>朴素匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(27)王道数据结构-KMP算法</title>
    <link href="/iecore/39963/"/>
    <url>/iecore/39963/</url>
    
    <content type="html"><![CDATA[<h3 id="引入原因"><a href="#引入原因" class="headerlink" title="引入原因"></a>引入原因</h3><p>朴素模式匹配算法中，当某些子串与模式串能部分匹配时，主串的扫描指针i经常回溯，导致时间开销增加</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255  <span class="hljs-comment">//预定义最大串长为255</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> ch[MAXLEN];<span class="hljs-comment">//每个分量存储一个字符</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;SString;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> ch[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(SString T, <span class="hljs-keyword">int</span> next[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SString S, sub;<br>    <span class="hljs-keyword">char</span> ch[] = <span class="hljs-string">&quot;This is String Demo Code&quot;</span>;<br>    StrAssing(&amp;S, ch);<br>    SubString(&amp;sub, S, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    <br>    <span class="hljs-keyword">int</span> index = Index(S, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;index=%d\n&quot;</span>, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> str[])</span> </span>&#123;<br>    <span class="hljs-comment">//清空原始内容</span><br>    <span class="hljs-built_in">memset</span>(T-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    T-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//重新赋值为chars</span><br>    <span class="hljs-built_in">strcpy</span>(T-&gt;ch, str);<br>    T-&gt;length = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(T-&gt;ch));<br>&#125;<br><br><span class="hljs-comment">//求子串</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//子串范围越界</span><br>    <span class="hljs-keyword">if</span> (pos + len - <span class="hljs-number">1</span> &gt; S.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//清空T中的原始内容</span><br>    <span class="hljs-built_in">memset</span>(sub-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    sub-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">strncpy</span>(sub-&gt;ch, S.ch + pos, len);<br>    <span class="hljs-comment">//重新设置串的长度</span><br>    sub-&gt;length=len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//比较操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= S.length &amp;&amp; i &lt;= T.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] != T.ch[i]) &#123;<br>            <span class="hljs-keyword">return</span> S.ch[i] - T.ch[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S.length - T.length;<br>&#125;<br><br><span class="hljs-comment">//朴素模式匹配算法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> next[T.length + <span class="hljs-number">1</span>];<br>    get_next(T, next);<br>    <span class="hljs-keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length) &#123;<br>        <span class="hljs-keyword">if</span> (j==<span class="hljs-number">0</span> || S.ch[i] == T.ch[j]) &#123;<br>            ++i;<br>            ++j;            <span class="hljs-comment">//继续比较后继字符</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j = next[j];    <span class="hljs-comment">//模式串向右移动</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &gt; T.length) &#123;<br>        <span class="hljs-keyword">return</span> i - T.length;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//求模式串T的next数组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(SString T, <span class="hljs-keyword">int</span> next[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; T.length) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || T.ch[i] == T.ch[j]) &#123;<br>            ++i;<br>            ++j;<br>            <span class="hljs-comment">//若pi=pj，则next[j+1]=next[j] + 1</span><br>            next[i] = j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//否则令j = next[j],循环继续</span><br>            j = next[j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取字符串长度</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> T.length;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>串</tag>
      
      <tag>顺序存储</tag>
      
      <tag>朴素匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(25)王道数据结构-串的存储结构</title>
    <link href="/iecore/34256/"/>
    <url>/iecore/34256/</url>
    
    <content type="html"><![CDATA[<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255  <span class="hljs-comment">//预定义最大串长为255</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> ch[MAXLEN];<span class="hljs-comment">//每个分量存储一个字符</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;SString;<br></code></pre></td></tr></table></figure><h5 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> *ch;       <span class="hljs-comment">//按串长度分配存储区，ch指向串的基地址</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;HString;  <br>HString S;<br>S.ch = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(MAXLEN *<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>S.length = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p><strong>方式一:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> ch;    <span class="hljs-comment">//每个节点存1个字符</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span> * <span class="hljs-title">next</span>;</span><br>&#125;StringNode, *String;<br></code></pre></td></tr></table></figure><p>存储密度低，每个字符1B，每个指针4B</p><p><strong>方式二:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span> &#123;</span><br>    <span class="hljs-keyword">char</span> ch[<span class="hljs-number">4</span>];    <span class="hljs-comment">//每个节点存多个字符</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StringNode</span> * <span class="hljs-title">next</span>;</span><br>&#125;StringNode, *String;<br></code></pre></td></tr></table></figure><p>存储密度提高了</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLEN 255  <span class="hljs-comment">//预定义最大串长为255</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">char</span> ch[MAXLEN];<span class="hljs-comment">//每个分量存储一个字符</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//串的实际长度</span><br>&#125;SString;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> ch[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SString S, sub;<br>    <span class="hljs-keyword">char</span> ch[] = <span class="hljs-string">&quot;This is String Demo Code&quot;</span>;<br>    StrAssing(&amp;S, ch);<br>    SubString(&amp;sub, S, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sub=%s\n&quot;</span>, sub.ch);<br>    <br>    <span class="hljs-keyword">int</span> len = StrCompare(S, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d\n&quot;</span>, len);<br>    <br>    <span class="hljs-keyword">int</span> index = Index(S, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;index=%d\n&quot;</span>, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StrAssing</span><span class="hljs-params">(SString *T, <span class="hljs-keyword">char</span> str[])</span> </span>&#123;<br>    <span class="hljs-comment">//清空原始内容</span><br>    <span class="hljs-built_in">memset</span>(T-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    T-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//重新赋值为chars</span><br>    <span class="hljs-built_in">strcpy</span>(T-&gt;ch, str);<br>    T-&gt;length = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(T-&gt;ch));<br>&#125;<br><br><span class="hljs-comment">//求子串</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//子串范围越界</span><br>    <span class="hljs-keyword">if</span> (pos + len - <span class="hljs-number">1</span> &gt; S.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//清空T中的原始内容</span><br>    <span class="hljs-built_in">memset</span>(sub-&gt;ch, <span class="hljs-number">0</span>, MAXLEN);<br>    sub-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">strncpy</span>(sub-&gt;ch, S.ch + pos, len);<br>    <span class="hljs-comment">//重新设置串的长度</span><br>    sub-&gt;length=len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">subString</span><span class="hljs-params">(SString &amp;sub, SString S, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//子串范围越界</span><br>    <span class="hljs-keyword">if</span> (pos + len - <span class="hljs-number">1</span> &gt; S.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = pos; i &lt; pos + len; i++) &#123;<br>        sub.ch[i-pos+<span class="hljs-number">1</span>] = S.ch[i];<br>    &#125;<br>    sub.length = len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//比较操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrCompare</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= S.length &amp;&amp; i &lt;= T.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (S.ch[i] != T.ch[i]) &#123;<br>            <span class="hljs-keyword">return</span> S.ch[i] - T.ch[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S.length - T.length;<br>&#125;<br><br><span class="hljs-comment">//定位操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(SString S, SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, n =  StrLength(S), m = StrLength(T);<br>    SString sub;    <span class="hljs-comment">//用于暂存子串</span><br>    <span class="hljs-keyword">while</span> (i &lt;= n-m+<span class="hljs-number">1</span>) &#123;<br>        SubString(&amp;sub, S, i, m);<br>        <span class="hljs-keyword">if</span> (StrCompare(sub,T) != <span class="hljs-number">0</span>) &#123;<br>            ++i;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> i;   <span class="hljs-comment">//返回子串在主串中的位置</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//S中不存在与T相等的子串</span><br>&#125;<br><br><span class="hljs-comment">//获取字符串长度</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StrLength</span><span class="hljs-params">(SString T)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> T.length;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>串</tag>
      
      <tag>顺序存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(24)王道数据结构-串的定义和基本操作</title>
    <link href="/iecore/56833/"/>
    <url>/iecore/56833/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>串，即字符串是由零个或多个字符组成的有限序列。一般记为：<br>$$<br>S=’a_1a_2…a_n’(n\geq 0)<br>$$<br>其中，S是串名，单引号括起来的字符序列是串的值：ai可以是字母、数字或其他字符；串中字符的个数n称为串的长度。n=0时的串称为空串(用∅表示)<br><strong>注:</strong> 有的地方用双引号(Java,C)，有的地方用单引号(Python)</p><p><strong>子串:</strong> 串中任意个连续的字符组成的子序列。<br><strong>主串:</strong> 包含子串的串<br><strong>字符在主串中的位置:</strong> 字符在串中的序号<br><strong>字符在主串中的位置:</strong> 子串的第一个字符在主串中的位置</p><h4 id="串与线性表"><a href="#串与线性表" class="headerlink" title="串与线性表"></a>串与线性表</h4><p>串是一种特殊的线性表，数据元素之间呈线性关系<br>串的数据对象限定为字符集(中文字符、英文字符、数字符号、标点字符等)<br>串的基本操作，如增删改查等通常以子串为操作对象</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>StrAssing(&amp;T, chars):</strong> 赋值操作。把串T赋值为chars<br><strong>StrCopy(&amp;T, S):</strong> 复制操作。由串S复制得到串T<br><strong>StrEmpty(S):</strong> 判空操作。若S为空串，则返回TRUE，否则返回FALSE<br><strong>StrLength(S):</strong> 求串长。返回串S元素个数<br><strong>ClearString(&amp;S):</strong> 清空操作。将S清为空串<br><strong>DestoryString(&amp;S):</strong> 销毁串。将串S销毁(回收存储空间)<br><strong>Concat(&amp;T, S1, S2):</strong> 串联接。用T返回由S1和S2联接而成新串<br><strong>SubString(&amp;Sub, S, pos, len):</strong> 求子串。用Sub返回串S的第pos个字符长度为len的子串<br><strong>Index(S, T):</strong> 定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置。否则函数值为0</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>字符集相当于函数的定义域。编码是函数映射规则对应的二进制数<br><strong>常见字符集:</strong><br><strong>英文字符:</strong> ASCII字符集<br><strong>中英文:</strong> Unicode字符集</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(23)王道数据结构-栈在递归中应用</title>
    <link href="/iecore/13329/"/>
    <url>/iecore/13329/</url>
    
    <content type="html"><![CDATA[<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数调用的特点：最后被调用的函数最先执行结束(LIFO)<br>函数调用时，需要用一个栈存储调用返回数据，实参，局部变量</p><h3 id="递归案例"><a href="#递归案例" class="headerlink" title="递归案例"></a>递归案例</h3><p>适合用递归算法解决的，可以把原始问题转换为属性相同，但问题规模较小的问题。<br>例如：阶乘、斐波那契数列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = factorial(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10的阶乘为%d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//计算正整数n!</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n * factorial(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归调用时，函数调用栈可称为“递归工作栈”没进入一层递归，就将递归调用所需信息压入栈顶。每退出一层递归，就从栈顶弹出相应信息<br><strong>缺点：</strong>太多层递归可能会导致栈溢出</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(22)王道数据结构-栈在表达式求值中应用</title>
    <link href="/iecore/7857/"/>
    <url>/iecore/7857/</url>
    
    <content type="html"><![CDATA[<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h4><p>运算符在两个操作数中间<br><strong>例如:</strong><br>a + b<br>a + b - c<br>a + b - c*d</p><h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><p>运算符在两个操作数后面，最后出现的操作数先被运算，与栈十分吻合<br><strong>例如:</strong><br>ab +<br>ab + c -<br>ab + cd*-</p><h4 id="前缀表达式"><a href="#前缀表达式" class="headerlink" title="前缀表达式"></a>前缀表达式</h4><p>运算符在两个操作数前面<br><strong>例如:</strong><br>+ab<br>-+abc<br>-+ab*cd</p><h3 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h3><h4 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h4><p>①确定中缀表达式中各个运算符的运算顺序<br>②选择下一个运算符，按照[左操作数 右操作数 运算符]的方式组合成一个新的操作数<br>③如果还有新运算符没被处理，就继续②</p><h4 id="计算案例"><a href="#计算案例" class="headerlink" title="计算案例"></a>计算案例</h4><p><strong>中缀:</strong>((15÷(7-(1+1))x3)-(2+(1+1))<br>运算符次序：③ ② ① ④ ⑦ ⑥ ⑤<br>**后缀:**15 7 1 1 + - ÷ 3 x 2 1 1 + + -<br>运算符次序: ① ② ③ ④ ⑤ ⑥ ⑦ </p><p><strong>注意:**运算顺序如果不唯一，对应的后缀表达式也不唯一<br>**中缀:**A + Bx(C-D) - E/F<br>运算符次序：③ ② ① ⑤ ④<br>运算符次序：⑤ ③ ② ④ ①<br>**后缀:</strong><br><strong>表达式一：</strong>A B C D - x + E F / -<br>运算符次序：① ② ③ ④ ⑤<br><strong>表达式二：</strong>A B C D - x E F / -<br>运算符次序：② ③ ① ④ ⑤<br><strong>为了保证计算机中运算结果唯一，有左优先原则</strong></p><h4 id="手算后缀"><a href="#手算后缀" class="headerlink" title="手算后缀"></a>手算后缀</h4><p>从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算合体为一个操作数</p><h4 id="机算后缀"><a href="#机算后缀" class="headerlink" title="机算后缀"></a>机算后缀</h4><p>①从左往右扫描下一个元素，直到处理完所有元素<br>②若扫描到操作数则压入栈，并回到①，否则执行③，先出栈的是“右操作数”<br>③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①</p><h4 id="机算前缀"><a href="#机算前缀" class="headerlink" title="机算前缀"></a>机算前缀</h4><p>①从右往左扫描到下一个元素，直到处理完所有元素<br>②若扫描到操作数则压入栈，并回到①，否则执行③<br>③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①，先出栈的是“左操作数”</p><h4 id="机转后缀"><a href="#机转后缀" class="headerlink" title="机转后缀"></a>机转后缀</h4><p>初始化一个栈，用于保存暂时还不能确定运算顺序的运算符。从左往右处理各个元素，直到末尾。可能遇到三个情况：<br>①遇到操作数。直接加入后缀表达式<br>②遇到界限符。遇到“(”直接压入栈，遇到”)”则依次弹出栈内运算符并加入后缀表达式，直到弹出”(“为止。注意：“(”不加入后缀表达式<br>③遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到“(”或栈空则停止。之后再把当前运算符入栈<br>处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p><a href="https://blog.csdn.net/weixin_43821874/article/details/86485920">参考原文</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  MAX_LEN 30</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  MAX 100</span><br><span class="hljs-comment">//栈的数组实现</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MAX_LEN];<br>    <span class="hljs-keyword">int</span> top;<br>&#125;Stack;<br><span class="hljs-comment">//为栈分配空间</span><br><span class="hljs-function">Stack *<span class="hljs-title">Createstack</span><span class="hljs-params">()</span> </span>&#123;<br>    Stack *p;<br>    p = (Stack *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(*p));<br>    p-&gt;top = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">//压栈</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack *p,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;top == MAX_LEN - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    p-&gt;top++;<br>    p-&gt;data[p-&gt;top] = x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pop</span><span class="hljs-params">(Stack *L,<span class="hljs-keyword">int</span> *x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;top == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//利用传出参数传出栈顶元素</span><br>    *x = L-&gt;data[L-&gt;top];<br>    L-&gt;top--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//栈顶</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TOP</span><span class="hljs-params">(Stack *L,<span class="hljs-keyword">int</span> *x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;top == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    *x = L-&gt;data[L-&gt;top];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//判断栈是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">(Stack *L)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (L-&gt;top == <span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-comment">//定义符号的优先级</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Priority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ope)</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span>(ope) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//左括号已经在栈内时，如果比较，其优先级最低</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:   <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:  <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">default</span> :   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 将两个数出栈、根据ope符号计算，然后再次入栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Calculation</span><span class="hljs-params">(Stack *snum,<span class="hljs-keyword">int</span> ope)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,n1,n2;<br>    Pop(snum,&amp;n1);<br>    Pop(snum,&amp;n2);<br>    <span class="hljs-keyword">switch</span>(ope) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:   n = n1 + n2; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:   n = n2 - n1; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:   n = n1 * n2; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:   n = n2 / n1; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:   n = n2 % n1; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:   n = <span class="hljs-built_in">pow</span>(n2,n1);<span class="hljs-keyword">break</span>;<br>    &#125;<br>    Push(snum,n);<br>&#125;<br><span class="hljs-comment">// 先处理除右括号外的符号</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Deal_ope</span><span class="hljs-params">(Stack *snum,Stack *sope,<span class="hljs-keyword">int</span> ope)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> old_ope;<br>    <span class="hljs-keyword">if</span> (Empty(sope) || ope == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>        Push(sope,ope);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    TOP(sope,&amp;old_ope);<br>    <span class="hljs-keyword">if</span> (Priority(ope) &gt; Priority(old_ope)) &#123;<br>        <span class="hljs-comment">//传入符号大于当前栈顶，则将传入符号入栈</span><br>        Push(sope,ope);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-comment">//如果传入的符号优先级小于当前栈顶符号</span><br>    <span class="hljs-keyword">while</span> (Priority(ope) &lt;= Priority(old_ope)) &#123;<br>        <span class="hljs-comment">//将当前栈顶的符号取出与数字栈中顶端的两个数字进行计算</span><br>        Pop(sope,&amp;old_ope);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,old_ope);<br>        Calculation(snum,old_ope);<br>        <span class="hljs-keyword">if</span> (Empty(sope)) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//再次取出一个当前栈符号与传入符号比较，循环</span><br>        TOP(sope,&amp;old_ope);<br>    &#125;<br>    Push(sope,ope);<br>&#125;<br><span class="hljs-comment">//单独处理右括号</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Right</span><span class="hljs-params">(Stack *snum,Stack *sope)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> old_ope;<br>    TOP(sope,&amp;old_ope);<br>    <span class="hljs-keyword">while</span> (old_ope != <span class="hljs-string">&#x27;(&#x27;</span>)  &#123;<br>        <span class="hljs-comment">//当前符号出栈然后将数字出栈两个进行计算,在括号内优先级最高</span><br>        Pop(sope,&amp;old_ope);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,old_ope);<br>        Calculation(snum,old_ope);<br>        <span class="hljs-comment">//循环</span><br>        TOP(sope,&amp;old_ope);<br>    &#125;<br>    Pop(sope,&amp;old_ope);<span class="hljs-comment">//出现左括号时将它丢弃</span><br>&#125;<br><span class="hljs-comment">// 打印数字栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Display</span><span class="hljs-params">(Stack *L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span> (L-&gt;top == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span> ; i &lt;= L-&gt;top; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,L-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//打印符号栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Displayope</span><span class="hljs-params">(Stack *L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span> (L-&gt;top == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span> ; i &lt;= L-&gt;top; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,L-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">&quot;10+(2*10+9)/5&quot;</span>;<br>    <span class="hljs-keyword">char</span> dst[MAX];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中缀表达式为:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,str);<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,value = <span class="hljs-number">0</span>,flag = <span class="hljs-number">0</span>;   <span class="hljs-comment">//数字的值</span><br>    <span class="hljs-keyword">int</span> old_ope;<br>    Stack *numstack,*opestack;<br>    numstack = Createstack();  <span class="hljs-comment">// 创建存放数字的栈</span><br>    opestack = Createstack();  <span class="hljs-comment">// 创建存放运算符的栈</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后缀表达式为:&quot;</span>);<br>    <span class="hljs-comment">//printf(&quot;栈的变化如下：\n&quot;);</span><br>    <span class="hljs-comment">/* 表达式字符串解析函数,然后将高优先级的符号/(*)进行计算重新入栈</span><br><span class="hljs-comment">       退出while大家的优先级都一样*/</span><br>    <span class="hljs-keyword">while</span> (str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            value *= <span class="hljs-number">10</span>;        <span class="hljs-comment">//数字的获取，注意可能不止一位</span><br>            value +=str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            flag = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (flag) &#123;   <span class="hljs-comment">//flag = 1说明value里面存储了数字，将其入栈</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,value);<br>                Push (numstack, value);<br>                <span class="hljs-comment">//flag标志清零，value存放数字的变量清零</span><br>                flag = <span class="hljs-number">0</span>;<br>                value = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//Display(numstack);</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                Right(numstack,opestack);<br>                <span class="hljs-comment">//Displayope(opestack);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Deal_ope(numstack,opestack,str[i]);<br>                <span class="hljs-comment">//Displayope(opestack);</span><br>            &#125;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123; <span class="hljs-comment">//如果flag = 1.说明value里面还有数值,将其入栈</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,value);<br>        Push(numstack,value);<br>        <span class="hljs-comment">//Display(numstack);</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (!Empty(opestack)) &#123;<span class="hljs-comment">//如果符号栈不为空，继续计算</span><br>        Pop(opestack,&amp;old_ope);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,old_ope);<br>        Calculation(numstack,old_ope);<br>        <span class="hljs-comment">//Displayope(opestack);</span><br>    &#125;<br>    Pop(numstack,&amp;value); <span class="hljs-comment">//最终答案</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s = %d\n&quot;</span>,str,value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>括号匹配</tag>
      
      <tag>逆波兰表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(21)王道数据结构-栈在括号匹配中的应用</title>
    <link href="/iecore/19226/"/>
    <url>/iecore/19226/</url>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>遇到左括号就入栈，遇到右括号，就“消耗”一个左括号。</p><p>扫描到右括号且栈空，右括号单身</p><p>处理完所有括号后，栈非空，左括号单身</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10      <span class="hljs-comment">//定义栈中元素最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data[MaxSize];  <span class="hljs-comment">//静态数组存放栈中元素</span><br>    <span class="hljs-keyword">int</span>  top;           <span class="hljs-comment">//栈顶指针</span><br>&#125; SqStack;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">char</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">char</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">char</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">BracketCheck</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[], <span class="hljs-keyword">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">&quot;[(())]&quot;</span>;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(str) - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//括号匹配判断</span><br>    <span class="hljs-keyword">if</span> (BracketCheck(str, length)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号匹配成功!\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">char</span> err_str[] = <span class="hljs-string">&quot;[(()))]&quot;</span>;<br>    length = <span class="hljs-keyword">sizeof</span>(err_str) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (!BracketCheck(err_str, length)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号匹配失败!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span> </span>&#123;<br>    S.top = <span class="hljs-number">-1</span>;     <span class="hljs-comment">//初始化栈顶指针</span><br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//新元素入栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">char</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == MaxSize - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//栈满报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    S.top = S.top + <span class="hljs-number">1</span>;          <span class="hljs-comment">//指针加1</span><br>    S.data[S.top] = x;          <span class="hljs-comment">//新元素入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">char</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">//栈顶元素先出栈</span><br>    S.top = S.top - <span class="hljs-number">1</span>;  <span class="hljs-comment">//指针减1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">char</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">//x记录栈顶元素</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">BracketCheck</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[], <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>    SqStack S;<br>    InitStack(S);   <span class="hljs-comment">//初始化一个栈</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;(&#x27;</span> || str[i] == <span class="hljs-string">&#x27;[&#x27;</span> || str[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>            Push(S, str[i]);    <span class="hljs-comment">//扫到左括号，入栈</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;    <span class="hljs-comment">//扫到有括号且当前栈空</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">char</span> topElem;<br>            Pop(S,topElem);     <span class="hljs-comment">//栈顶元素先出栈</span><br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; topElem != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; topElem != <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; topElem != <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> StackEmpty(S);   <span class="hljs-comment">//检索完全部括号后，栈空说明匹配成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扫描过程"><a href="#扫描过程" class="headerlink" title="扫描过程"></a>扫描过程</h3><p>依次扫描所有字符，遇到左括号入栈，遇到右括号则弹出栈顶元素检查是否匹配。</p><p><strong>匹配失败的情况：</strong></p><p>①左括号单身</p><p>②右括号单身</p><p>③左右括号不匹配</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>括号匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(20)王道数据结构-队列的链式实现</title>
    <link href="/iecore/6136/"/>
    <url>/iecore/6136/</url>
    
    <content type="html"><![CDATA[<h3 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    LinkNode *front, *rear;<br>&#125;LinkQueue;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkQueue Q;<br>    <span class="hljs-keyword">int</span> x;<br>    InitQueue(Q);<br>    <br>    EnQueue(Q, <span class="hljs-number">1</span>);<br>    EnQueue(Q, <span class="hljs-number">2</span>);<br>    EnQueue(Q, <span class="hljs-number">3</span>);<br>    EnQueue(Q, <span class="hljs-number">4</span>);<br>    EnQueue(Q, <span class="hljs-number">5</span>);<br>    EnQueue(Q, <span class="hljs-number">6</span>);<br>    EnQueue(Q, <span class="hljs-number">7</span>);<br>    <br>    <br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    <span class="hljs-keyword">if</span> (!IsEmpty(Q)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span> </span>&#123;<br>    <span class="hljs-comment">//初始时，队头和队尾指针指向头结点</span><br>    Q.front = Q.rear = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//入队(带头结点)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    LinkNode *s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    s-&gt;data = x;<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    Q.rear-&gt;next = s;   <span class="hljs-comment">//新节点插入到rear之后</span><br>    Q.rear = s;         <span class="hljs-comment">//修改表尾指针</span><br>&#125;<br><br><span class="hljs-comment">//队头元素出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) &#123;    <span class="hljs-comment">//空队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkNode *p = Q.front-&gt;next;<br>    x = p-&gt;data;                <span class="hljs-comment">//用变量x返回队头元素</span><br>    Q.front-&gt;next = p-&gt;next;    <span class="hljs-comment">//修改头结点的next指针</span><br>    <span class="hljs-keyword">if</span> (Q.rear == p) &#123;          <span class="hljs-comment">//此次是最后一个节点出队</span><br>        Q.rear = Q.front;       <span class="hljs-comment">//修改rear指针</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);                    <span class="hljs-comment">//释放节点空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不头结点"><a href="#不头结点" class="headerlink" title="不头结点"></a>不头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    LinkNode *front, *rear;<br>&#125;LinkQueue;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkQueue Q;<br>    <span class="hljs-keyword">int</span> x;<br>    InitQueue(Q);<br>    <br>    EnQueue(Q, <span class="hljs-number">1</span>);<br>    EnQueue(Q, <span class="hljs-number">2</span>);<br>    EnQueue(Q, <span class="hljs-number">3</span>);<br>    EnQueue(Q, <span class="hljs-number">4</span>);<br>    EnQueue(Q, <span class="hljs-number">5</span>);<br>    EnQueue(Q, <span class="hljs-number">6</span>);<br>    EnQueue(Q, <span class="hljs-number">7</span>);<br>    <br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    <span class="hljs-keyword">if</span> (!IsEmpty(Q)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span> </span>&#123;<br>    <span class="hljs-comment">//初始时，队头和队尾指针指向头结点</span><br>    Q.front = Q.rear = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//入队(带头结点)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    LinkNode *s = (LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    s-&gt;data = x;<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (Q.front == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//在空队列中插入第一个元素</span><br>        Q.front = s;        <span class="hljs-comment">//修改队头队尾指针</span><br>        Q.rear = s;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Q.rear-&gt;next = s;   <span class="hljs-comment">//新节点插入到rear之后</span><br>        Q.rear = s;         <span class="hljs-comment">//修改表尾指针</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//队头元素出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) &#123;    <span class="hljs-comment">//空队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkNode *p = Q.front;      <span class="hljs-comment">//p指向此次出队的节点</span><br>    x = p-&gt;data;                <span class="hljs-comment">//用变量x返回队头元素</span><br>    Q.front = p-&gt;next;          <span class="hljs-comment">//修改front指针</span><br>    <span class="hljs-keyword">if</span> (Q.rear == p) &#123;          <span class="hljs-comment">//此次是最后一个节点出队</span><br>        Q.rear = <span class="hljs-literal">NULL</span>;          <span class="hljs-comment">//rear指向NULL</span><br>        Q.front = <span class="hljs-literal">NULL</span>;         <span class="hljs-comment">//front指向NULL</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);                    <span class="hljs-comment">//释放节点空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.front == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(19)王道数据结构-队列的顺序实现</title>
    <link href="/iecore/34718/"/>
    <url>/iecore/34718/</url>
    
    <content type="html"><![CDATA[<h3 id="普通队列"><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//定义队列中元素最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//用静态数组存放队列元素</span><br>    <span class="hljs-keyword">int</span> front, rear;    <span class="hljs-comment">//队头指针和队尾指针</span><br>&#125; SqQueue;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqQueue Q;<br>    <span class="hljs-keyword">int</span> x;<br>    InitQueue(Q);<br>    <br>    EnQueue(Q, <span class="hljs-number">1</span>);<br>    EnQueue(Q, <span class="hljs-number">2</span>);<br>    EnQueue(Q, <span class="hljs-number">3</span>);<br>    EnQueue(Q, <span class="hljs-number">4</span>);<br>    EnQueue(Q, <span class="hljs-number">5</span>);<br>    EnQueue(Q, <span class="hljs-number">6</span>);<br>    <br>    GetHead(Q, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    <br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span> </span>&#123;<br>    <span class="hljs-comment">//初始时，队头和队尾指针指向0</span><br>    Q.rear=Q.front = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == MaxSize) &#123; <span class="hljs-comment">//队满不入队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    Q.data[Q.rear] = x;   <span class="hljs-comment">//将x插入队尾</span><br>    Q.rear = Q.rear + <span class="hljs-number">1</span>;  <span class="hljs-comment">//队尾指针后移</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空不出队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = Q.data[Q.front];<br>    Q.front = Q.front + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//获取队头元素</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空不出队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = Q.data[Q.front];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//定义队列中元素最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//用静态数组存放队列元素</span><br>    <span class="hljs-keyword">int</span> front, rear;    <span class="hljs-comment">//队头指针和队尾指针</span><br>&#125; SqQueue;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue Q, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqQueue Q;<br>    <span class="hljs-keyword">int</span> x;<br>    InitQueue(Q);<br>    <br>    EnQueue(Q, <span class="hljs-number">1</span>);<br>    EnQueue(Q, <span class="hljs-number">2</span>);<br>    EnQueue(Q, <span class="hljs-number">3</span>);<br>    EnQueue(Q, <span class="hljs-number">4</span>);<br>    EnQueue(Q, <span class="hljs-number">5</span>);<br>    EnQueue(Q, <span class="hljs-number">6</span>);<br>    EnQueue(Q, <span class="hljs-number">7</span>);<br>    EnQueue(Q, <span class="hljs-number">8</span>);<br>    EnQueue(Q, <span class="hljs-number">9</span>);<br>    EnQueue(Q, <span class="hljs-number">10</span>);<br>    EnQueue(Q, <span class="hljs-number">11</span>);<br>    EnQueue(Q, <span class="hljs-number">12</span>);<br>    <br>    GetHead(Q, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    <br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    DeQueue(Q, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span> </span>&#123;<br>    <span class="hljs-comment">//初始时，队头和队尾指针指向0</span><br>    Q.rear=Q.front = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == MaxSize) &#123; <span class="hljs-comment">//队满不入队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    Q.data[Q.rear] = x;   <span class="hljs-comment">//将x插入队尾</span><br>    Q.rear = (Q.rear + <span class="hljs-number">1</span>) % MaxSize;  <span class="hljs-comment">//队尾指针后移</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空不出队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = Q.data[Q.front];<br>    Q.front = (Q.front + <span class="hljs-number">1</span>) % MaxSize;<br>&#125;<br><br><span class="hljs-comment">//获取队头元素</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue Q, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Q.rear == Q.front) &#123;    <span class="hljs-comment">//队空不出队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = Q.data[Q.front];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(18)王道数据结构-队列的定义</title>
    <link href="/iecore/33526/"/>
    <url>/iecore/33526/</url>
    
    <content type="html"><![CDATA[<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>只允许在一端进行插入，在另一端删除的线性表，先进入队列的元素先出队</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>队头：</strong>允许删除的一端<br><strong>队尾：</strong>允许插入的一端</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><strong>InitQueue(&amp;Q):</strong> 初始化队列，构造一个空队列Q<br><strong>DestroyQueue(&amp;Q):</strong> 销毁队列，销毁并释放队列Q所占用的内存空间<br><strong>EnQueue(&amp;Q, x):</strong> 入队，若队列Q未满，将x加入，使之成为新的队尾<br><strong>DeQueue(&amp;Q, &amp;x):</strong> 出队，若队列Q非空，删除队头元素，并用x返回<br><strong>GetHead(Q, &amp;x):</strong> 读队头元素，若队列Q非空，则将队头元素赋给x</p><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><p><strong>QueueEmpty(Q):</strong> 判断列空，若队列Q为空返回true，否则返回false</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(17)王道数据结构-栈的链式存储实现</title>
    <link href="/iecore/18714/"/>
    <url>/iecore/18714/</url>
    
    <content type="html"><![CDATA[<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Linknode</span> &#123;</span><br>    ElemenType data;        <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Linknode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//指针域</span><br>&#125; * LiStack;                <span class="hljs-comment">//栈类型定义</span><br></code></pre></td></tr></table></figure><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br><span class="hljs-keyword">int</span> value;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>Node *top;<br><span class="hljs-keyword">int</span> count;<br>&#125; Stack;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">init</span><span class="hljs-params">(Stack *s)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">push</span><span class="hljs-params">(Stack *s, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(Stack *s, <span class="hljs-keyword">int</span> *e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> i, e;<br>Stack s;<br>init(&amp;s);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>push(&amp;s, i);<br>pop(&amp;s, &amp;e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">init</span><span class="hljs-params">(Stack *s)</span> </span>&#123;<br>s-&gt;top = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//初始化为空栈</span><br>s-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">push</span><span class="hljs-params">(Stack *s, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == newNode)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>newNode-&gt;next = s-&gt;top;<br>newNode-&gt;value = e;<br>s-&gt;top = newNode;<br>s-&gt;count ++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(Stack *s, <span class="hljs-keyword">int</span> *e)</span> </span>&#123;<br>Node *temp = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == s-&gt;count) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>temp = s-&gt;top;<br>*e = temp-&gt;value;<br>s-&gt;top = temp-&gt;next;<br><span class="hljs-built_in">free</span>(temp);<br>s-&gt;count --;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>链式存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(16)王道数据结构-栈的顺序存储实现</title>
    <link href="/iecore/45882/"/>
    <url>/iecore/45882/</url>
    
    <content type="html"><![CDATA[<h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10      <span class="hljs-comment">//定义栈中元素最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//静态数组存放栈中元素</span><br>    <span class="hljs-keyword">int</span>  top;           <span class="hljs-comment">//栈顶指针</span><br>&#125; SqStack;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqStack S;<br>    <span class="hljs-keyword">int</span> x, top;<br>    InitStack(S);<br>    Push(S, <span class="hljs-number">1</span>);<br>    Push(S, <span class="hljs-number">2</span>);<br>    Push(S, <span class="hljs-number">3</span>);<br>    Push(S, <span class="hljs-number">4</span>);<br>    Push(S, <span class="hljs-number">5</span>);<br>    Push(S, <span class="hljs-number">6</span>);<br>    Push(S, <span class="hljs-number">7</span>);<br>    Pop(S,x);<br>    Pop(S,x);<br>    Pop(S,x);<br>    Pop(S,x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    top = GetTop(S, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;top = %d\n&quot;</span>, top);<br>    <span class="hljs-keyword">if</span> (!StackEmpty(S)) &#123;<br>        Push(S, <span class="hljs-number">8</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span> </span>&#123;<br>    S.top = <span class="hljs-number">-1</span>;     <span class="hljs-comment">//初始化栈顶指针</span><br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//新元素入栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == MaxSize - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//栈满报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    S.top = S.top + <span class="hljs-number">1</span>;          <span class="hljs-comment">//指针加1</span><br>    S.data[S.top] = x;          <span class="hljs-comment">//新元素入栈</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">//栈顶元素先出栈</span><br>    S.top = S.top - <span class="hljs-number">1</span>;  <span class="hljs-comment">//指针减1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">//x记录栈顶元素</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10      <span class="hljs-comment">//定义栈中元素最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//静态数组存放栈中元素</span><br>    <span class="hljs-keyword">int</span>  top;           <span class="hljs-comment">//栈顶指针</span><br>&#125; SqStack;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">int</span> &amp;x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqStack S;<br>    <span class="hljs-keyword">int</span> x, top;<br>    InitStack(S);<br>    Push(S, <span class="hljs-number">1</span>);<br>    Push(S, <span class="hljs-number">2</span>);<br>    Push(S, <span class="hljs-number">3</span>);<br>    Push(S, <span class="hljs-number">4</span>);<br>    Push(S, <span class="hljs-number">5</span>);<br>    Push(S, <span class="hljs-number">6</span>);<br>    Push(S, <span class="hljs-number">7</span>);<br>    Pop(S,x);<br>    Pop(S,x);<br>    Pop(S,x);<br>    Pop(S,x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    top = GetTop(S, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;top = %d\n&quot;</span>, top);<br>    <span class="hljs-keyword">if</span> (!StackEmpty(S)) &#123;<br>        Push(S, <span class="hljs-number">8</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span> </span>&#123;<br>    S.top = <span class="hljs-number">-1</span>;     <span class="hljs-comment">//初始化栈顶指针</span><br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//新元素入栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == MaxSize - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//栈满报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    S.data[S.top++] = x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[--S.top];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//栈空，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    x = S.data[S.top];  <span class="hljs-comment">//x记录栈顶元素</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><p>两个栈共享同一片空间，栈满的条件是top0+1 = top1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//定义栈中元素的最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//静态数组中存放栈中元素</span><br>    <span class="hljs-keyword">int</span> top0;           <span class="hljs-comment">//0号栈栈顶指针</span><br>    <span class="hljs-keyword">int</span> top1;           <span class="hljs-comment">//1号栈栈顶指针</span><br>&#125; ShStack;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    ShStack S;<br>    InitStack(S);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(ShStack &amp;S)</span> </span>&#123;<br>    S.top0 = <span class="hljs-number">-1</span>;    <span class="hljs-comment">//初始化栈顶指针</span><br>    S.top1 = MaxSize;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(15)王道数据结构-栈的基本概念</title>
    <link href="/iecore/16857/"/>
    <url>/iecore/16857/</url>
    
    <content type="html"><![CDATA[<h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>栈是只允许在一端进行插入或删除操作的线性表</p><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><p><strong>栈顶：</strong>允许插入和删除的一端<br><strong>栈底：</strong>不允许插入和删除的一端</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><strong>逻辑结构：</strong>与普通线性表相同<br><strong>数据运算：</strong>插入、删除操作有区别</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>InitStack(&amp;S):</strong> 初始化栈。构造一个空栈S，分配内存空间****<br><strong>DestoryStack(&amp;S):</strong> 销毁栈。销毁并释放栈S所占用<strong>的内存空间</strong><br><strong>Push(&amp;S, x):</strong> 进栈，若栈S未满，则将x加入使之成为新栈顶<br><strong>Pop(&amp;S, &amp;x):</strong> 出栈，若栈S未空，则弹出栈顶元素，并用x返回<br><strong>GetTop(S, &amp;x):</strong> 读取栈顶元素。若栈S非空，则用x返回栈顶元素</p><h4 id="其他操作："><a href="#其他操作：" class="headerlink" title="其他操作："></a>其他操作：</h4><p><strong>StackEmpty(S):</strong> 判断一个栈是否为空。若S为空，则返回true，否则返回false</p><h3 id="常考题型"><a href="#常考题型" class="headerlink" title="常考题型"></a>常考题型</h3><p>进栈顺序：a-&gt;b-&gt;c-&gt;d-&gt;e，有哪些合法的出栈顺序</p><h4 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h4><p>n个不同元素出栈，出栈不同排列的个数为<br>$$<br>\frac{1}{n+1}·C_{2n}^{n}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(14)王道数据结构-顺序表和链表比较</title>
    <link href="/iecore/47036/"/>
    <url>/iecore/47036/</url>
    
    <content type="html"><![CDATA[<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>都属于线性表，都是线性结构</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p><strong>相同点：</strong><br>都属于线性表，都是线性结构</p><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>支持随机存取、存储密度高</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>大片连续空间分配不方便，改变容量不方便</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><p>离散的小空间分配方便，改变容量方便</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>不可随机存取，存储密度低</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><h5 id="顺序表-1"><a href="#顺序表-1" class="headerlink" title="顺序表"></a>顺序表</h5><p>需要预先分配大片连续空间，分配空间过小不好扩展，过大浪费空间。容量不可改变</p><h5 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h5><p>只需要分配一个头结点（或头指针）之后方便扩展。容量可以改变，但需要移动大量元素，时间代价高</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><h5 id="顺序表-2"><a href="#顺序表-2" class="headerlink" title="顺序表"></a>顺序表</h5><p>修改lengh=0，使用静态数组系统自动回收空间。</p><h5 id="链表-2"><a href="#链表-2" class="headerlink" title="链表"></a>链表</h5><p>依次删除各个节点（free）使用的是动态数组。需要特别注意的是malloc和free必须成对出现，使用的是stdllib包</p><h4 id="增删"><a href="#增删" class="headerlink" title="增删"></a>增删</h4><h5 id="顺序表-3"><a href="#顺序表-3" class="headerlink" title="顺序表"></a>顺序表</h5><p>插入/删除元素要将后续元素都后移/前移，时间复杂度O(n),时间开销主要来自移动元素。如果数据元素很大，则移动的时间代价很高</p><h5 id="链表-3"><a href="#链表-3" class="headerlink" title="链表"></a>链表</h5><p>插入/删除元素只需要修改指针即可，时间复杂度O(n)，时间开销主要来自查找目标元素。查找元素的时间代价更低</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h5 id="顺序表-4"><a href="#顺序表-4" class="headerlink" title="顺序表"></a>顺序表</h5><p><strong>按位查找：</strong>O(1)<br><strong>按值查找：</strong>O(n)，若表内元素有序，可在O(log2n)时间内找到</p><h5 id="链表-4"><a href="#链表-4" class="headerlink" title="链表"></a>链表</h5><p><strong>按位查找：</strong>O(n)<br><strong>按值查找：</strong>O(n)</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>表长难以预估、经常需要增加/删除元素选择链表<br>表长可以预估、查询（搜索）操作较多选择顺序表</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>顺序表</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(13)王道数据结构-静态链表</title>
    <link href="/iecore/25638/"/>
    <url>/iecore/25638/</url>
    
    <content type="html"><![CDATA[<h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>分配一整片连续的内存空间，各个节点集中安置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10      <span class="hljs-comment">//静态链表的最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>        <span class="hljs-comment">//静态链表结构的定义</span><br>    <span class="hljs-keyword">int</span> data;           <span class="hljs-comment">//存储数据元素</span><br>    <span class="hljs-keyword">int</span> next;           <span class="hljs-comment">//下一个元素的数组下标</span><br>&#125;SLinkList[MaxSize];<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong><br><strong>查找：</strong>从头结点除法挨个往后遍历节点<br><strong>插入位序为i的节点：</strong><br>①找到一个空的节点，存入数据元素<br>②从头结点出发找到位序为i-1的节点<br>③修改新节点的next<br>④修改i-1号节点的next<br><strong>删除某个节点：</strong><br>①从头结点出发找到前驱节点<br>②修改前驱节点的游标<br>③被删除节点的next设为-2</p><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxSize 7</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data;<br>    <span class="hljs-keyword">int</span> cur;<br>&#125;component;<br><span class="hljs-comment">//将结构体数组中所有分量链接到备用链表中</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reserveArr</span><span class="hljs-params">(component *<span class="hljs-built_in">array</span>)</span></span>;<br><span class="hljs-comment">//初始化静态链表</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initArr</span><span class="hljs-params">(component *<span class="hljs-built_in">array</span>)</span></span>;<br><span class="hljs-comment">//向链表中插入数据，body表示链表的头结点在数组中的位置，add表示插入元素的位置，a表示要插入的数据</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">int</span> add,<span class="hljs-keyword">char</span> a)</span></span>;<br><span class="hljs-comment">//删除链表中含有字符a的结点</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deletArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> a)</span></span>;<br><span class="hljs-comment">//查找存储有字符elem的结点在数组的位置</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectElem</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> elem)</span></span>;<br><span class="hljs-comment">//将链表中的字符oldElem改为newElem</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">amendElem</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> oldElem,<span class="hljs-keyword">char</span> newElem)</span></span>;<br><span class="hljs-comment">//输出函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body)</span></span>;<br><span class="hljs-comment">//自己需要实现的malloc和free函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mallocArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freeArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> k)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    component <span class="hljs-built_in">array</span>[maxSize];<br>    <span class="hljs-keyword">int</span> body=initArr(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;静态链表为：\n&quot;</span>);<br>    displayArr(<span class="hljs-built_in">array</span>, body);<br>   <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在第3的位置上插入结点‘e’:\n&quot;</span>);<br>    insertArr(<span class="hljs-built_in">array</span>, body, <span class="hljs-number">3</span>,<span class="hljs-string">&#x27;e&#x27;</span>);<br>    displayArr(<span class="hljs-built_in">array</span>, body);<br>   <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除数据域为‘a’的结点:\n&quot;</span>);<br>    deletArr(<span class="hljs-built_in">array</span>, body, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    displayArr(<span class="hljs-built_in">array</span>, body);<br>   <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找数据域为‘e’的结点的位置:\n&quot;</span>);<br>    <span class="hljs-keyword">int</span> selectAdd=selectElem(<span class="hljs-built_in">array</span>,body ,<span class="hljs-string">&#x27;e&#x27;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,selectAdd);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将结点数据域为‘e’改为‘h’:\n&quot;</span>);<br>    amendElem(<span class="hljs-built_in">array</span>, body, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>);<br>    displayArr(<span class="hljs-built_in">array</span>, body);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//创建备用链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reserveArr</span><span class="hljs-params">(component *<span class="hljs-built_in">array</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;maxSize; i++) &#123;<br>        <span class="hljs-built_in">array</span>[i].cur=i+<span class="hljs-number">1</span>;<span class="hljs-comment">//将每个数组分量链接到一起</span><br>    &#125;<br>    <span class="hljs-built_in">array</span>[maxSize<span class="hljs-number">-1</span>].cur=<span class="hljs-number">0</span>;<span class="hljs-comment">//链表最后一个结点的游标值为0</span><br>&#125;<br><span class="hljs-comment">//提取分配空间</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mallocArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>)</span></span>&#123;<br>    <span class="hljs-comment">//若备用链表非空，则返回分配的结点下标，否则返回0（当分配最后一个结点时，该结点的游标值为0）</span><br>    <span class="hljs-keyword">int</span> i=<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].cur;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].cur) &#123;<br>        <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].cur=<span class="hljs-built_in">array</span>[i].cur;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-comment">//初始化静态链表</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initArr</span><span class="hljs-params">(component *<span class="hljs-built_in">array</span>)</span></span>&#123;<br>    reserveArr(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-keyword">int</span> body=mallocArr(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-comment">//声明一个变量，把它当指针使，指向链表的最后的一个结点，因为链表为空，所以和头结点重合</span><br>    <span class="hljs-keyword">int</span> tempBody=body;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">int</span> j=mallocArr(<span class="hljs-built_in">array</span>);<span class="hljs-comment">//从备用链表中拿出空闲的分量</span><br>        <span class="hljs-built_in">array</span>[tempBody].cur=j;<span class="hljs-comment">//将申请的空线分量链接在链表的最后一个结点后面</span><br>        <span class="hljs-built_in">array</span>[j].data=<span class="hljs-string">&#x27;a&#x27;</span>+i<span class="hljs-number">-1</span>;<span class="hljs-comment">//给新申请的分量的数据域初始化</span><br>        tempBody=j;<span class="hljs-comment">//将指向链表最后一个结点的指针后移</span><br>    &#125;<br>    <span class="hljs-built_in">array</span>[tempBody].cur=<span class="hljs-number">0</span>;<span class="hljs-comment">//新的链表最后一个结点的指针设置为0</span><br>    <span class="hljs-keyword">return</span> body;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">int</span> add,<span class="hljs-keyword">char</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tempBody=body;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;add; i++) &#123;<br>        tempBody=<span class="hljs-built_in">array</span>[tempBody].cur;<br>    &#125;<br>    <span class="hljs-keyword">int</span> insert=mallocArr(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">array</span>[insert].cur=<span class="hljs-built_in">array</span>[tempBody].cur;<br>    <span class="hljs-built_in">array</span>[insert].data=a;<br>    <span class="hljs-built_in">array</span>[tempBody].cur=insert;<br>   <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deletArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tempBody=body;<br>    <span class="hljs-comment">//找到被删除结点的位置</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[tempBody].data!=a) &#123;<br>        tempBody=<span class="hljs-built_in">array</span>[tempBody].cur;<br>        <span class="hljs-comment">//当tempBody为0时，表示链表遍历结束，说明链表中没有存储该数据的结点</span><br>        <span class="hljs-keyword">if</span> (tempBody==<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表中没有此数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//运行到此，证明有该结点</span><br>    <span class="hljs-keyword">int</span> del=tempBody;<br>    tempBody=body;<br>    <span class="hljs-comment">//找到该结点的上一个结点，做删除操作</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[tempBody].cur!=del) &#123;<br>        tempBody=<span class="hljs-built_in">array</span>[tempBody].cur;<br>    &#125;<br>    <span class="hljs-comment">//将被删除结点的游标直接给被删除结点的上一个结点</span><br>    <span class="hljs-built_in">array</span>[tempBody].cur=<span class="hljs-built_in">array</span>[del].cur;<br>   <br>    freeArr(<span class="hljs-built_in">array</span>, del);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectElem</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> elem)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tempBody=body;<br>    <span class="hljs-comment">//当游标值为0时，表示链表结束</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[tempBody].cur!=<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[tempBody].data==elem) &#123;<br>            <span class="hljs-keyword">return</span> tempBody;<br>        &#125;<br>        tempBody=<span class="hljs-built_in">array</span>[tempBody].cur;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//返回-1，表示在链表中没有找到该元素</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">amendElem</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body,<span class="hljs-keyword">char</span> oldElem,<span class="hljs-keyword">char</span> newElem)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> add=selectElem(<span class="hljs-built_in">array</span>, body, oldElem);<br>    <span class="hljs-keyword">if</span> (add==<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无更改元素&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">array</span>[add].data=newElem;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> body)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tempBody=body;<span class="hljs-comment">//tempBody准备做遍历使用</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">array</span>[tempBody].cur) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c,%d &quot;</span>,<span class="hljs-built_in">array</span>[tempBody].data,<span class="hljs-built_in">array</span>[tempBody].cur);<br>        tempBody=<span class="hljs-built_in">array</span>[tempBody].cur;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c,%d\n&quot;</span>,<span class="hljs-built_in">array</span>[tempBody].data,<span class="hljs-built_in">array</span>[tempBody].cur);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freeArr</span><span class="hljs-params">(component * <span class="hljs-built_in">array</span>,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-built_in">array</span>[k].cur=<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].cur;<br>    <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].cur=k;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>静态链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(12)王道数据结构-循环链表</title>
    <link href="/iecore/56909/"/>
    <url>/iecore/56909/</url>
    
    <content type="html"><![CDATA[<h3 id="循环链表基本操作"><a href="#循环链表基本操作" class="headerlink" title="循环链表基本操作"></a>循环链表基本操作</h3><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>  <span class="hljs-comment">//定义单链表节点类型</span><br>    <span class="hljs-keyword">int</span> data;           <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个节点</span><br>&#125; LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(LinkList L, LNode *p)</span></span>;<br><span class="hljs-function">LinkList <span class="hljs-title">CreatList</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">LinkList <span class="hljs-title">LListInsert</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i; <br>    LinkList <span class="hljs-built_in">list</span>, start; <br>    InitList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入循环单链表的数据, 以0结束！\n&quot;</span>);  <br>    <span class="hljs-built_in">list</span> = CreatList(); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;循环单链表的元素有：\n&quot;</span>); <br>    <span class="hljs-keyword">for</span>(start = <span class="hljs-built_in">list</span>-&gt;next; start != <span class="hljs-literal">NULL</span>; start = start-&gt;next) &#123; <br>      <span class="hljs-keyword">if</span>(count== <span class="hljs-number">0</span>) &#123; <br>          <span class="hljs-keyword">break</span>; <br>      &#125; <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, start-&gt;data); <br>      count--; <br>    &#125; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化一个循环链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode)); <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = L;        <span class="hljs-comment">//头结点next指向头结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断循环单链表表尾节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(LinkList L, LNode *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == L) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//判断循环单链表是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == L) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//循环单链表的建立 </span><br><span class="hljs-function">LinkList <span class="hljs-title">CreatList</span><span class="hljs-params">()</span> </span>&#123; <br>  LNode *L; <br>  L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <br>  L-&gt;next = L;            <br>  LNode *r; <br>  r = L;                 <br>  <span class="hljs-keyword">int</span> x;              <br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)) &#123; <br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <br>    &#125;<br>    count++; <br>    LNode *p; <br>    p = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <br>    p-&gt;data = x;             <br>    r-&gt;next = p;             <br>    r = p; <br>  &#125; <br>  r-&gt;next = L;  <br>  <span class="hljs-keyword">return</span> L;   <br>&#125; <br><br><span class="hljs-comment">//循环单链表的插入，在循环链表的第i个位置插入x的元素 </span><br><span class="hljs-function">LinkList <span class="hljs-title">LListInsert</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x)</span> </span>&#123; <br>  LNode *pre;                     <br>  pre = L; <br>  <span class="hljs-keyword">int</span> tempi = <span class="hljs-number">0</span>; <br>  <span class="hljs-keyword">for</span> (tempi = <span class="hljs-number">1</span>; tempi &lt; i; tempi++) &#123;<br>      pre = pre-&gt;next; <br>  &#125;<br>  LNode *p;                      <br>  p = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));  <br>  p-&gt;data = x;  <br>  p-&gt;next = pre-&gt;next; <br>  pre-&gt;next = p; <br>  <span class="hljs-keyword">return</span> L;               <br>&#125;  <br> <br><span class="hljs-comment">//循环单链表的删除，在循环链表中删除值为x的元素 </span><br><span class="hljs-function">LinkList <span class="hljs-title">DelData</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> x)</span> </span>&#123; <br>  LNode *p,*pre;                  <br>  p = L-&gt;next; <br>  <span class="hljs-keyword">while</span>(p-&gt;data != x) &#123;   <br>    pre = p;  <br>    p = p-&gt;next; <br>  &#125; <br>  pre-&gt;next = p-&gt;next;               <br>  <span class="hljs-built_in">free</span>(p); <br>  <span class="hljs-keyword">return</span> L; <br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>  <span class="hljs-comment">//定义单链表节点类型</span><br>    <span class="hljs-keyword">int</span> data;           <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span> *<span class="hljs-title">prior</span>, *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;DNode, *DLinklist;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinklist &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(DLinklist L, DNode *p)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的循环双链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinklist &amp;L)</span> </span>&#123;<br>    L = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));     <span class="hljs-comment">//分配一个节点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;prior = L;       <span class="hljs-comment">//头结点的prior指向头结点</span><br>    L-&gt;next = L;        <span class="hljs-comment">//头结点的next指向头结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断节点p是否为循环双链表的尾节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(DLinklist L, DNode *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == L) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在p节点之后插入s节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode *p, DNode *s)</span> </span>&#123;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next-&gt;prior = s;<br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>循环链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(11)王道数据结构-双链表的基本操作</title>
    <link href="/iecore/17022/"/>
    <url>/iecore/17022/</url>
    
    <content type="html"><![CDATA[<h3 id="双链表基本操作"><a href="#双链表基本操作" class="headerlink" title="双链表基本操作"></a>双链表基本操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span> &#123;</span>              <span class="hljs-comment">//定义双链表节点类型</span><br>    <span class="hljs-keyword">int</span> data;                       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span> *<span class="hljs-title">prior</span>, *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//前驱和后继指针</span><br>&#125;DNode, *DLinkList;<br><br><span class="hljs-function">DNode* <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode *p, DNode *s)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DListInsert</span><span class="hljs-params">(DNode *head, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function">DNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(DNode *head, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode *p)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestoryList</span><span class="hljs-params">(DLinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowList</span><span class="hljs-params">(DNode *head)</span></span>;<br><span class="hljs-function">DNode * <span class="hljs-title">DelData</span><span class="hljs-params">(DNode * head, <span class="hljs-keyword">int</span> data)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-comment">//创建头结点</span><br>    DNode *head = <span class="hljs-literal">NULL</span>;<br>    DLinkList List;<br>    <span class="hljs-comment">//初始化链表</span><br>    head = InitDLinkList(List);<br><br>    DListInsert(head, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    DListInsert(head, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    DListInsert(head, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    DListInsert(head, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    DListInsert(head, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    DListInsert(head, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    DListInsert(head, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    DListInsert(head, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-comment">//获取元素，判断是否插入成功</span><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">-1</span>;<br>    num = GetElem(head, <span class="hljs-number">8</span>)-&gt;data;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最后一个元素是%d\n&quot;</span>, num);<br><br>    ShowList(head);<br><br>    <span class="hljs-comment">//DestoryList(List);</span><br><br>    DelData(head, <span class="hljs-number">66</span>);<br><br>    ShowList(head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化双链表</span><br><span class="hljs-function">DNode* <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinkList &amp;head)</span> </span>&#123;<br>    head = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));    <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    head-&gt;prior = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//头结点prior永远指向NULL</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> head;           <span class="hljs-comment">//返回头结点</span><br>&#125;<br><br><span class="hljs-comment">//在p节点之后插入s节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode *p, DNode *s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span> || s==<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;next-&gt;prior = s;<br>    &#125;<br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//链表中插入数据</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DListInsert</span><span class="hljs-params">(DNode *head, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-comment">//声明一个指向首元节点的指针，方便后期向链表中添加新创建的节点</span><br>    DNode * <span class="hljs-built_in">list</span> = head;<br>    DNode * body = (DNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));<br>    <span class="hljs-comment">//创建新的节点并初始化</span><br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//头结点赋值</span><br>        head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>        head-&gt;data = e;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> ( j &lt; i ) &#123;<br>            j++;<br>            <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>        &#125;<br>       body-&gt;prior = <span class="hljs-literal">NULL</span>;<br>       body-&gt;next = <span class="hljs-literal">NULL</span>;<br>       body-&gt;data = e;<br>       <span class="hljs-comment">//新节点与链表最后一个节点建立关系</span><br>       InsertNextDNode(<span class="hljs-built_in">list</span>,body);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//p后插入新元素e</span><br>&#125; <br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">DNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(DNode *head, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    DNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = head;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//删除p结点的后继节点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    DNode *q = p-&gt;next;     <span class="hljs-comment">//找到p的后继节点q</span><br>    <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">NULL</span>) &#123;        <span class="hljs-comment">//p没有后继节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-keyword">if</span> (q-&gt;next != <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//q节点不是最后一个节点</span><br>        q-&gt;next-&gt;prior = p;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//清空双链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestoryList</span><span class="hljs-params">(DLinkList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//循环释放各个数据节点</span><br>    <span class="hljs-keyword">while</span> (L-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        DestoryList(L);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(L);    <span class="hljs-comment">//释放头结点</span><br>    L = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//头指针指向NULL</span><br>&#125;<br><br><span class="hljs-comment">//双链表的遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowList</span><span class="hljs-params">(DNode *head)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后向遍历:\n&quot;</span>);<br>    DNode * temp = head;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">/*如果该节点无后继节点，说明此节点是链表的最后一个节点*/</span><br>        <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,temp-&gt;data);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-&gt;&quot;</span>,temp-&gt;data);<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        后向遍历：</span><br><span class="hljs-comment">        while (p != NULL) &#123;</span><br><span class="hljs-comment">            p = p-&gt;next;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        前向遍历：</span><br><span class="hljs-comment">        while (p != NULL) &#123;</span><br><span class="hljs-comment">            p = p-&gt;prior;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        前向遍历（忽略头结点）：</span><br><span class="hljs-comment">        while (p != NULL) &#123;</span><br><span class="hljs-comment">            p = p-&gt;prior;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-comment">//删除结点的函数，data为要删除结点的数据域的值</span><br><span class="hljs-function">DNode * <span class="hljs-title">DelData</span><span class="hljs-params">(DNode * head, <span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    DNode * temp = head;<br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//判断当前结点中数据域和data是否相等，若相等，摘除该结点</span><br>        <span class="hljs-keyword">if</span> (temp-&gt;data == data) &#123;<br>            temp-&gt;prior-&gt;next = temp-&gt;next;<br>            temp-&gt;next-&gt;prior = temp-&gt;prior;<br>            <span class="hljs-built_in">free</span>(temp);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表中无该数据元素&quot;</span>);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>双向链表不可随机读取，按位查找、按值查找都只能用遍历的方式实现。时间复杂度为O(n)</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>双链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(10)王道数据结构-建立链表</title>
    <link href="/iecore/25122/"/>
    <url>/iecore/25122/</url>
    
    <content type="html"><![CDATA[<h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function">LinkList <span class="hljs-title">ListTailInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    L = ListTailInsert(L);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-comment">//获取第3个节点的值</span><br>        <span class="hljs-keyword">int</span> num = GetElem(L,<span class="hljs-number">3</span>)-&gt;data;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第3个节点的值为:%d\n&quot;</span>, num);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length(L));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//尾插法建立单链表(正向建立单链表)</span><br><span class="hljs-function">LinkList <span class="hljs-title">ListTailInsert</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;      <br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));    <span class="hljs-comment">//建立头结点</span><br>    LNode *s, *r = L;       <span class="hljs-comment">//r为表尾指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>) &#123;    <span class="hljs-comment">//输入9999结束</span><br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        r-&gt;next = s;<br>        r = s;      <span class="hljs-comment">//r指向新的表尾节点</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//尾节点指针置空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">//求表长度 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">//统计表长</span><br>    LNode *p = L;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function">LinkList <span class="hljs-title">ListHeadInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    L = ListHeadInsert(L);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-comment">//获取第3个节点的值</span><br>        <span class="hljs-keyword">int</span> num = GetElem(L,<span class="hljs-number">3</span>)-&gt;data;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第3个节点的值为:%d\n&quot;</span>, num);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length(L));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//头插法建立单链表(逆向建立单链表)</span><br><span class="hljs-function">LinkList <span class="hljs-title">ListHeadInsert</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    LNode *s;<br>    <span class="hljs-keyword">int</span> x;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));    <span class="hljs-comment">//创立头结点</span><br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//初始为空链表</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);    <span class="hljs-comment">//输入节点的值</span><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">9999</span>) &#123; <span class="hljs-comment">//输入9999结束</span><br>        s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">//求表长度 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">//统计表长</span><br>    LNode *p = L;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单链表</tag>
      
      <tag>头插法</tag>
      
      <tag>尾插法</tag>
      
      <tag>链表建立</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(09)王道数据结构-单链表的查找</title>
    <link href="/iecore/28391/"/>
    <url>/iecore/28391/</url>
    
    <content type="html"><![CDATA[<h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> e = <span class="hljs-number">0</span>;<br>    ListDelete(L, <span class="hljs-number">8</span>, e);<br><br>    <span class="hljs-comment">//判断是否删除成功</span><br>    LNode* node = <span class="hljs-literal">NULL</span>;<br>    node = GetElem(L, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br>    &#125;<br>    node = GetElem(L, <span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取元素:%d\n&quot;</span>, node-&gt;data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//将节点s连接到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//插入成功</span><br>&#125;<br><br><span class="hljs-comment">//按位序删除：带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;       <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;      <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;          <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;   <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//第i-1个节点之后已无其他节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q = p-&gt;next;     <span class="hljs-comment">//令p指向被删除节点</span><br>    e = q-&gt;data;            <span class="hljs-comment">//用e返回元素的值</span><br>    p-&gt;next = q-&gt;next;      <span class="hljs-comment">//将*q节点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>封装之后</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> e = <span class="hljs-number">0</span>;<br>    ListDelete(L, <span class="hljs-number">8</span>, e);<br><br>    <span class="hljs-comment">//判断是否删除成功</span><br>    LNode* node = <span class="hljs-literal">NULL</span>;<br>    node = GetElem(L, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br>    &#125;<br>    node = GetElem(L, <span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取元素:%d\n&quot;</span>, node-&gt;data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);     <span class="hljs-comment">//找到第i-1个节点</span><br>    <span class="hljs-keyword">return</span> InsertNextNode(p, e);    <span class="hljs-comment">//p后插入新元素e</span><br>&#125;<br><br><span class="hljs-comment">//按位序删除：带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);     <span class="hljs-comment">//找到第i-1个节点</span><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//第i-1个节点之后已无其他节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q = p-&gt;next;     <span class="hljs-comment">//令p指向被删除节点</span><br>    e = q-&gt;data;            <span class="hljs-comment">//用e返回元素的值</span><br>    p-&gt;next = q-&gt;next;      <span class="hljs-comment">//将*q节点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//后插操作：在p节点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data = e;    <span class="hljs-comment">//用节点s保存数据元素e</span><br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">LocalElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> e = <span class="hljs-number">0</span>;<br>    ListDelete(L, <span class="hljs-number">8</span>, e);<br><br>    <span class="hljs-comment">//判断是否删除成功</span><br>    LNode* node = <span class="hljs-literal">NULL</span>;<br>    node = LocalElem(L, <span class="hljs-number">88</span>);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br>    &#125;<br>    node = LocalElem(L, <span class="hljs-number">66</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取元素位序:%d\n&quot;</span>, node-&gt;data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);     <span class="hljs-comment">//找到第i-1个节点</span><br>    <span class="hljs-keyword">return</span> InsertNextNode(p, e);    <span class="hljs-comment">//p后插入新元素e</span><br>&#125;<br><br><span class="hljs-comment">//按位序删除：带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);     <span class="hljs-comment">//找到第i-1个节点</span><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//第i-1个节点之后已无其他节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q = p-&gt;next;     <span class="hljs-comment">//令p指向被删除节点</span><br>    e = q-&gt;data;            <span class="hljs-comment">//用e返回元素的值</span><br>    p-&gt;next = q-&gt;next;      <span class="hljs-comment">//将*q节点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//按值查找，找到数据域==e的节点</span><br><span class="hljs-function">LNode* <span class="hljs-title">LocalElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    LNode *p = L-&gt;next;<br>    <span class="hljs-comment">//从第一个节点开始查找数据域为e的节点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//后插操作：在p节点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data = e;    <span class="hljs-comment">//用节点s保存数据元素e</span><br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求表长度"><a href="#求表长度" class="headerlink" title="求表长度"></a>求表长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为:%d\n&quot;</span>,length(L));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p = GetElem(L, i<span class="hljs-number">-1</span>);     <span class="hljs-comment">//找到第i-1个节点</span><br>    <span class="hljs-keyword">return</span> InsertNextNode(p, e);    <span class="hljs-comment">//p后插入新元素e</span><br>&#125;<br><br><span class="hljs-comment">//按位查找，返回第i个元素（带头结点）</span><br><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i) &#123;    <span class="hljs-comment">//循环找到第i个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//后插操作：在p节点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data = e;    <span class="hljs-comment">//用节点s保存数据元素e</span><br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//求表长度 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">//统计表长</span><br>    LNode *p = L;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单链表</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(08)王道数据结构-单链表插入和删除</title>
    <link href="/iecore/26837/"/>
    <url>/iecore/26837/</url>
    
    <content type="html"><![CDATA[<h3 id="按位序插入"><a href="#按位序插入" class="headerlink" title="按位序插入"></a>按位序插入</h3><h4 id="带头节点"><a href="#带头节点" class="headerlink" title="带头节点"></a>带头节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//将节点s连接到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//插入成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="不带头结点"><a href="#不带头结点" class="headerlink" title="不带头结点"></a>不带头结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//空表，暂时没有任何节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (L==<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;   <span class="hljs-comment">//插入第1个节点的操作与其他节点操作不同</span><br>        LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = e;<br>        s-&gt;next = L;<br>        L = s;      <span class="hljs-comment">//头指针指向新的节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//p指向第1个节点（非头节点）</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i <span class="hljs-number">-1</span> ) &#123;    <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//将节点s连接到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//插入成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后插操作"><a href="#后插操作" class="headerlink" title="后插操作"></a>后插操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> InsertNextNode(p,e);<br>&#125;<br><span class="hljs-comment">//后插操作：在p节点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data = e;    <span class="hljs-comment">//用节点s保存数据元素e</span><br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前插操作"><a href="#前插操作" class="headerlink" title="前插操作"></a>前插操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//前插操作：在p节点之前插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertPriorNode</span><span class="hljs-params">(LNode *p, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//新节点s连在p之后</span><br>    s-&gt;data = p-&gt;data;<br>    p-&gt;data = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertPriorNode</span><span class="hljs-params">(LNode *p, LNode *s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//新节点s连在p之后</span><br>    s-&gt;data = p-&gt;data;<br>    p-&gt;data = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位序删除"><a href="#按位序删除" class="headerlink" title="按位序删除"></a>按位序删除</h3><h4 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!\n&quot;</span>);<br>    &#125;<br><br>    ListInsert(L, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>    ListInsert(L, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>);<br>    ListInsert(L, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>);<br>    ListInsert(L, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>);<br>    ListInsert(L, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>);<br>    ListInsert(L, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    ListInsert(L, <span class="hljs-number">7</span>, <span class="hljs-number">77</span>); <br>    ListInsert(L, <span class="hljs-number">8</span>, <span class="hljs-number">88</span>);<br><br>    <span class="hljs-keyword">if</span> (!Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> e = <span class="hljs-number">0</span>;<br>    ListDelete(L, <span class="hljs-number">8</span>, e);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *p;   <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;      <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败!\n&quot;</span>);<br>    &#125;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;        <span class="hljs-comment">//将节点s连接到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//插入成功</span><br>&#125;<br><span class="hljs-comment">//按位序删除：带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;       <span class="hljs-comment">//指针p指向当前扫描到的节点</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;      <span class="hljs-comment">//当前p指向的是第几个节点</span><br>    p = L;          <span class="hljs-comment">//L指向头结点，头结点是第0个节点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;   <span class="hljs-comment">//循环找到第i-1个节点</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">//第i-1个节点之后已无其他节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q = p-&gt;next;     <span class="hljs-comment">//令p指向被删除节点</span><br>    e = q-&gt;data;            <span class="hljs-comment">//用e返回元素的值</span><br>    p-&gt;next = q-&gt;next;      <span class="hljs-comment">//将*q节点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong>这里没有写查找功能，无法验证是否删除成功，留在下一节查找功能验证！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//删除指定节点p</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNode</span><span class="hljs-params">(LNode *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q = p-&gt;next;         <span class="hljs-comment">//令q指向*p的后继节点</span><br>    p-&gt;data = p-&gt;next-&gt;data;    <span class="hljs-comment">//和后继节点交换数据域</span><br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中时间复杂度为O(1)</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单链表</tag>
      
      <tag>删除操作</tag>
      
      <tag>插入操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(07)王道数据结构-单链表的定义</title>
    <link href="/iecore/54043/"/>
    <url>/iecore/54043/</url>
    
    <content type="html"><![CDATA[<h3 id="不带头结点"><a href="#不带头结点" class="headerlink" title="不带头结点"></a>不带头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//空表，暂时没有任何节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (L==<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>(一)不带头结点只要判断头指针是否为空就能判断链表是否为空</p><p>(二)初始化链表之前需要将头指针置空</p><h3 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span>      <span class="hljs-comment">//定义单链表结构</span><br>    <span class="hljs-keyword">int</span> data;               <span class="hljs-comment">//每个节点存放一个数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个节点</span><br>&#125;LNode, *LinkList;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    LinkList L;<br>    InitList(L);<br>    <span class="hljs-keyword">if</span> (Empty(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));   <span class="hljs-comment">//分配头结点</span><br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123;    <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//头结点之后暂时没有节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>(一)头结点并不存储数据，是为了之后的操作</p><p>(二)判断链表是否为空，判断的是头结点之后的节点是否为空</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(06)王道数据结构-顺序表的查找</title>
    <link href="/iecore/41394/"/>
    <url>/iecore/41394/</url>
    
    <content type="html"><![CDATA[<h3 id="按位查找："><a href="#按位查找：" class="headerlink" title="按位查找："></a>按位查找：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10 <span class="hljs-comment">//默认最大长度</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> *data;      <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;    <span class="hljs-comment">//顺序表的最大容量</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;<br><span class="hljs-comment">//初始化数组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-comment">//获取数组元素（按位）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-comment">//判断数组是否已满</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-comment">//追加元素</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListAppend</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqList L;<br>    <span class="hljs-comment">//初始化顺序表</span><br>    InitList(L);<br><br>    <span class="hljs-comment">//插入元素</span><br>    ListAppend(L, <span class="hljs-number">11</span>);<br>    ListAppend(L, <span class="hljs-number">22</span>);<br>    ListAppend(L, <span class="hljs-number">33</span>);<br>    ListAppend(L, <span class="hljs-number">44</span>);<br>    ListAppend(L, <span class="hljs-number">55</span>);<br>    ListAppend(L, <span class="hljs-number">66</span>);<br>    ListAppend(L, <span class="hljs-number">77</span>);<br><br>    <span class="hljs-comment">//获取数组元素</span><br>    <span class="hljs-keyword">int</span> num = GetElem(L, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取到%d&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//用malloc函数申请一片连续的存储空间</span><br>    L.data = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(InitSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    L.length = <span class="hljs-number">0</span>;<br>    L.MaxSize = InitSize;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-comment">//和数组的获取方法相同</span><br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//顺序表当前长度和最大长度一样说明满了</span><br>    <span class="hljs-keyword">if</span> (L.length == L.MaxSize) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListAppend</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (IsFull(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组满了！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//数组当前位置插入e</span><br>        L.data[L.length] = e;<br>        <span class="hljs-comment">//插入后长度+1</span><br>        L.length++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>时间复杂度: O(1), 因为在内存中是连续存放的，可以根据起始地址和数据元素大小立即找到第i个元素</p><h3 id="按值查找："><a href="#按值查找：" class="headerlink" title="按值查找："></a>按值查找：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10 <span class="hljs-comment">//默认最大长度</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> *data;      <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;    <span class="hljs-comment">//顺序表的最大容量</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;<br><span class="hljs-comment">//初始化数组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-comment">//获取数组元素（按值）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-comment">//判断数组是否已满</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-comment">//追加元素</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListAppend</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqList L;<br>    <span class="hljs-comment">//初始化顺序表</span><br>    InitList(L);<br><br>    <span class="hljs-comment">//插入元素</span><br>    ListAppend(L, <span class="hljs-number">11</span>);<br>    ListAppend(L, <span class="hljs-number">22</span>);<br>    ListAppend(L, <span class="hljs-number">33</span>);<br>    ListAppend(L, <span class="hljs-number">44</span>);<br>    ListAppend(L, <span class="hljs-number">55</span>);<br>    ListAppend(L, <span class="hljs-number">66</span>);<br>    ListAppend(L, <span class="hljs-number">77</span>);<br><br>    <span class="hljs-comment">//获取数组元素下标</span><br>    <span class="hljs-keyword">int</span> local = LocateElem(L, <span class="hljs-number">33</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取到%d&quot;</span>, local);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//用malloc函数申请一片连续的存储空间</span><br>    L.data = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(InitSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    L.length = <span class="hljs-number">0</span>;<br>    L.MaxSize = InitSize;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-comment">//在顺序表L中查找第一个元素值等于e的元素，并返回其位序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (L.data[i] == e) &#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;     <span class="hljs-comment">//数组下标为i的元素值等于e, 其返回的位序i+1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//退出循环说明查找失败</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//顺序表当前长度和最大长度一样说明满了</span><br>    <span class="hljs-keyword">if</span> (L.length == L.MaxSize) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListAppend</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (IsFull(L)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组满了！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//数组当前位置插入e</span><br>        L.data[L.length] = e;<br>        <span class="hljs-comment">//插入后长度+1</span><br>        L.length++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>最好情况：目标元素在表头，循环1次，最好时间复杂度=O(1) 最坏情况：目标元素在表尾，循环n次，最坏时间复杂度=O(n) 平均情况：假设目标元素出现在任何一个位置的概率相同，都是 $$ \frac{1}{n} $$ 目标元素在第1位，循环1次；在第2位，循环2次；在第n位，循环n次 平均循环次数= $$ 1·\frac{1}{n} + 2·\frac{1}{n} + 3·\frac{1}{n} + … + n·\frac{1}{n} = \frac{n(n+1)}{2}·\frac{1}{n}=\frac{n+1}{2} $$</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>顺序表</tag>
      
      <tag>查找操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(05)王道数据结构-顺序表的插入与删除</title>
    <link href="/iecore/52402/"/>
    <url>/iecore/52402/</url>
    
    <content type="html"><![CDATA[<h3 id="插入操作："><a href="#插入操作：" class="headerlink" title="插入操作："></a>插入操作：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs 'C'">#define MaxSize 10  &#x2F;&#x2F;定义最大长度<br>typedef struct &#123;<br>    int data[MaxSize];  &#x2F;&#x2F;用静态的“数组”存放数据元素<br>    int length;         &#x2F;&#x2F;顺序表的当前长度<br>&#125;SqList;                &#x2F;&#x2F;顺序表的类型定义<br>&#x2F;&#x2F;基本操作-初始化顺序表<br>void InitList(SqList &amp;L);<br>&#x2F;&#x2F;基本操作-插入元素<br>bool ListInsert(SqList &amp;L, int i, int e);<br>int main(void) &#123;<br>    SqList L;     &#x2F;&#x2F;声明一个顺序表<br>    InitList(L);  &#x2F;&#x2F;初始化顺序表<br><br>    ListInsert(L,1,1);<br>    ListInsert(L,2,2);<br>    ListInsert(L,3,3);<br>    return 0;<br>&#125;<br><br>void InitList(SqList &amp;L) &#123;<br>    for (int i &#x3D; 0; i &lt; MaxSize; i++) &#123;<br>        L.data[i] &#x3D; 0;   &#x2F;&#x2F;将所有数据元素设置为默认初始值<br>    &#125;                   &#x2F;&#x2F;顺序表初始长度为0<br>    L.length &#x3D; 0;<br>&#125;<br><br>bool ListInsert(SqList &amp;L, int i, int e) &#123;<br>    if (i &lt; 1  i &gt; L.length + 1) &#123;    &#x2F;&#x2F;判断i的范围是否有效<br>        return false;<br>    &#125;<br>    if (L.length &gt;&#x3D; MaxSize) &#123;          &#x2F;&#x2F;当前存储空间已满，不能插入<br>        return false;<br>    &#125;<br><br>    for (int j &#x3D; L.length; j&gt;&#x3D; i; j--) &#123;    &#x2F;&#x2F;将第i个元素及之后的元素后移<br>        L.data[j] &#x3D; L.data[j-1];<br>    &#125;       <br>    L.data[i-1] &#x3D; e;        &#x2F;&#x2F;在位置i处放入e<br>    L.length++;             &#x2F;&#x2F;长度加1<br>    return true;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>最好情况：新元素插入到表尾，不需要移动元素，其中i = n + 1时循环0次，最好时间复杂度为 O(1)</p><p>最坏情况：新元素插入到表头，需要将原有的n个元素全部都向后移动，其中i = 1，循环n次，最坏时间复杂度O(n)</p><p>平均情况：假设新元素插入任何一个位置的概率相同，即i = 1, 2,3, …, length+1的概率都是 $$ p = \frac{1}{n+1} $$ i = 1, 循环n次；i = 2时，循环n-1次；i=3，循环n-2次…i = n + 1时循环0次 $$ 平均循环次数平均循环次数 = np + (n-1)p + (n-2)p + … + 1p=\frac{n(n+1)}{2}\frac{1}{n+1}=\frac{n}{2} $$</p><h3 id="删除操作："><a href="#删除操作：" class="headerlink" title="删除操作："></a>删除操作：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs 'C'">#define MaxSize 10  &#x2F;&#x2F;定义最大长度<br>typedef struct &#123;<br>    int data[MaxSize];  &#x2F;&#x2F;用静态的“数组”存放数据元素<br>    int length;         &#x2F;&#x2F;顺序表的当前长度<br>&#125;SqList;                &#x2F;&#x2F;顺序表的类型定义<br>&#x2F;&#x2F;基本操作-初始化顺序表<br>void InitList(SqList &amp;L);<br>&#x2F;&#x2F;基本操作-插入元素<br>bool ListInsert(SqList &amp;L, int i, int e);<br>bool ListDelete(SqList &amp;L, )<br>int main(void) &#123;<br>    SqList L;     &#x2F;&#x2F;声明一个顺序表<br>    InitList(L);  &#x2F;&#x2F;初始化顺序表<br><br>    ListInsert(L,1,1);<br>    ListInsert(L,2,2);<br>    ListInsert(L,3,3);<br>    return 0;<br>&#125;<br><br>void InitList(SqList &amp;L) &#123;<br>    for (int i &#x3D; 0; i &lt; MaxSize; i++) &#123;<br>        L.data[i] &#x3D; 0;   &#x2F;&#x2F;将所有数据元素设置为默认初始值<br>    &#125;                   &#x2F;&#x2F;顺序表初始长度为0<br>    L.length &#x3D; 0;<br>&#125;<br><br>bool ListInsert(SqList &amp;L, int i, int e) &#123;<br>    if (i &lt; 1  i &gt; L.length + 1) &#123;    &#x2F;&#x2F;判断i的范围是否有效<br>        return false;<br>    &#125;<br>    if (L.length &gt;&#x3D; MaxSize) &#123;          &#x2F;&#x2F;当前存储空间已满，不能插入<br>        return false;<br>    &#125;<br><br>    for (int j &#x3D; L.length; j&gt;&#x3D; i; j--) &#123;    &#x2F;&#x2F;将第i个元素及之后的元素后移<br>        L.data[j] &#x3D; L.data[j-1];<br>    &#125;       <br>    L.data[i-1] &#x3D; e;        &#x2F;&#x2F;在位置i处放入e<br>    L.length++;             &#x2F;&#x2F;长度加1<br>    return true;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>最好情况：删除表尾元素，不需要移动元素，其中i = n 时循环0次，最好时间复杂度为 O(1)</p><p>最坏情况：删除表头元素，需要将后续的n-1个元素全部都向前移动i = 1，循环n-1次，最坏时间复杂度O(n)</p><p>平均情况：假设删除任何一个位置元素的概率相同，即i = 1, 2,3, …, length+1的概率都是 $$ p = \frac{1}{n} $$ i = 1, 循环n-1次，i=2时，循环n-2次；i = 3，循环n-3次, …, i = n 时，循环0次</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>线性表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WordPress插入B站视频方法</title>
    <link href="/test/3351/"/>
    <url>/test/3351/</url>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>安装一下Raw HTML插件，用来解析页面中的html</p><h4 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; padding: 40% 45%;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute; width: 100%; </span></span><br><span class="hljs-tag"><span class="hljs-string">        height: 100%; left: 0; top: 0;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="其他东西"><a href="#其他东西" class="headerlink" title="其他东西"></a>其他东西</h4><p>Argon主题中，开启MathJax3可以实现对LaLex公式的解析</p>]]></content>
    
    
    <categories>
      
      <category>功能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bilibili</tag>
      
      <tag>B站</tag>
      
      <tag>WordPress</tag>
      
      <tag>视频播放</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(04)王道数据结构-顺序表的定义</title>
    <link href="/iecore/19492/"/>
    <url>/iecore/19492/</url>
    
    <content type="html"><![CDATA[<h4 id="顺序表的定义："><a href="#顺序表的定义：" class="headerlink" title="顺序表的定义："></a>顺序表的定义：</h4><p><strong>定义：</strong>用顺序存储的方式实现线性表。顺序存储是把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<br><strong>顺序表实现-静态分配：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//用静态的“数组”存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;         <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;                <span class="hljs-comment">//顺序表的类型定义</span><br><span class="hljs-comment">//基本操作-初始化顺序表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqList L;     <span class="hljs-comment">//声明一个顺序表</span><br>    <span class="hljs-built_in">InitList</span>(L);  <span class="hljs-comment">//初始化顺序表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++) &#123;<br>        L.data[i] = <span class="hljs-number">0</span>;   <span class="hljs-comment">//将所有数据元素设置为默认初始值</span><br>    &#125;                   <span class="hljs-comment">//顺序表初始长度为0</span><br>    L.length = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong> (01)静态分配的方式中，需要对数据进行初始化，否则内存中可能存在遗留的脏数据 (02)静态分配的方式无法保证之后添加数据后的操作<br><strong>顺序表实现-动态分配：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10   <span class="hljs-comment">//默认的最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> *data;      <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;    <span class="hljs-comment">//顺序表的最大容量</span><br>    <span class="hljs-keyword">int</span> length;     <span class="hljs-comment">//顺序表的当前长度</span><br>&#125; SqList;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    SqList L;   <span class="hljs-comment">//声明一个顺序表</span><br>    <span class="hljs-built_in">InitList</span>(L);<span class="hljs-comment">//初始化顺序表</span><br>    <br>    <span class="hljs-built_in">IncreaseSize</span>(L, <span class="hljs-number">5</span>);  <span class="hljs-comment">//增加顺序表长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//用malloc函数声明一片连续的存储空间</span><br>    L.data = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(InitSize*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    L.length = <span class="hljs-number">0</span>;<br>    L.MaxSize = InitSize;<br>&#125;<br><br><span class="hljs-comment">//增加动态数组的长度</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> *p = L.data;<br>    L.data = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>((L.MaxSize + len)*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++) &#123;<br>        L.data[i] = p[i];<br>    &#125;<br>    L.MaxSize = L.MaxSize + len;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表的特点："><a href="#顺序表的特点：" class="headerlink" title="顺序表的特点："></a>顺序表的特点：</h4><p>(1)随机访问，即可以在O(1)时间内找到第i个元素 (2)存储密度高，每个节点只存储数据元素 (3)扩展容量不方便（即便采用动态分配的方式实现，扩展长度的时间复杂度也比较高）</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(03)王道数据结构-线性表定义和基本操作</title>
    <link href="/iecore/2520/"/>
    <url>/iecore/2520/</url>
    
    <content type="html"><![CDATA[<h4 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h4><p><strong>定义：</strong>线性表是具有相同数据类型的n(n&gt;=0)个数据元素的有限序列，其中n为表长，当n=0时线性表是一个空表。若用L命名线性表，则其一般表示为</p><p>$$ L = (a_1, a_2, …, a_i, a_{i+1}, …, a_n) $$</p><p><strong>几个概念：</strong></p><p>(1)ai是线性表中的“第i个”元素线性表中的位序</p><p>(2)a1是表头元素，an是表尾元素</p><p>(3)除了第一个元素外，每个元素有且仅有一个直接前驱；除了最后一个元素外，每个元素有且只有一个直接后继</p><p>线性表中的基本操作：</p><p>InitList(&amp;L): 初始化表。构造一个空的线性表L，分配内存空间</p><p>Destory(&amp;L): 销毁操作。销毁线性表，并释放线性表L所占内存空间</p><p>ListInsert(&amp;L, i, e): 插入操作。在表L中的第i个位置上插入指定元素e</p><p>ListDelete(&amp;L, i, &amp;e): 删除操作。删除表L中的第i个位置的元素，并用e返回删除元素的值</p><p>LocateElem(L, e): 按值查找操作。在表L中查找具有给定关键字值的元素</p><p>GetElem(L, i): 按位查找操作。获取表L中第i个位置的元素的值</p><p>其他操作：</p><p>Lengt(L): 求表长。返回线性表L的长度，即L中数据元素的个数</p><p>PrintList(L): 输出操作。按先后顺序输出线性表L的所有元素值</p><p>Empty: 判空操作。若L为空表，则返回true，否则返回false</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>线性表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(02)王道数据结构-空间复杂度</title>
    <link href="/iecore/30002/"/>
    <url>/iecore/30002/</url>
    
    <content type="html"><![CDATA[<p><strong>算法1：</strong>逐步递增型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;         <span class="hljs-comment">//爱你的程度</span><br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;   <span class="hljs-comment">//每次+1</span><br>        i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You More Than %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>(1)程序运行时，会将程序代码装载进内存中，而内存中存放程序代码的部分大小是固定的，与问题规模无关</p><p>(2)本程序中，装入内存的变量有局部变量i和参数n,他们所占内存空间大小是不变的</p><p>(3)本程序空间复杂度: S(n) = O(1)</p><p><strong>算法2：</strong>数组的空间复杂度</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include&lt;stdio.h&gt;<br><span class="hljs-built_in">int</span> main(void) &#123;<br>    <span class="hljs-built_in">int</span> flag[<span class="hljs-built_in">n</span>];  //声明一个长度为<span class="hljs-built_in">n</span>的数组,此时时间复杂度S(<span class="hljs-built_in">n</span>) = O(<span class="hljs-built_in">n</span>)<br>  <br>    /*<br>    下列代码空间复杂度度：S(<span class="hljs-built_in">n</span>) = O(<span class="hljs-built_in">n</span>*<span class="hljs-built_in">n</span>) + O(<span class="hljs-built_in">n</span>) + O(<span class="hljs-number">1</span>) = O(<span class="hljs-built_in">n</span>*<span class="hljs-built_in">n</span>)<br>    */<br>      <span class="hljs-built_in">int</span> flag[<span class="hljs-built_in">n</span>][<span class="hljs-built_in">n</span>];  <br>    <span class="hljs-built_in">int</span> other[<span class="hljs-built_in">n</span>];<br>      <span class="hljs-built_in">int</span> i;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>$$ 加法规则：T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n))) $$</p><p><strong>算法2：</strong>递归型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> a,b,c;        <span class="hljs-comment">//声明一系列局部变量</span><br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">loveYou</span>(n<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h4><p>第1层调用: n=5, a, b, c</p><p>第2层调用: n=4, a, b, c</p><p>第3层调用: n=3, a, b, c</p><p>第2层调用: n=2, a, b, c</p><p>第1层调用: n=1, a, b, c</p><p><strong>空间复杂度：</strong>等于递归调用的深度，S(n) = O(n) （去掉了常数项5）</p><p><strong>算法3：</strong>递归型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> flag[n];       <span class="hljs-comment">//声明一个数组</span><br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">loveYou</span>(n<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代码分析：-2"><a href="#代码分析：-2" class="headerlink" title="代码分析："></a>代码分析：</h4><p>第1层调用: n=5, flag[5]</p><p>第2层调用: n=4, flag[4]</p><p>第3层调用: n=3, flag[3]</p><p>第2层调用: n=2, flag[2]</p><p>第1层调用: n=1, flag[1]</p><p><strong>空间复杂度：</strong></p><p>$$ S(n) = 1 + 2 + 3 + … + n = \frac{n(1+n)}{2} = \frac{1}{2}n^2 + \frac{1}{2}n = O(n^2) $$</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>空间复杂度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>驾考避坑指南</title>
    <link href="/routine/62344/"/>
    <url>/routine/62344/</url>
    
    <content type="html"><![CDATA[<h4 id="驾校选择"><a href="#驾校选择" class="headerlink" title="驾校选择"></a>驾校选择</h4><p>一定不要去私人开的小驾校，除非这个驾校是你直系亲属开的。私人驾校往往只有一个教练，你和教练合不来是没办法给你换教练的，后续会很糟心。私人驾校另一个坏处就是收费不透明，很多私人驾校往往以极低的价格让你去报名。他们收费高的地方不在这里，收费的大头在路途中的路费，考试模拟费用，餐饮费用等等。要是你补考的话，费用更高。大驾校的好处是可以换教练，一般不限制你报考，小驾校往往以教练的计划为准，这也间接导致我驾照考了三年。大驾校很少存在乱收费现象，存在乱收费也可以去举报。后来我了解到，我朋友报的驾校甚至还包接送。</p><h4 id="科目一-科目四"><a href="#科目一-科目四" class="headerlink" title="科目一/科目四"></a>科目一/科目四</h4><p>科目一/科目四是整个驾照考试中最简单的一个环节，以咱们这高质量人才，想必过科一/科目四应该是轻轻松松，完全拿捏吧！要是没过，自己反思一下，回去把三字经抄一百遍。唯一需要注意的是别操作太快，那老古董机器反应不灵敏，容易跳题。</p><h4 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h4><p>科目二是整个驾考中通过率最低的。为什么通过率低呢，我认为是涉及到一些倒车的操作，需要通过左右后视镜去操作车辆。对于倒车入库，没啥特别的技巧就是多连，我当时考科目二的时候光倒车入库这个项目练了足足有二十天。不仅仅要正常倒库操作，更重要的是，距离库差那么一点，该如何补救。这些练好了之后，在考试中遇到什么情况都能从容应对。除了倒库以外，我认为科目二最难的是半坡起步。半坡起步的难点在两个方面，一个是半坡停车后如何起步（很多地方科目二是不让踩油门的）重要的是找到车身颠簸时那种即将起步的感觉，找到之后就踩稳了往前开就行了。另一个比较难的是在半坡起步前停车的距离，这个是有规定的，我的建议是拿捏不好先话，尽量宽一点点，窄了容易压线。</p><h4 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h4><p>科目三也是我翻车最严重的科目，前面科目一、科目二包括科目三后面的科目四我都是考了一遍就过了。科目三足足考了五遍，差一点就重开了。总结我考了这五次科目散的经验，重中之重是心态以及起步和最后的停车。科目三十整个驾照考试中，唯一的旁边坐人的科目，有的地方还不止坐一个人。我这里给的第一个建议是尽量选早上的场次，中午天气闷热人容易暴躁。下午的时候你不一定啥时候考，如果最后几个，有些考官急着下班就会各种催促你，容易让你心态崩，另外尽量选一个不下雨的天气，下雨天气往往视线不好影响判断。另外就是教练如果忽悠你半夜去加钱再练几次别去，我之前就是听了教练的鬼话，当天练到了晚上九点半，半夜两点起来又练到了早上六点半。然后愣是等到晚上六点才轮到我考，当时精神状态非常差，不出意外的寄了。科目三在上车之前，需要围着车辆转圈，不同地方可能规矩不一样。这里需要注意的是上车的时候对考官礼貌一点，简单点的话是讲:“考官你好”，复制一点就说一句:“考官辛苦了”。这样子的大部分考官不会一开始就故意为难你。上车之后的第一个科目是夜间灯光模拟，在开始灯光之前先给我系好安全带，不少人就是忘了这个。操作上需要注意的是，听完等提示音响了在操作，不要按的太急，他那个机器有时候按太急识别不到。起步成功之后就意味这成功了一半。驾考和平时不一样的地方在于驾考上需要非常频繁的踩刹车，踩刹车的时候需要注意不要用力太猛，尽量采用点刹的方式，有的考试车辆年久失修用力过猛就直接熄火了。另一个需要注意的是加减档，不要看挡杆，身体坐直，不然加减档的时候车身容易偏移搞不好就压线了。加减档的时候胆子大一点，你要知道需要担心安全的是你旁边的考官，而不是你，在加减档区域只要前方一百五十米之内没有车辆就放心的加减档。在中途中最后一个有难度的地方就是直线行驶，这里需要注意的是选定好一个标准之后就安装这个标准去看，不要中途换。有的考场直线行驶都道路是坑洼不平的，我考试的道路上就是这样。这种道路需要动态的调整左右方向，幅度控制在五度道十度，不要大幅度调整，不然机器会判你不直。最后一个步骤就是靠边停车，不要忘记开右转向灯，不要忘记换成一档。停车距离不好判断的时候，也可以稍微宽一点，停好车之后尽早摘档，拉手刹，解开安全带离开车辆，有些地方你停车后待的时间太久也会判你不合格。</p><h4 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h4><p>教练时常给我灌输学驾照就跟上学一样，要好好听教练的，平时勤快一点帮教练多干点活，也确实给他划线（没错我们驾校练习需要划线）扫地，擦车之类的。后来我才意识到不对劲。首先，尊重教练是应该的，教练大夏天配着你在这里练车，你平时买瓶水之类的事非常正常的这些我没有半点怨言。但考驾照本质上是一个消费的事情，平时去商店买到坏的东西都能找老板理论换货呢。到了考驾照这里，收费不合理现象反而不能质疑了，这方面是说不通的。别的驾校在卷怎么把服务弄得更好、甚至有通过率的指标，到这里变成了怎么多坑一笔钱。只能说将心比心吧！</p>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>避坑</tag>
      
      <tag>驾考</tag>
      
      <tag>驾校</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晕车人的自我救赎</title>
    <link href="/routine/7137/"/>
    <url>/routine/7137/</url>
    
    <content type="html"><![CDATA[<h3 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h3><p>晕动病（motion sickness），也称为运动病，即指人们平日常说的“晕车、晕船、晕机”等，包括在微重力条件下发生的宇航病等，由多种因素导致人体对运动状态错误感知的一系列生理反应。常见于乘坐交通工具时，表现为头晕、恶心、呕吐、上腹部不适、面色苍白、出冷汗等，通常症状在停止乘坐之后可缓解，不构成生命威胁。</p><h3 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h3><p>有记忆一来，在车上发生严重的晕车反应就好多好多次，说几个让我印象极其深刻的。有一次坐大巴，我旁边是一个大学生模样的男生（那时候我十岁左右）当时就有点想吐。当时正准备问列车员要方便袋，结果方便袋还没要来，我就先吐了。由于当时面朝当时那个大学生，吐了人家一身（如果这个大哥在看这篇文章先给你道个歉）</p><p>因为晕车我直接从此不再吃一种水果。当时去我姥姥家，山间的那个车一般能挤多少人就做多少人。下车之前就已经吐了三四次下车之后我姥姥递来一根香蕉。好家伙，本来没啥事了，结果吃完哇哇的吐。从此没碰过一根香蕉</p><h3 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h3><p>既然晕车这么难受，还可能会发生非常尴尬的事情，那么有没有办法缓解甚至解决这个症状呢。答案是有的，之前有用过贴肚子上的，用鼻子闻的，抹太阳穴的，吃晕车药等等。这些方法只能缓解，并不难让每一次都不晕车，也不能让这个症状越来越轻。</p><p>常言道，明知山有虎偏上虎山行。解决晕车也差不多是这种策略，先去考个驾照（后面更新一期考驾照的）。然后习惯坐车，会慢慢提高适应距离。</p><p>刚上大学的时候，学校在比较偏远的地方，去别的地方只能打车或者坐公交。作为学生，不可能每次出行都打车，自然公交成了大部分出行需求的首选。一开始我打车差不多能坚持四十来分钟，超过这是时间必吐。然后坐车上千万不要看手机，最好的办法是闭眼养神，实在无聊可以看看风景。后来时间久了，打车基本上不晕车了。</p><p>跟朋友出去玩的时候，就非常的尴尬，因为我坐车能坚持的时间就那么久。那会坚持不住的时候就找最近的站点下车，然后去草丛吐一会，然后继续上车。每次出去聚餐的时候，吃的太饱的情况下，我基本都是扫单车蹬回去的。吃的很饱的情况下加上公交车的颠簸特别容易晕车。之后差不多一个星期能做两次公交这样的频率，基本大部分公交都能坚持一两个小时，这个时间足够到城市绝大部分地方。但是，那种神龙摆尾、弹射起步的车我还是顶不住，坐一会要下去吐。</p><p>到了现在，只要不是神龙摆尾、弹射起步的车基本都不会有过于激烈的晕车反应了。轿车已经完全不晕车了。</p>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>晕车</tag>
      
      <tag>避坑</tag>
      
      <tag>驾考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(01)王道数据结构-时间复杂度</title>
    <link href="/iecore/24989/"/>
    <url>/iecore/24989/</url>
    
    <content type="html"><![CDATA[<p><strong>算法1：</strong>逐步递增型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;         <span class="hljs-comment">//爱你的程度</span><br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;   <span class="hljs-comment">//每次+1</span><br>        i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You More Than %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一-代码分析："><a href="#一-代码分析：" class="headerlink" title="(一)代码分析："></a>(一)代码分析：</h4><h5 id="1-语句频度"><a href="#1-语句频度" class="headerlink" title="(1)语句频度"></a>(1)语句频度</h5><p>第09行：执行了1次</p><p>第10行：执行了3001次</p><p>第11行：执行了3000次</p><p>第12行：执行了3000次</p><p>第14行：执行了1次</p><p>T(3000) = 1 + 3001 + 2*3000 + 1</p><h5 id="2-时间复杂度"><a href="#2-时间复杂度" class="headerlink" title="(2)时间复杂度"></a>(2)时间复杂度</h5><p>时间开销与问题规模n之间的关系</p><p>T(n) = 3n + 3</p><p><strong>实际上时间复杂度只考虑阶数高的部分，高阶的常数项可以忽略</strong></p><p><strong>故本代码时间复杂度为: T(n) = n</strong></p><h4 id="二-运算规则"><a href="#二-运算规则" class="headerlink" title="(二)运算规则"></a>(二)运算规则</h4><p>$$ \begin{align*} &amp;(a)加法规则:T_n = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max(f(n),g(n))) \\ &amp;(b)乘法规则:T_n = T_1(n) \times T_2(n) = O(f(n)) \times O(g(n)) = O((f(n) \times g(n))) \end{align*} $$</p><h4 id="三-时间复杂度排序"><a href="#三-时间复杂度排序" class="headerlink" title="(三)时间复杂度排序"></a>(三)时间复杂度排序</h4><p>$$ \begin{align*} O(1) &lt; O(log_2n &lt; O(n)&lt;O(nlog_2n&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n) \end{align*} $$</p><h5 id="记忆口诀：常对幂指阶"><a href="#记忆口诀：常对幂指阶" class="headerlink" title="记忆口诀：常对幂指阶"></a>记忆口诀：常对幂指阶</h5><p><strong>算法2：</strong>嵌套循环型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;         <span class="hljs-comment">//爱你的程度</span><br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;   <span class="hljs-comment">//每次+1</span><br>        i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123; <span class="hljs-comment">//嵌套循环两层</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am Iron Man\n&quot;</span>);<span class="hljs-comment">//内层循环共执行n*n次</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You More Than %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><p>$$ 时间复杂度：T(n) = O(n) + O(n^2) = O(n^2) $$</p><h5 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h5><p>(1)顺序执行的代码只会影响常数项，可以忽略</p><p>(2)只需要挑循环中的一个基本操作分析它的执行次数与n的关系即可</p><p>(3)如果有多层循环嵌套，只需关注最深层循环循环了几次</p><p><strong>算法3：</strong>指数递增型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">loveYou</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;         <span class="hljs-comment">//爱你的程度</span><br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;   <br>        i = i * <span class="hljs-number">2</span>;          <span class="hljs-comment">//每次翻倍</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You More Than %d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h6><p>(1)最深层语句频度为x</p><p>(2)循环结束时满足:</p><p>$$ 2^x&gt;n \rightarrow x = log_2n + 1 $$</p><p>(3)时间复杂度:</p><p>$$ T(n) = O(x) = O(log_2n) $$</p><p><strong>算法4：</strong>搜索数字型爱你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> flag[], <span class="hljs-keyword">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> flag[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-built_in">loveYou</span>(flag,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveYou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> flag[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//n为问题规模   </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Am Iron Man\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (flag[i] == n) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I Love You %d\n&quot;</span>, i);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="时间复杂度分析：-1"><a href="#时间复杂度分析：-1" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h6><p><strong>最好情况：</strong>元素n在第一个位置，时间复杂度为T(n)=O(1)</p><p><strong>最坏情况：</strong>元素n在最后一个位置，时间复杂度为T(n)=O(n)</p><p><strong>平均情况：</strong>元素n在任意一个位置的概率为1/n，时间复杂度为T(n)=O(n)</p><p>引申出最好时间复杂度，最坏时间复杂度，平均时间复杂度</p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>时间复杂度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【异性朋友】异性朋友</title>
    <link href="/literture/29449/"/>
    <url>/literture/29449/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这一篇不出意外的话是异性朋友系列最后一期。如标题所言，这期分享的是异性朋友，是那种纯粹朋友关系的异性。涉及到的人物也比较少。</p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>最初认识A的时候，她是班上的生物课代表。当时她留着短发，带着黑框眼镜，背着与她瘦弱体型不太符合的书包，穿衣风格也比较偏中性。一开始给我的印象是这个人非常的高冷，一副生人勿近的样子，最初认识她的时候也没有跟她说过话。自从高一分班以后，再也没有同班过，按理说自此之后不会产生什么交集。后来不知道咋回事就认识了一批混二次元的，她就是核心人物之一。自从认识这批二次元之后，发现了她与外表截然不同的性格。那个时候我才知道，她对熟悉的人有多话痨，基本小嘴叭叭叭个不停。我和她之间的称呼非常的离谱，我管她叫“X哥”，她管我叫“X妹妹”，属于是各叫各的。后来放学遇到了就一块回家（当时三个人，我和我哥们还有她，三个人互相认识）然后有时候会互相送礼物之类的。我记得我给她送过一个笔筒，她给我和我哥们送过一个自己画的卡片（她后来学美术），然后还有自己缝的一个香囊。平时有什么困难也会互相帮助，之后毕业的时候帮她背了背美术用的东西（特别特别重，她们美术生真的强）后来就毕业了，毕业之后基本没有什么联系，偶尔想起来会聊几句。</p><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><p>B是一个非常热情活泼的女生，也非常的仗义。记不起来怎么和B认识的了，认识B的时候她就已经有对象了。当时我们学校高一高二的时候，每天会安排一个小组（大概是三四个人）去固定区域打扫卫生。然后B就找到我一块去打扫卫生，小组里三个女生，我一个男生。另外两个女生，一个和B一样比较外向（但没有B这么社牛）另一个是班上最内向的女生（整个高中阶段没说过话）然后就这么一个奇怪的组合一块打扫了两年半卫生。当时打扫卫生的时候，遇到的什么问题也基本上是B出面去解决的。记得有一年暑假。有一件事，我需要报警解决，当时手机丢了，当时就想到了B。然后给她讲了，她毫不犹豫的答应了。后来那个人打电话骚扰B，B也没客气骂完就拉黑了。高中的生涯中，她找我帮忙我没拒绝过，当然我找她帮忙她也没拒绝过。</p>]]></content>
    
    
    <categories>
      
      <category>文学作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>友谊</tag>
      
      <tag>异性朋友</tag>
      
      <tag>中学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（十）队列的基本使用</title>
    <link href="/iecore/27761/"/>
    <url>/iecore/27761/</url>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一种可以实现“先进后出”的存储结构，队列分为静态队列（使用数组实现）和链式队列（使用链表实现）其中静态队列必须是循环队列</p><h4 id="循环队列代码"><a href="#循环队列代码" class="headerlink" title="循环队列代码"></a>循环队列代码</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span>&lt;stdio.h&gt;<br>#<span class="hljs-keyword">include</span>&lt;malloc.h&gt;<br>typedef <span class="hljs-keyword">struct</span> Queue &#123;<br>      <span class="hljs-built_in">int</span> *pBase;<br>      <span class="hljs-built_in">int</span> front;<br>      <span class="hljs-built_in">int</span> rear;<br>&#125; QUEUE;<br>void init(QUEUE *pQ);<br><span class="hljs-built_in">bool</span> en<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span>;<br><span class="hljs-built_in">bool</span> full<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span>;<br><span class="hljs-built_in">bool</span> emput<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span>;<br><span class="hljs-built_in">bool</span> out<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">pVal</span>)</span>;<br>void traverse<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span>;<br><span class="hljs-built_in">int</span> main(void) &#123;<br>      QUEUE Q;<br>      <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>;<br>      init(&amp;Q);<br>  <br>      en<span class="hljs-constructor">_queue(&amp;Q, 1)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 2)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 3)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 4)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 5)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 6)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 7)</span>;<br>      en<span class="hljs-constructor">_queue(&amp;Q, 8)</span>;<br>      <br>      traverse<span class="hljs-constructor">_queue(&amp;Q)</span>;<br>      <br>      <span class="hljs-keyword">if</span> (out<span class="hljs-constructor">_queue(&amp;Q, &amp;<span class="hljs-params">val</span>)</span>) &#123;<br>          printf(<span class="hljs-string">&quot;出队成功，队列出队的元素是：%d\n&quot;</span>,<span class="hljs-keyword">val</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          printf(<span class="hljs-string">&quot;出队失败!&quot;</span>);<br>      &#125;<br>      <br>      traverse<span class="hljs-constructor">_queue(&amp;Q)</span>;<br>      return <span class="hljs-number">0</span>;<br>&#125;<br>void init(QUEUE *pQ) &#123;<br>      pQ-&gt;pBase = (<span class="hljs-built_in">int</span> *)malloc(sizeof(<span class="hljs-built_in">int</span>)*<span class="hljs-number">6</span>);<br>      pQ-&gt;front = <span class="hljs-number">0</span>;<br>      pQ-&gt;rear = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">bool</span> full<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> ((pQ-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span><span class="hljs-operator"> == </span>pQ-&gt;front) &#123;<br>    return <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    return <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> en<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (full<span class="hljs-constructor">_queue(<span class="hljs-params">pQ</span>)</span>) &#123;<br>    return <span class="hljs-literal">false</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>        pQ-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">pQ</span>-&gt;<span class="hljs-identifier">rear</span>]</span> = <span class="hljs-keyword">val</span>;<br>        pQ-&gt;rear = (pQ-&gt;rear+<span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br>        return <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><br>void traverse<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span> &#123;<br>    <span class="hljs-built_in">int</span> i = pQ-&gt;front;<br>    <span class="hljs-keyword">while</span> (i != pQ-&gt;rear) &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, pQ-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>        i = (i+<span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    return;<br>&#125;<br><br><span class="hljs-built_in">bool</span> emput<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pQ-&gt;front<span class="hljs-operator"> == </span>pQ-&gt;rear) &#123;<br>        return <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    return <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> out<span class="hljs-constructor">_queue(QUEUE <span class="hljs-operator">*</span><span class="hljs-params">pQ</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">pVal</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (emput<span class="hljs-constructor">_queue(<span class="hljs-params">pQ</span>)</span>) &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>       *pVal = pQ-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">pQ</span>-&gt;<span class="hljs-identifier">front</span>]</span>;<br>       pQ-&gt;front = (pQ-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br>       return <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>队列</tag>
      
      <tag>郝斌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（九）栈的基本使用</title>
    <link href="/iecore/15780/"/>
    <url>/iecore/15780/</url>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>可以实现“先进后出”的存储结构，类似于堆箱子。栈分为静态栈和动态栈。栈的基本操作是出栈和压栈。栈常用于函数调用、中断、表达式求值、内存分配、缓冲处理、走迷宫算法等。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>      <span class="hljs-keyword">int</span> data;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pNext</span>;</span><br>&#125;NODE, *PNODE;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>      PNODE pTop; <span class="hljs-comment">//栈顶</span><br>      PNODE pBottom;<span class="hljs-comment">//栈底</span><br>&#125;STACK, *PSTACK;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(PSTACK pS)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(PSTACK pS, <span class="hljs-keyword">int</span> val)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(PSTACK pS, <span class="hljs-keyword">int</span> *pVal)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">(PSTACK pS)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(PSTACK pS)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK pS)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>      STACK S;<br>      <span class="hljs-keyword">int</span> val;<br>      <span class="hljs-built_in">init</span>(&amp;S);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">2</span>);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">3</span>);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">4</span>);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">5</span>);<br>      <span class="hljs-built_in">push</span>(&amp;S,<span class="hljs-number">6</span>);<br>      <br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pop</span>(&amp;S, &amp;val)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈成功，出栈的元素是%d\n&quot;</span>, val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈失败&quot;</span>);<br>    &#125;<br>      <span class="hljs-built_in">traverse</span>(&amp;S);<br>      <span class="hljs-built_in">clear</span>(&amp;S);<br>      <span class="hljs-built_in">push</span>(&amp;S, <span class="hljs-number">12</span>);<br>      <span class="hljs-built_in">traverse</span>(&amp;S);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(PSTACK pS)</span> </span>&#123;<br>    pS-&gt;pTop = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pS-&gt;pTop) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;动态分配内存失败！\n&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>          pS-&gt;pBottom = pS-&gt;pTop;<br>          pS-&gt;pTop-&gt;pNext = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(PSTACK pS, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>      PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>      pNew-&gt;data = val;<br>      pNew-&gt;pNext = pS-&gt;pTop;<br>      pS-&gt;pTop = pNew;<br>      <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(PSTACK pS)</span> </span>&#123;<br>      PNODE p = pS-&gt;pTop;<br>      <span class="hljs-keyword">while</span> (p != pS-&gt;pBottom) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br>          p = p-&gt;pNext;<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">(PSTACK pS)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (pS-&gt;pTop == pS-&gt;pBottom) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(PSTACK pS, <span class="hljs-keyword">int</span> *pVal)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>(pS)) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      PNODE r = pS-&gt;pTop;<br>      *pVal = r-&gt;data;<br>      pS-&gt;pTop = r-&gt;pNext;<br>      <span class="hljs-built_in">free</span>(r);<br>      r = <span class="hljs-literal">NULL</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK pS)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>(pS)) &#123;<br>         <span class="hljs-keyword">return</span>;    <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>          PNODE p = pS-&gt;pTop;<br>          PNODE q = <span class="hljs-literal">NULL</span>;<br>          <span class="hljs-keyword">while</span>(p != pS-&gt;pBottom) &#123;<br>            q = p-&gt;pNext;<br>              <span class="hljs-built_in">free</span>(p);<br>              p = q;<br>          &#125;<br>          pS-&gt;pTop = pS-&gt;pBottom;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>郝斌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（八）链表基本算法实现</title>
    <link href="/iecore/64850/"/>
    <url>/iecore/64850/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>      <span class="hljs-keyword">int</span> data;     <span class="hljs-comment">//数据域</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span> <span class="hljs-comment">//指针域</span><br>&#125;NODE, *PNODE;<br><span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>; <span class="hljs-comment">//创建链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span>;  <span class="hljs-comment">//遍历链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span></span>;     <span class="hljs-comment">//判空</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span></span>;  <span class="hljs-comment">//长度</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE pHead, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> val)</span></span>; <span class="hljs-comment">//插入</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE pHead, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> *pVal)</span></span>; <span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span></span>;  <span class="hljs-comment">//排序</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    PNODE pHead = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> val;<br>    pHead = <span class="hljs-built_in">create_list</span>();    <span class="hljs-comment">//创建非循环单链表，并将该链表头结点地址传给pHead</span><br>    <span class="hljs-comment">//insert_list(pHead, 4, 33);</span><br>    <span class="hljs-built_in">sort_list</span>(pHead);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">delete_list</span>(pHead, <span class="hljs-number">4</span>, &amp;val)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;succes! your delete is %d\n&quot;</span>, val);<br>    &#125;<br>    <span class="hljs-built_in">traverse_list</span>(pHead);   <span class="hljs-comment">//输出链表所有元素</span><br>      <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">length_list</span>(pHead);<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len = %d&quot;</span>, len);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> len; <span class="hljs-comment">//有效节点个数</span><br>      <span class="hljs-keyword">int</span> i;<br>      <span class="hljs-keyword">int</span> val; <span class="hljs-comment">//临时存放用户输入节点的值</span><br>      PNODE pHead = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead) &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配失败&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>      &#125;<br>      PNODE pTail = pHead;<br>      pTail-&gt;pNext = <span class="hljs-literal">NULL</span>;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入链表节点个数：len=&quot;</span>);\<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入第%d个节点的值：&quot;</span>, i+<span class="hljs-number">1</span>);<br>          <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;val);<br>          PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>          <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew) &#123;<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配失败&quot;</span>);<br>              <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>          &#125;<br>          pNew-&gt;data = val;<br>          pTail-&gt;pNext = pNew;<br>          pNew-&gt;pNext = <span class="hljs-literal">NULL</span>;<br>          pTail = pNew;<br>      &#125;<br>      <span class="hljs-keyword">return</span> pHead;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span> </span>&#123;<br>      PNODE p = pHead-&gt;pNext;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != p) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br>      p = p-&gt;pNext;<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead-&gt;pNext) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span> </span>&#123;<br>    PNODE p = pHead-&gt;pNext;<br>      <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != p) &#123;<br>        ++len;<br>        p = p-&gt;pNext;<br>     &#125;<br>     <span class="hljs-keyword">return</span> len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, t;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">length_list</span>(pHead);<br>    PNODE p, q;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, p = pHead-&gt;pNext; i &lt; len <span class="hljs-number">-1</span>; ++i, p = p-&gt;pNext) &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>, q = p-&gt;pNext; j &lt; len; ++j, q = q-&gt;pNext) &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;data &gt; q-&gt;data) &#123;<br>                t = p-&gt;data;<br>                p-&gt;data = q-&gt;data;<br>                q-&gt;data = t;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE pHead, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    PNODE p = pHead;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != p &amp;&amp; i &lt; pos<span class="hljs-number">-1</span>) &#123;<br>        p = p-&gt;pNext;<br>        ++i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i&gt;pos<span class="hljs-number">-1</span>  <span class="hljs-literal">NULL</span>==p) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error of memary!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    pNew-&gt;data = val;<br>    PNODE q = p-&gt;pNext;<br>    p-&gt;pNext = pNew;<br>    pNew-&gt;pNext = q;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE pHead, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> *pVal)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    PNODE p = pHead;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != p-&gt;pNext &amp;&amp; i &lt; pos<span class="hljs-number">-1</span>) &#123;<br>        p = p-&gt;pNext;<br>        ++i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &gt; pos<span class="hljs-number">-1</span>  <span class="hljs-literal">NULL</span> == p-&gt;pNext) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    PNODE q = p-&gt;pNext;<br>    *pVal = q-&gt;data;<br>    <br>    <span class="hljs-comment">//删除p节点后面的节点</span><br>    p-&gt;pNext = p-&gt;pNext-&gt;pNext;<br>    <span class="hljs-built_in">free</span>(q);<br>    q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>郝斌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（七）链表的定义</title>
    <link href="/iecore/20389/"/>
    <url>/iecore/20389/</url>
    
    <content type="html"><![CDATA[<h4 id="链表定义"><a href="#链表定义" class="headerlink" title="链表定义"></a>链表定义</h4><p>n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点，首节点没有前驱节点，尾结点没有后续节点。链表分为单链表，双链表（每一个节点有两个指针域），循环链表（可以通过任意一个节点找到其他所有节点），非循环链表</p><h4 id="链表相关术语"><a href="#链表相关术语" class="headerlink" title="链表相关术语"></a>链表相关术语</h4><p>首节点：第一个有效节点</p><p>尾结点：最后一个有效节点</p><p>头结点：头结点的数据类型和首节点的数据类型是相同的，第一个有效节点之前的那个节点，头结点并不存放有效数据，加头结点是为了方便对链表的操作</p><p>头指针：指向头结点的指针变量</p><p>尾指针：指向尾结点的指针变量</p><h5 id="确定一个链表只需要头指针一个参数，可以通过头指针推算出链表的其他信息"><a href="#确定一个链表只需要头指针一个参数，可以通过头指针推算出链表的其他信息" class="headerlink" title="确定一个链表只需要头指针一个参数，可以通过头指针推算出链表的其他信息"></a>确定一个链表只需要头指针一个参数，可以通过头指针推算出链表的其他信息</h5><h4 id="使用代码实现链表"><a href="#使用代码实现链表" class="headerlink" title="使用代码实现链表"></a>使用代码实现链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;     <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span> <span class="hljs-comment">//指针域</span><br>&#125;NODE, *PNODE;<br><span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    PNODE pHead = <span class="hljs-literal">NULL</span>;<br>    pHead = <span class="hljs-built_in">create_list</span>();    <span class="hljs-comment">//创建非循环单链表，并将该链表头结点地址传给pHead</span><br>    <span class="hljs-built_in">traverse_list</span>(pHead);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len;  <span class="hljs-comment">//链表节点个数</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> val;  <span class="hljs-comment">//临时存放用户输入的节点的值</span><br>    <br>    PNODE pHead = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建链表失败！&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//pTail永远指向尾节点</span><br>    PNODE pTail = pHead;<br>    pTail-&gt;pNext = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入链表节点个数：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入第%d个节点的值：&quot;</span>, i+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;val);<br>        <br>        PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(NODE));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建节点失败！&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        pNew-&gt;data = val;<br>        pTail-&gt;pNext = pNew;<br>        pNew-&gt;pNext = <span class="hljs-literal">NULL</span>;<br>        pTail = pNew;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pHead;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span> </span>&#123;<br>    PNODE p = pHead-&gt;pNext;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != p) &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br>          p = p-&gt;pNext;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>郝斌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次翻车的装机经历</title>
    <link href="/routine/6315/"/>
    <url>/routine/6315/</url>
    
    <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>六月初，一个朋友因为电脑太卡玩游戏非常影响体验，于是找到了我让我推荐一个笔记本来购买。本着求取多方一意见的想法，我找来另外两个朋友，晚上我们连麦商量了一下购买策略。由于他预算实在是不太够，笔记本在预算之内是无法满足需求的，这时候我们想到了ITX主机，在网络上看了很多的视频最终选择了喵喵折提供的方案来进行装机。</p><h4 id="F是个大坑"><a href="#F是个大坑" class="headerlink" title="F是个大坑"></a>F是个大坑</h4><p>因为我朋友玩的游戏是dnf，dnf这个游戏对显卡的要求没有特别高。加上当今显卡行情不是特别好，我就推荐先不买显卡，等着资金够了再考虑购买显卡。当时我还在学校，然后我朋友看了几遍装机视频感觉不是特别难。加上当时和我远程连麦，遇到问题就可以随时告诉我，然后我一步步告诉他怎么搞。结果装到最后，屏幕依然没有任何信息，当时我首先怀疑的是线没有插好、内存条有问题这种。等我回来之后，我按照正确的方法安装了一遍，甚至给主板放了个电，结果依然没有任何反应。这时候感觉可能主板有问题，于是我们仨稍微懂点的商量了一下，决定换一个主板，换了主板之后，结果还是没有任何反应。我们仨陷入了深深的沉思，决定先搁置，在网络上查可能的情况。最后终于查到，英特尔带F的cpu，不插显卡不会有任何反应，连bios都没法进入。考虑到dnf，以及以后会玩的gta5之类的对显卡没有那么高的要求，我们选择了预算之内能买到的够用的gtx1080显卡。在把显卡安装成功之后，终于见到了期待已久的bios界面。</p><h4 id="12代cpu奇怪的问题"><a href="#12代cpu奇怪的问题" class="headerlink" title="12代cpu奇怪的问题"></a>12代cpu奇怪的问题</h4><p>我和我朋友都没有用过win11，而且总感觉win11界面设计有点丑，决定给我朋友装一个win10系统。考虑到我朋友预算有限，我把我之前笔记本拆下来的一个机械硬盘送给了我朋友，这样就不用额外买硬盘了。一开始我带着我之前装好pe系统的u盘来装机，结果死活进不去pe系统，之后我回家用我自己电脑试了试，发现pe系统坏掉了。这时候我另一个稍微懂一点电脑的朋友也回家了，我和他一起决定采用微软官方提供的安装方法安装win10，然后成功进入到了安装界面。在选择安装的硬盘的那个页面，识别不到硬盘，然后我们吧硬盘拆下来放在硬盘盒里当成移动硬盘又重新操作了一遍，识别到了硬盘，但windows不能装到usb存储介质里。我们俩当时就感觉可能是驱动问题，然后去找需要的驱动，用u盘去安装，试了很多很多驱动，依然失败。这时候我考虑到装机视频里，他们都装的是win11，会不会是12代cpu不支持win10，于是去下载win11进行安装，终于成功进入了系统。</p><h4 id="离谱的内存条"><a href="#离谱的内存条" class="headerlink" title="离谱的内存条"></a>离谱的内存条</h4><p>当时装好系统之后，按照管理查看电脑相关的配置。看看买的是不是对的，有没有被坑，结果发现两条8g的内存条只识别了一根。排除法排出了出问题的那根，惯例擦内存条，换插槽，结果都不管用。当天就把这根内存条换了。过了几天新的内存条到了，结果还是一样的问题，这时候我都傻了。于是直接让我朋友把这根内存条退了，问题那么多品控有问题。当天就下单了联想的一根内存条，联想虽没有多厉害的内存技术，但品控和售后还是可以的。终于成功读取到了16g的内存。</p><h4 id="其他的问题"><a href="#其他的问题" class="headerlink" title="其他的问题"></a>其他的问题</h4><p>因为给我朋友的是sata的机械硬盘，只有5400rad，所以进入系统以及加载游戏的速度比较慢。我朋友忍受不了就买了一个m2的固态硬盘，这时候硬盘是1t固态+1t机械，我都羡慕，太奢侈了。为了方便和以前的轻薄本共享文件，给他搞了个stmp文件共享。激活系统的时候发现以前用的win10的激活方法也管用。由于他笔记本已经有office了，就没安装office，要不可以搞一个office，我用是开发者e5计划，已经白嫖一年office365了。当时装的是win11工作站版，结果装epic有一些dll文件没有，于是又装了个dll修复工具进行修复。终于装机完成</p><h4 id="装机后续体验"><a href="#装机后续体验" class="headerlink" title="装机后续体验"></a>装机后续体验</h4><p>他常玩的dnf从原来的30fps，来到了270fps，加载速度也从原来的30s到了15s。开机速度基本上是喝口水的功夫。gta5也能流畅的玩。主要这个硬盘太带劲了1t+1t（可以放相当多的学习资料呢）<br><img src="https://s1.ax1x.com/2022/07/07/jdTj3V.png" alt="游戏安装" title="游戏安装"></p>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win11</tag>
      
      <tag>翻车</tag>
      
      <tag>装机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Windows包管理工具scoop安装mysql</title>
    <link href="/deploy/5929/"/>
    <url>/deploy/5929/</url>
    
    <content type="html"><![CDATA[<p>一直以来使用以往的mysql安装方法往往需要安装很长的时间，而且我感觉也不够优雅。于是试图寻找一个优雅的方式进行mysql之类的软件的安装。功夫不负有心人找到了一个window平台上的包管理工具scoop</p><h5 id="（一）scoop的安装"><a href="#（一）scoop的安装" class="headerlink" title="（一）scoop的安装"></a>（一）scoop的安装</h5><p>首先打开powershell执行以下命令（只能用powershell来安装）</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-executionpolicy</span> <span class="hljs-string">remotesigned</span> -<span class="hljs-string">scope</span> <span class="hljs-string">currentuser</span><br></code></pre></td></tr></table></figure><p>执行完成之后继续执行如下命令</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">iex (<span class="hljs-keyword">new</span>-<span class="hljs-keyword">object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>安装完成之后可以输入scoop进行验证，安装成功之后界面如下<br><img src="https://s1.ax1x.com/2022/07/06/ja502D.png" alt="scoop安装成功页面" title="scoop安装成功页面"></p><h5 id="（一）安装mysql"><a href="#（一）安装mysql" class="headerlink" title="（一）安装mysql"></a>（一）安装mysql</h5><p>这里我们安装的是mysql8，按照<a href="https://scoop.sh/#/apps?q=mysql&s=0&d=1&o=true">官网</a>所给的提示执行以下两条语句。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span>main<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>mysql<br></code></pre></td></tr></table></figure><h5 id="（二）运行mysql"><a href="#（二）运行mysql" class="headerlink" title="（二）运行mysql"></a>（二）运行mysql</h5><p>这里使用scoop的安装方法是需要敲命令来运行的，在命令行敲入以下命令中任意一个即可运行mysql的环境。运行之后默认用户名是root，默认密码为空。之后就可以使用Navicat等工具连接数据库来使用了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysqld <span class="hljs-comment">--standalone</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysqld <span class="hljs-comment">--console</span><br></code></pre></td></tr></table></figure><p>使用Navicat连接成功后页面<br><img src="https://s1.ax1x.com/2022/07/06/jaIKeA.png" alt="连接页面" title="连接页面"><br><img src="https://s1.ax1x.com/2022/07/06/jaIaes.png" alt="连接成功后页面" title="连接成功后页面"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scoop</tag>
      
      <tag>node</tag>
      
      <tag>mysql</tag>
      
      <tag>包管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（六）连续存储数组算法</title>
    <link href="/iecore/11746/"/>
    <url>/iecore/11746/</url>
    
    <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span>&lt;stdio.h&gt;<br>#<span class="hljs-keyword">include</span>&lt;malloc.h&gt;<br>#<span class="hljs-keyword">include</span>&lt;stdlib.h&gt;<br><span class="hljs-comment">//定义了一个数据类型，该数据类型的名字叫做struct Arr,该数据类型含义三个成员</span><br><span class="hljs-keyword">struct</span> Arr &#123;<br>     <span class="hljs-built_in">int</span> *pBase; <span class="hljs-comment">//存储数组第一个元素的地址</span><br>     <span class="hljs-built_in">int</span> len;    <span class="hljs-comment">//数组所能容纳的最大元素的个数</span><br>     <span class="hljs-built_in">int</span> cnt;    <span class="hljs-comment">//当前数组有效元素的个数</span><br>&#125;;<br>void init<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">length</span>)</span>;    <span class="hljs-comment">//初始化数组</span><br><span class="hljs-built_in">bool</span> append<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span> <span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span>;     <span class="hljs-comment">//追加</span><br><span class="hljs-built_in">bool</span> insert<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">pos</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span>;     <span class="hljs-comment">//插入,pos值从1开始,是从前面插入数据</span><br><span class="hljs-built_in">bool</span> delete<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">pos</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">pVal</span>)</span>;<br><span class="hljs-built_in">int</span> get<span class="hljs-literal">()</span>;    <span class="hljs-comment">//获取元素</span><br><span class="hljs-built_in">bool</span> is<span class="hljs-constructor">_empty(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span>;    <span class="hljs-comment">//判断是否为空</span><br><span class="hljs-built_in">bool</span> is<span class="hljs-constructor">_full(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span>;        <span class="hljs-comment">//判断是否满</span><br>void sort<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span>;    <span class="hljs-comment">//对数组进行排序</span><br>void show<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span>;    <span class="hljs-comment">//输出数组</span><br>void inversion<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span>;    <span class="hljs-comment">//倒置数组</span><br><span class="hljs-built_in">int</span> main(void) &#123;<br>     <span class="hljs-keyword">struct</span> Arr arr;<br>     <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>;<br>     init<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 6)</span>;<br>     show<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 1)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 2)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, -3)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 4)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 10)</span>;<br>     append<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>, 3)</span>;<br>     insert<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>,3,2)</span>;<br>     <span class="hljs-keyword">if</span> ( delete<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>,1,&amp;<span class="hljs-params">val</span>)</span>) &#123;<br>         printf(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br>     printf(<span class="hljs-string">&quot;您删除的元素是：%d\n&quot;</span>, <span class="hljs-keyword">val</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>          printf(<span class="hljs-string">&quot;删除失败！\n&quot;</span>);<br>     &#125;<br>     show<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     inversion<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     printf(<span class="hljs-string">&quot;倒置之后：&quot;</span>);<br>     show<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     sort<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     printf(<span class="hljs-string">&quot;\n排序之后：&quot;</span>);<br>     show<span class="hljs-constructor">_arr(&amp;<span class="hljs-params">arr</span>)</span>;<br>     return <span class="hljs-number">0</span>;<br>&#125;<br><br>void init<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">length</span>)</span> &#123;<br>    <span class="hljs-comment">//为数组元素申请内存空间，空间大小是数组的长度</span><br>    pArr-&gt;pBase = (<span class="hljs-built_in">int</span> *)malloc(sizeof(<span class="hljs-built_in">int</span>)*length);<br>    <span class="hljs-comment">//如果数组第一个元素中没有值，说明申请内存空间失败</span><br>    <span class="hljs-keyword">if</span> (NULL<span class="hljs-operator"> == </span>pArr-&gt;pBase) &#123;<br>        printf(<span class="hljs-string">&quot;分配失败！&quot;</span>);<br>        exit<span class="hljs-number">(-1)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//赋予数组的长度以及当前数组元素的个数</span><br>        pArr-&gt;len = length;<br>        pArr-&gt;cnt = <span class="hljs-number">0</span>;<br>    &#125;<br>    return;<br>&#125;<br><br><span class="hljs-built_in">bool</span> is<span class="hljs-constructor">_empty(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>pArr-&gt;cnt) &#123;<br>        return <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;         <br><br>void show<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span> <span class="hljs-params">pArr</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">_empty(<span class="hljs-params">pArr</span>)</span>) &#123;<br>        printf(<span class="hljs-string">&quot;数组为空！\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; pArr-&gt;cnt; ++i) &#123;<br>            printf(<span class="hljs-string">&quot;%d &quot;</span>, pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>        &#125;<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> is<span class="hljs-constructor">_full(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pArr-&gt;cnt<span class="hljs-operator"> == </span>pArr-&gt;len) &#123;<br>        return <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> append<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span> <span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123;<br>   <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">_full(<span class="hljs-params">pArr</span>)</span>) &#123;<br>       printf(<span class="hljs-string">&quot;数组已满！&quot;</span>);<br>       return <span class="hljs-literal">false</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">pArr</span>-&gt;<span class="hljs-identifier">cnt</span>]</span> = <span class="hljs-keyword">val</span>;<br>       (pArr-&gt;cnt)++;<br>       return <span class="hljs-literal">true</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-built_in">bool</span> insert<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">pos</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-comment">//临时存放当前元素的位置</span><br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-comment">//数组已满的时候无法插入</span><br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">_full(<span class="hljs-params">pArr</span>)</span>) &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//在第一个元素之前无法插入，在最后一个元素之后没法插入</span><br>    <span class="hljs-keyword">if</span> (pos&lt;<span class="hljs-number">1</span>  pos &gt; pArr-&gt;len+<span class="hljs-number">1</span>) &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//pos之后的元素往后移动，找到最后一个元素的下标，开始的位置是pos-1</span><br>    <span class="hljs-keyword">for</span>(i = pArr-&gt;cnt-<span class="hljs-number">1</span>; i &gt;= pos -<span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-comment">//元素后移，下标加一</span><br>        pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>+<span class="hljs-number">1</span>]</span> = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>    &#125;<br>    pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">pos</span>-<span class="hljs-number">1</span>]</span> = <span class="hljs-keyword">val</span>;<br>    <span class="hljs-comment">//插入元素，数组的长度也增加了</span><br>    (pArr-&gt;cnt)++;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-built_in">bool</span> delete<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span><span class="hljs-params">pArr</span>, <span class="hljs-params">int</span> <span class="hljs-params">pos</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">pVal</span>)</span> &#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-comment">//如果没有元素也就无法删除</span><br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">_empty(<span class="hljs-params">pArr</span>)</span>) &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (pos&lt;<span class="hljs-number">1</span>  pos &gt; pArr-&gt;len+<span class="hljs-number">1</span>) &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    *pVal = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">pos</span>-<span class="hljs-number">1</span>]</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = pos; i &lt; pArr-&gt;cnt; ++i) &#123;<br>        pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">1</span>]</span> = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>    &#125;<br>    (pArr-&gt;cnt)--;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br><br>void inversion<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span> <span class="hljs-params">pArr</span>)</span> &#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> j = pArr-&gt;cnt-<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> t;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        t = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>        pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>        pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = t;<br>        i++;<br>        j--;<br>    &#125;<br>&#125;<br><br>void sort<span class="hljs-constructor">_arr(<span class="hljs-params">struct</span> Arr <span class="hljs-operator">*</span> <span class="hljs-params">pArr</span>)</span> &#123;<br>    <span class="hljs-comment">//排序：使用的是冒泡排序算法</span><br>    <span class="hljs-built_in">int</span> i, j, t;<br>     <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pArr-&gt;cnt; ++i) &#123;<br>          <span class="hljs-keyword">for</span> (j = i+<span class="hljs-number">1</span>; j &lt; pArr-&gt;cnt; ++j) &#123;<br>               <span class="hljs-keyword">if</span> (pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &gt; pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>) &#123;<br>                    t = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>                    pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>                    pArr-&gt;pBase<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = t;<br>               &#125;<br>          &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>郝斌</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（五）跨函数使用内存</title>
    <link href="/iecore/17094/"/>
    <url>/iecore/17094/</url>
    
    <content type="html"><![CDATA[<h4 id="跨函数使用内存"><a href="#跨函数使用内存" class="headerlink" title="跨函数使用内存"></a>跨函数使用内存</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>     <span class="hljs-keyword">int</span> sid;<br>     <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>     <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student *pst)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">ps</span>;</span><br>     ps = <span class="hljs-built_in">CreateStudent</span>();<br>     <span class="hljs-built_in">ShowStudent</span>(ps);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-comment">//此函数分配了内存空间，并且给结构体赋值</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">p</span> =</span> (struct Student *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct Student));<br>     p-&gt;sid = <span class="hljs-number">99</span>;<br>     p-&gt;age = <span class="hljs-number">88</span>;<br>     <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student *pst)</span> </span>&#123;<br>     <span class="hljs-comment">//此函数调用了其他函数分配的值</span><br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,pst-&gt;sid, pst-&gt;age);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>郝斌</tag>
      
      <tag>内存</tag>
      
      <tag>跨函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（四）动态内存分配</title>
    <link href="/iecore/45272/"/>
    <url>/iecore/45272/</url>
    
    <content type="html"><![CDATA[<h5 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> len;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=&quot;</span>);<br>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;输入需要分配的数组长度%d&quot;</span>, &amp;len);<br>     <span class="hljs-keyword">int</span> *pArr = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>)*len);<br>     *pArr = <span class="hljs-number">4</span>;<span class="hljs-comment">//类似于a[0] = 4</span><br>     pArr[<span class="hljs-number">1</span>] = <span class="hljs-number">10</span>;<span class="hljs-comment">//类似于a[1] = 10</span><br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, *pArr, pArr[<span class="hljs-number">1</span>]);<br>     <span class="hljs-built_in">free</span>(pArr);<span class="hljs-comment">//把pArr所代表的动态内存分配的20个字节的内存释放</span><br>  <br>     <span class="hljs-comment">//将pArr当成普通数组使用</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>          <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;pArr[i]);<br>     &#125;<br>  <br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(pArr+i));<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>郝斌</tag>
      
      <tag>动态内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（三）结构体的使用</title>
    <link href="/iecore/11569/"/>
    <url>/iecore/11569/</url>
    
    <content type="html"><![CDATA[<h5 id="定义赋值结构体变量"><a href="#定义赋值结构体变量" class="headerlink" title="定义赋值结构体变量"></a>定义赋值结构体变量</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>     <span class="hljs-keyword">int</span> sid;<br>     <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>     <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">st</span> =</span> &#123;<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">20</span>&#125;;<br>     <span class="hljs-comment">//结构体变量第一种赋值方式</span><br>     <span class="hljs-comment">//st.sid = 99;</span><br>  <br>     <span class="hljs-comment">//结构体第二种赋值方式</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> *<span class="hljs-title">pst</span>;</span><br>     pst = &amp;st;<br>     pst-&gt;sid = <span class="hljs-number">99</span>;<span class="hljs-comment">//pst-&gt;sid等价于(*pst).sid</span><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">     注意事项：</span><br><span class="hljs-comment">            结构体变量不能进行加减乘除，但可以相互赋值，普通结构体变量和结构体变量和结构体指针作为   函数传参问题</span><br><span class="hljs-comment">  */</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="结构体变量输入输出"><a href="#结构体变量输入输出" class="headerlink" title="结构体变量输入输出"></a>结构体变量输入输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>     <span class="hljs-keyword">int</span> sid;<br>     <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>     <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">(struct Student st)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g2</span><span class="hljs-params">(struct Student *pst)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(struct Student *pst)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     Student st;<br>     <span class="hljs-built_in">f</span>(&amp;st);<br>     <span class="hljs-built_in">g</span>(st);<br>     <span class="hljs-built_in">g2</span>(&amp;st);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">(struct Student st)</span> </span>&#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %d\n&quot;</span>,st.sid, st.name,st.age);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g2</span><span class="hljs-params">(struct Student *pst)</span> </span>&#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %d\n&quot;</span>, pst-&gt;sid, pst-&gt;name, pst-&gt;age);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(struct Student *pst)</span> </span>&#123;<br>     (*pst).sid = <span class="hljs-number">99</span>;<br>     <span class="hljs-comment">//这里不能直接赋值，C语言不支持</span><br>     <span class="hljs-built_in">strcpy</span>(pst-&gt;name, <span class="hljs-string">&quot;zs&quot;</span>);<br>     pst-&gt;age = <span class="hljs-number">22</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>郝斌</tag>
      
      <tag>结构体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（二）改变变量的值</title>
    <link href="/iecore/59771/"/>
    <url>/iecore/59771/</url>
    
    <content type="html"><![CDATA[<h4 id="改变基本结构变量的值"><a href="#改变基本结构变量的值" class="headerlink" title="改变基本结构变量的值"></a>改变基本结构变量的值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>;<br>     <span class="hljs-built_in">f</span>(&amp;i);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\n&quot;</span>,i);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p)</span> </span>&#123;<br>     *p = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-指针变量中接受的值是变量的地址"><a href="#1-指针变量中接受的值是变量的地址" class="headerlink" title="(1)指针变量中接受的值是变量的地址"></a>(1)指针变量中接受的值是变量的地址</h5><h5 id="2-指针变量-变量名-就等价于变量，所以改变-（变量名）的值也就改变了所指向的值"><a href="#2-指针变量-变量名-就等价于变量，所以改变-（变量名）的值也就改变了所指向的值" class="headerlink" title="(2)指针变量_(变量名)就等价于变量，所以改变_（变量名）的值也就改变了所指向的值"></a>(2)指针变量_(变量名)就等价于变量，所以改变_（变量名）的值也就改变了所指向的值</h5><h4 id="改变指针变量的值"><a href="#改变指针变量的值" class="headerlink" title="改变指针变量的值"></a>改变指针变量的值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **q)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> i = q;<br>     <span class="hljs-keyword">int</span> *p = &amp;i;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);<br>     <span class="hljs-built_in">f</span>(&amp;p);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **q)</span> </span>&#123;<br>     *q = (<span class="hljs-keyword">int</span> *)<span class="hljs-number">0xFFFFFFFF</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（1）-变量名-指的是指针的指针，是用来操作指针变量存储的值的"><a href="#（1）-变量名-指的是指针的指针，是用来操作指针变量存储的值的" class="headerlink" title="（1）**(变量名)指的是指针的指针，是用来操作指针变量存储的值的"></a>（1）**(变量名)指的是指针的指针，是用来操作指针变量存储的值的</h5><h5 id="（2）正常书写一个十进制、八进制、十六进制值是无法被识别为地址的，需要强制转化"><a href="#（2）正常书写一个十进制、八进制、十六进制值是无法被识别为地址的，需要强制转化" class="headerlink" title="（2）正常书写一个十进制、八进制、十六进制值是无法被识别为地址的，需要强制转化"></a>（2）正常书写一个十进制、八进制、十六进制值是无法被识别为地址的，需要强制转化</h5>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>郝斌</tag>
      
      <tag>变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（一）指针变量的意义</title>
    <link href="/iecore/4462/"/>
    <url>/iecore/4462/</url>
    
    <content type="html"><![CDATA[<h5 id="int-p-p是指针变量，int-表示该p变量只能存储int类型变量的地址"><a href="#int-p-p是指针变量，int-表示该p变量只能存储int类型变量的地址" class="headerlink" title="int p //p是指针变量，int 表示该p变量只能存储int类型变量的地址"></a>int <em>p //p是指针变量，int</em> 表示该p变量只能存储int类型变量的地址</h5><h5 id="地址：内存单元的编号（从0开始的非负证书）"><a href="#地址：内存单元的编号（从0开始的非负证书）" class="headerlink" title="地址：内存单元的编号（从0开始的非负证书）"></a>地址：内存单元的编号（从0开始的非负证书）</h5><h5 id="范围：0-FFFFFFFF-0-4G-1"><a href="#范围：0-FFFFFFFF-0-4G-1" class="headerlink" title="范围：0-FFFFFFFF [0 - 4G-1]"></a>范围：0-FFFFFFFF [0 - 4G-1]</h5><h5 id="指针：指针就是地址，地址就是指针，指针变量是存放内存单元地址的变量，指针的本质是一个操作受限的非负证书"><a href="#指针：指针就是地址，地址就是指针，指针变量是存放内存单元地址的变量，指针的本质是一个操作受限的非负证书" class="headerlink" title="指针：指针就是地址，地址就是指针，指针变量是存放内存单元地址的变量，指针的本质是一个操作受限的非负证书"></a>指针：指针就是地址，地址就是指针，指针变量是存放内存单元地址的变量，指针的本质是一个操作受限的非负证书</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-keyword">int</span> main(void) &#123;<br>         <span class="hljs-keyword">int</span> *p;<span class="hljs-regexp">//</span>定义一个指针变量p<br>     <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<span class="hljs-regexp">//</span>定义一个整型变量i，存放的值是<span class="hljs-number">10</span><br>     p = &amp;i;<span class="hljs-regexp">//p</span>的值是整形变量i的地址，*p就是i<br>     <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, i, *p);<br>     <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%#X %#X\n&quot;</span>, i, *p);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>​<span class="hljs-string">``</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><h3 id="指针图解"><a href="#指针图解" class="headerlink" title="指针图解"></a>指针图解</h3><p><a href="https://imgtu.com/i/jlMbSH"><img src="https://s1.ax1x.com/2022/07/01/jlMbSH.png" alt="jlMbSH.png" title="jlMbSH.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>信工核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>指针</tag>
      
      <tag>郝斌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据恢复之图片恢复</title>
    <link href="/deploy/31383/"/>
    <url>/deploy/31383/</url>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>码云不再提供图床这类的共有仓库，导致本站点图片全部失效，为了解决这个问题采用了SQL替换的方法。</p><h3 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h3><p>首先去码云中下载仓库的压缩包，解压到新的图片服务器，然后在SQL管理工具中执行以下SQL语句</p><h3 id="具体SQL语句"><a href="#具体SQL语句" class="headerlink" title="具体SQL语句"></a>具体SQL语句</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-symbol">`typecho_contents`</span> <span class="hljs-keyword">SET</span> <span class="hljs-symbol">`text`</span> = <span class="hljs-built_in">REPLACE</span>(<span class="hljs-symbol">`text`</span>,<span class="hljs-string">&#x27;这里是无法访问的的图片地址&#x27;</span>,<span class="hljs-string">&#x27;这是新的图片地址&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>数据恢复</tag>
      
      <tag>图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【异性朋友】那个女孩</title>
    <link href="/literture/55628/"/>
    <url>/literture/55628/</url>
    
    <content type="html"><![CDATA[<p>前面的文章写的都是女生以及女生的家长对我的感受。不少朋友看完表示羡慕我样的人生，就像大部分人在年少时会有这么一个无法忘怀的人一样。我的青春里也同样存在这这样一个人。正是因为这段经历的独特性，所以这篇自然也是对单一人物最长的描写。毕竟这个人在我懵懂的岁月里留下了不可磨灭的记忆。这篇文章详细的展示了从一开始的喜欢到最后完全释然的心路历程，以及我自身的成长。</p><p>那个女孩是我人生中第一个喜欢的女孩。 印象中和她在小学二年级做过一段时间都同桌，但自二年级以后只有五六年级的时候同班过。在哪个时候大部分女同学穿着总体上都差不多，我记忆中她穿过一些很有民族特色的服饰，正是因为她这种非常独特的穿搭引起了包括我在内很多人的关注，自然也有很多人喜欢上了这个小姑娘。除了非常会穿搭以外，她还是一个能歌善舞的女孩。五年级六一儿童节的时候，她在舞台上跳了”荷塘月色”，由于印象实在是太深刻之后每次听到这首歌第一个想到的是她。正因为她多才多艺，再加上长得比较甜美，她在我们小学属于校花级别的人物。记得当时和我们一起玩的一个朋友讲，少接触她，很多人喜欢她，包括那些非常混的很喜欢打架的，别给自己弄来没必要的麻烦。后来班上两个非常混非常喜欢闹事的两个男生真的为了争夺谁喜欢她而大大出手，虽然这是毫无意义的，他们俩谁都不能引起她的兴趣。</p><p>不知道大部分人第一次心生情愫是什么时间，我早在小学的时候就有了这种朦朦胧胧的感觉。五六年级的时候，有一天我朋友问我喜欢谁。当时我想都没想的就回答了是她。当时我这位朋友感觉这种事情很新鲜，非常值得分享，于是给当时我们玩的比较好的几个女生说了我喜欢她。这几个女生中就包括了她当时最好的闺蜜。然后当时这些人中，我们班上成绩最好的女生说我配不上她，我记忆中她闺蜜没发表什么意见。另一个女生说，我和xxx比较配。这个xxx在我印象中是一个微胖，皮肤非常白的女生。当时放学的时候，经常碰到她一个人骑着自行车回家。记忆中，从来没有和她说过话（后来高一的时候在学校附近的一个银行遇到了xxx和另一个我记得的女同学，当时她很主动给我打招呼，表现的很主动，我没认出她是谁，就只能简单的附和。直到最近，我脑海中突然将小学时候xxx的形象和我在银行里遇到的形象进了叠加。意外发现这俩好像是一个人。对于这种变化，只能用女大十八变来解释。高中时候见到的xxx脸上已经褪去了小学时带着的婴儿肥，算是比较漂亮的女生）小学就这样迷迷糊糊的结束了。</p><p>喜欢她的一个很重要的原因是脑海中有段奇怪的记忆。这段记忆不知道啥时候出现的。这段记忆的内容是好像我从老家离开之前就见过她。可能是带有一种亲切的感觉，对她的喜欢也就愈发强烈。</p><p>初一的时候，因为我们当地有去一个训练基地军训的习俗。说起来是军训，其实也只是找一个地方带我们玩几天。当时白天我们学泥塑之类的东西，晚上看电影，搞晚会。当时晚上她和另一个女生唱了张靓颖的“画心”当时听的非常入迷。</p><p>初二的时候，我们重新分了班。当时当时排好座位之后，我在靠前的课桌上看到了她。当时非常的高兴，但我也没有付出什么行动。那时候心里想的是每天能看到她就觉得很开心，当时她好像是班上的体育委员。然后就这样持续了很长的一段时间，我也没有和她有什么交流，后来她因为身体的原因离开了学校相当长的一段时间。在她离开学校的这段时间，我加过她的好友，然后非常傻的将每天上课学习的内容拍个她了，拍了几天之后我就和她表白了（当时她有男朋友）然后她表示我有男朋友，我忘记我回了啥了。这一次的莽撞自然毫不意外的收到了好人卡。有一天心情不是很好，中午去学校的时候，和同行的一个朋友（他知道我喜欢她，他也认识她）买了点啤酒在上学的路上喝。当时喝完的时候，路过路边的一个胡同口的时候，看到了一个熟悉的面孔，没错那就是她。那天她准备回校了。就这样，很离谱的知道了她家的地址。当时很凑巧我当时自己一桌，班上只有我哪里有空的座位，于是自然而然的成为了同桌。做同桌的这段时间，除了学习方面的话题没有说过其他的话题。然后我忘记什么原因了，反正就没了她的好友。但我没事的时候背过她的QQ号码，结果忘不掉了。</p><p>再之后她不知道什么原因，又离开了学校一段时间。有一天放学的时候和之前那个喝酒的哥们在路边走。当时不知道咋想的，在路边摘了朵槐花。然后在心里说，奇数花瓣她明天会回校，偶数花瓣明天她不会回校。最后的结果是奇数，离谱的是第二天她真的返校了。</p><p>初三的时候，我在她生日的时候，发了一个生日祝福的好友请求，她同意了。然后之后的初中时光没有在QQ上说过一句话。后来高中的时候，我朋友拿她的事情调侃我当时我记得说了句歌词“有些人你永远不必等”然后我当时心情不好，就当着他们的面删了她，自那次删了她之后再也没有加回来过。初三因为搬到新校区的缘故，我从走读变成了住宿。当时宿舍里一个比较要好的朋友和他聊天的时候得知他也喜欢她。不过我这个朋友后来和班上的第一谈了一段时间。</p><p>再后来就到了高二的暑假，当时家里发生了一些事情心情很不好，然后加上暑假的燥热。我托我一个朋友帮忙问了问我多年来的一个疑问“她到底去没去过我老家那个地方”，结果非常的合乎情理，她从来没有去过那个地方。自那之后我就明白了，我喜欢的更多的是脑海中臆想的她，而这种喜欢在荷尔蒙的作用下会无限放大，会愈发觉得这个人非常完美。明白这些之后，我渐渐的放下了她。在其他人面前也可以坦然的说起她，也不怕他们议论什么。这也一定程度上重塑了我的感情观，再之后遇到的心动的会更加理性。在之后我遇到的人，无论是什么方式、什么原因。只要是这个人和我产生了比较多的关联，不管是何种目的，心理难免会对这个人产生一些关注。然后会因为主观上的对这个认的印象以及后期接触产生对印象影响友谊的程度。</p><p>前面“从小到大与异性的那些故事”里提到的K后来我了解到，K和她也是非常要好的朋友。K和她名字最后一个字是一样的，之前我朋友还调侃我跟这个字真有缘分。当时和K一起唱“画皮”的那个女生，高中和那个女生是一个班，关系比普通同学稍微好点。她小学期间最好的闺蜜，跟我一个朋友非常熟。只能说这个世界非常的神奇。</p><p>前几个月，我朋友突然发过来我的一张黑照。我说你从哪里弄来的，他说初二的时候，他给班上的每一个同学都拍了张照片放到了空间相册。带着追忆青春的想法，于是我去他的空间看了看当时的相册。对着同学的照片一张一张的看了下去，我发现除了班上成绩最好的，班上最调皮，以及一直都有联系的其他人是一点印象都没有，也叫不出名字。那个时候终于明白了为什么毕业照上会写上名字，因为时间久了真的会忘记。然后我翻看了两三遍，试图找一找谈她，当时非常疑惑，我朋友不是讲了班上的一个没拉下，为啥没有她呢。然后我翻第三遍的时候，才找到她。这个时候我才意识到当时想法的幼稚，当时的我恐怕做梦也不会想到，多年以后的某一天翻看这些照片的时候，连她长什么样子都记不住。这个时候猛然意识到，原来初中都过去这么多年了，原来当时非常在乎的东西也会随着时间淡忘直到完全消失。</p><p>虽然自始至终我和她都只是普通的同学关系，但她也让我明白了一些和异性相处的方式。也明白了除非那种传说中的一见钟情，否则和绝大部分异性都是要经历:认识-&gt;熟悉-&gt;关心-&gt;暧昧<br>-&gt;恋爱这样一个流程。仅仅从认识阶段就贸然表白失败几乎是必然的，没有人会愿意和一个不了解的人谈恋爱。当时的我真的有些莽撞，有些不礼貌。这或许就是成长吧。</p><p>再后来与其他女生相处也基本遵循这套：认识-&gt;熟悉-&gt;关心-&gt;暧昧-&gt;恋爱这种流程。只是因为种种原因卡到了暧昧这一步，没有和任何一个谈起恋爱。年前专科一个印象还不错的女生（已有对象）找我问了一些问题，那天聊了几个小时。不知道咋聊的聊到了感情问题，我忘记了具体聊的内容只记得当时她给我讲你眼光太高了。现在想想一些事情真的很有意思。当时用那么笨拙的方式表达喜欢的我，在将来的某一天也会被人说眼光太高。</p><p>最后大家如果想知道我写过的文章的其他没有在正文出现的内容（大部分情况是与正文没有直接的关系）可以去评论去看看。有空的话，我会根据群里和网站上的评论适当的补充其他细节。</p>]]></content>
    
    
    <categories>
      
      <category>文学作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异性朋友</tag>
      
      <tag>暗恋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【异性朋友】相亲那些事</title>
    <link href="/literture/9132/"/>
    <url>/literture/9132/</url>
    
    <content type="html"><![CDATA[<p>相亲那些事算是对“从小到大与异性那些事”的一个补充，也可以说从另一个角度来剖析。相亲那些事因为涉及到的人物不多，所以篇幅也远少于“从小到大与异性那些事”，不过以后会不会增加其他人物不好说，我希望没有其他人物。</p><p>18年的时候偶然间听到S.H.E一首歌，这首歌叫“你曾是少年”。 里面的一句词一下戳中我了“你我来自湖北四川广西宁夏河南山东贵州云南的小镇乡村”。 从小镇出来的我，带着父母的期许踏入了大学的校门，以为能够开启崭新的生活，拥有一个理想的人生。 殊不知，每一个从小镇出来的人似乎都带着小镇带给你的固有烙印，其中到什么年龄就干什么事情便是这烙印带给我最深的影响。</p><p>没读过大学的小镇青年命运大抵是这样的，念完初中之后找一个技校去学几年，学完之后找个活干。到了二十左右的年纪就找个对象，二十五六有了一个宝宝，三十岁在小镇买一套房，然后就是操劳小孩的事情。 在读初中之前，我的命运大概率也是这样的，但初中成绩还算差强人意勉强上了个高中，然后高中成绩不好，没啥意外的读了大专。</p><p>上专科之前压根没想过相亲这回事（虽然说相亲不严谨，但在我眼里这些事情和相亲是一个行政的事情）。印象中父母跟我提过我在幼儿园的时候，同村的一个女孩说长大之后要嫁给我。后来我去外省读书，对这个人也没什么印象，中学假期回家的时候见过一面，她和村子里其他人一样，早早的辍学了。</p><p>第二次父母给我提这个事情的时候是大一的寒假。有一个亲戚家的女生，高中回老家的时候见过，后来因为没达到本科线她就不上了。大一寒假的时候，回老家之前我爹妈给我讲她现在比以前漂亮多了（她以前微胖）比之前瘦多了，然后就在我面前各种夸那个女生的好。回去之后其他亲戚也劝我说让我试试。因为当地有过年拜亲戚放鞭炮的传统，我爹妈打算去她家走亲戚。当时让我在她家门口放鞭炮，我放完感觉太尴尬了，不想进去，后来是她来喊我进去的。见到她确实很惊讶她的变化，然后在她家尬聊了一会，当时光水就喝了四五杯（都是她给我接的）。回去之后我妈把她的微信推给我了，让我聊一聊，我就简单点客套几句之后就再也没有和她说过话。自那之后变成了朋友圈点赞好友，我当时就想着，只要我耗着，不理她。她早晚会找男朋友，后来证明了我的猜想。在她找到男朋友之后我就把她删了。最近一次听到她的消息是她和婆家闹矛盾，带着娃回娘家了。</p><p>我爹妈上班的时候有个同事的女儿和我年龄差不多，然后那个阿姨经常叫我爹妈亲家公、亲家母。在我很小的时候我爹妈就提到过，后来一次家长会发现这个女生居然是我同学。那时候我和这个女生就是偶尔聊天的正常同学关系。我爹妈说了她妈喊亲家公亲家母这事我也没当回事，权当是父母之前的玩笑话。事情的转折来到了大一寒假（没错就是上面提到的那个寒假）在回老家之前她和她妈来找我妈办一件事。当时我不在，我妈喊我过来。然后我妈和她妈有说有笑，我和她低头玩手机，当时我妈对于我不理她都解释是我比较害羞内向（这个解释她经常用）。这时候，她妈妈突然说让她和我去后屋玩，我当时人就傻了，不过好在她也没去。然后当时她带着一包旺旺雪饼，她妈妈让她分给我点，最后她们走的时候她妈妈让她把旺旺雪饼留下。这个女生我自始至终就没有加过好友，好在后来也没有什么其他事情发生。当时在那屋的一个多小时，真的无数次想找个地缝钻进去。</p><p>我妈有一个处的很好的闺蜜，她闺蜜有一个比我小两三岁的闺女。这个女生之前放假回老家的时候和她玩过一阵子（那时候是初中小学）后来我念高中的时候也回去了一趟，那时候就没有什么可以聊的了。大一暑假的时候，因为家里装修回去了一次，那时候隐隐感觉他父亲对我好像有点奇怪。后来我爹说她爹有哪方面想法（她妈妈我不知道）然后和她相处就更尴尬了，双方父母让我们多聊天，属实没什么可聊的。再后来她自己表示目前没有恋爱的想法，我妈知道我不可能会有啥行动了，就把她介绍给了我堂哥。当时我堂哥问我对她的印象，我实在没什么印象可言，就回了句“没啥印象”。</p><p>据我父母说，我老家那个村子，和我同龄的女生还有十多个。然后让我本科毕业回去相亲，我一直非常反感传统相亲这种交友形式。相亲给我的感觉就是双方列出条件，父母双方看相关条件是否符合，符合就见面聊。在这种模式下，人更像是一种被比价的商品。所以我能想到唯一破局的方法就是远离，眼不见心不烦，离得远也管不着。</p>]]></content>
    
    
    <categories>
      
      <category>文学作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异性朋友</tag>
      
      <tag>相亲</tag>
      
      <tag>尴尬</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【异性朋友】从小到大与异性的那些故事</title>
    <link href="/literture/46423/"/>
    <url>/literture/46423/</url>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>在阳光沙滩群里看到一个老哥说自己感情方面的故事，本来想插嘴两句，考虑到群里有熟人，看到会有点尴尬。就写在阳光沙滩网站里了，这是在自己网站上进行备份。</p><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>先简单的介绍一下自己，今年23岁，专升本在读，母胎单身，但我以下的经历可能和大部分母胎单身的经历不同。分享自己的经历希望能起到一些警醒作用吧。下文中每一个字母都代表一个人。文章有一点长，故事比较复杂的文字相对较多。</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>A是小学同学，具体什么时候认识的不记得了。印象中的A是一个带着紫色铁框眼镜的，留着短发，非常具有学霸气息的女生。是当时我们班为数不多带眼镜的学生。和A做过一段时间的同桌。那个时候大部分学生晚上都喜欢看动画看到很久，然后第二天上学的时候和小伙伴讨论前一天动画片里的剧情，那个时候男生总体喜欢看洛洛历险记这类的带有战斗情节的动画片，女生总体喜欢甜心格格这种。印象中和她讨论过最多的一个动画片叫做小鸡不好惹，讨论鸡小龙、胸大鸡、小鸡定之间的故事。小学的时候，学校有个硬性规定是每天课件的时候要做广播体操，然后广播体操是和异性一起做的，里面有男女手牵手的一部分。由于每天的队伍是不一样的，所以分配到的做操的人也不一样。当时和其他女生做操的时候，都是从操场捡到一块小木枝或者一个小树叶，男女之间绝不牵手做。然后每次分配到和她一组的时候，我们都是手牵手做的，她是小学中为数不多不嫌弃我的女生。因为我当时成绩很差，也不讲卫生，所以在同学中的印象不是很好。还记得她家是班上最早几个买电脑的。然后她爸妈为了防止她偷玩，就设置了开机密码，然后她偷偷的从垃圾桶里捡出来她爹妈扔掉的密码，然后上学的时候告诉我了，我当时对电脑是一无所知，然后我以外这是联系方式之类的东西，就记了下来。再后来我们分了班，我有QQ的时候已经不在一个班级，就没有了联系。最后听说关于她的故事是初中的时候，她有一次羊癫疯犯了，被拉去了医院。希望她以后平平安安，健健康康。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>B是小学三四年级转学到我们学校的。记得当时她做在我前面。印象中B是一个留着蘑菇头，眼睛很大，脸很圆的一个女生。关于B的记忆不是很多，因为B只在我们小学待了一年就去别的学校了。当时夏天热的时候，大部分学生都是在家里打一瓶水，放凉后带到学校喝。那个时候学校小卖铺卖冰冻的矿泉水。那时候大部分学生兜里只有不到十块钱的零花钱，冰冻矿泉水在哪个时候属于是奢侈品，所以很少见到班上有同学买这个喝。然后B经常买冰冻矿泉水喝，忘记是我问B要还是B主动给我的，反正B分享给我了她喝过的矿泉水，我也没嫌弃就直接喝了。后来性别观念强烈的时候，发生了一件类似的事情。当时高一刚入学军训头一两天，我买了瓶冰红茶喝了三分之一，当时的班长（当时不认识）问我要冰红茶喝，我直接拒绝了。B从我们小学转学之后就再也没有听说过B的消息，记得大一的时候，加了一个扩列的群，群里有一个加了我。并且和我来自同一个地方，她和B的名字是一样的，然后我问她有没有转学到我那个小学，答案是没有。希望她以后快快乐乐吧</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>和C做小学同学的时间应该有三四年的时间。印象中的C是一个鼻梁很高，眼睛很大，鹅蛋脸，留着长发的一个女生。C是和我住在同一个村子，当时上下学往往是好几个小伙伴结伴而行。我当时大部分时候是和两三个女生（应该是两三个，实在记不清了）一起上下学回家，少部分时候是和一个同村的男生一起回家。当时同行的女生中就有C，其他女生我不记得了，现在还记得的只有C。因为当时每天早上我都去她家门口敲门喊她上学，有时候在门口等一会，有时候进屋等，时间久了，她父母也都认识了我。对她家印象最深刻的两件事是她家有特别多的擦鞋的那种垫子，晒了整整一地。另一件印象深刻的事情是她家有很多的毛绒玩具。当时每天上下学谈笑风生，没有如今的学习生活上的压力的日子真的一去不复返了。后来我搬了几次家，也分了几次班，最后对她的印象是在六年级的时候。她坐在教室的最后一排，脸长时间是红红的样子。忘记是什么原因了，直到毕业也没有加联系方式。再后来从那个村子里路过，再也找不到她家的地址。希望她以后健康快乐</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>D是我认识的成绩最好的异性。D和我一样并不是本省的人，她来自西南的一个省份。印象中D扎着一个马尾，大大的眼睛显得十分有活力。有一次数学老师讲了一个很难的题目，当时D是班上的第一名，她当时也没有听明白这个题目。然后我这个成绩中流的听懂了，并且将给她听了。可惜当时太好高骛远，导致后来中考数学翻大车。印象中D一直是一个非常乖的女生，非常热爱学习的那种女生。后来在别人的口中了解到了一个不为人所知的D。 D的父母一直都是对D非常非常的严格，考不到第一就要跪着接受惩罚，换位思考一下如果我父母这样对我，我可能早早的辍学出去打工了，在一个柔弱的女生身上竟能有如此忍耐力实在令人佩服。 整个初中阶段以及后来的高中阶段一直都没有D的好友，可能也是因为D家教严格没有机会接触QQ。 直到后来高考结束，不知道她是从哪里搞来了我的联系方式，我同意了好友请求，然后也没有什么聊天 。后来从她的说说中了解到她过得还不错，上天终究是没有辜负努力的人。 再后来因为感觉和D人生不会有什么交集就把D给删了。 希望以后D的人生一帆风顺。</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>E是目前为止前前后后牵扯时间最久的女生。 当时我们初中搬到了新校区，也重新分了班级。 那个时候对黑客技术特别的好奇，自学了c语言等技术。 然后当时我们班建立了一个班级群，出于好奇我在学校官方搜索了同学的QQ号，并且搜到了几个同学的名字，她就是期中的一个。 后来就渐渐的熟悉起来了，那时候因为离家远，所以经常让通宿的同学帮忙带东西带到学校里来。 我当时让她帮我带过一些东西。有些时候，她的一些行为我实在是搞不懂，比如有一次吃晚饭的时候，她把她的饭卡给我，然后让我帮她拿着，上晚自习的时候就还给她了。那个时候比较流行用纸条交流，她也用这种方式跟我交流了一些东西，不过交流的方式很奇怪，她纸条上写的是拼音首字母，我根本读不懂她写的是啥，后来我把她写过的纸条拍给她看，让她自己去认，她也认不出来了，那些年写过的话，至今也不知道是啥。通常来讲，我们会在愚人节的时候捉弄一下朋友，告诉朋友老师找他这类的话，那年的愚人节，我收到了一个奇怪的礼物。那年愚人节的时候，她突然来到我面前，然后给我讲“我喜欢你”当时的我并没有在意她说的这话，随便找了些话搪塞了过去。那时候钟爱写日记，写作文，有一次写的作文被当做模范作文在班上被表扬，当时入选的还有班上的班长，语文老师让我们俩上去读，由于当时没有上台发言的经验，非常的羞涩，后来是语文老师代替我读的。那篇在班上朗读的作文，她拿在手里看了好几遍，我没事写的日记，她也是忠实的观众之一。随着中考的结束，我们的人生轨迹也发生了巨大的变化，我顺利的进入了当地的一所高中就读，她没有考上高中，去读了中专。初中阶段最后一次见她是当时我们去拿毕业证和高中的录取通知书的时候，她打电话让我去拿。在高中期间我们偶尔也有联系，在我丢手机之后，我们的联系就变成了发短信。期间有一次和她去另一个朋友家里玩过。高一的时时候当时我晚上和她聊天，我说了晚安之后在班级群里看到一个复读的女同学说想报我正在上的高中。因为感觉她分数线可能不够，所以就劝她别报这个高中。这时候，她私聊我说你不是跟我讲你睡了吗，然后就比较的尴尬，她当时很生气。高二升高三的时候，我们学校翻新校园，由于有高二暑假补课的先例，当时学校正在翻新，于是我们搬到了学校的老校址。那年暑假在校门口吃馄饨的时候耳边好像听到有人说“我男神”由于当时是声音方向有很多女生，我猜测到了是她，但我没有搭理她，吃完之后我就离开了，后来向她求证，也确实是她，她当时还拍了照。时间来到了高中毕业，也是人生中为数不多的没有事情的假期。有一天晚上她约我到当地的一个湖边玩，我答应了，期初她并不相信，因为我家教比较严格，晚上几乎没有独自出门过，当然给家长说的是和男同学去玩，如果说是女同学就徒增很多不必要的麻烦。那晚我们聊了对未来的畅想，对大学美好生活的幻想。临近开学的时候，她有一次在公园参加她闺蜜的婚礼，然后她讲想吃啥东西，当时没有，然后我说有包子吃不吃，然后我就骑着车给她买了一笼包子带过去了，她没想到我真的去给她买并且真的给她送过去了。临近开学的一个晚上，她拉着我玩了好多游戏，我打游戏太菜，当晚很少赢，当时一直玩到了晚上十一点多。从当晚她的表现，似乎她在宣泄这什么。大一的时候，我们以很高的频率聊着天，有一天一上头，想知道QQ里的特别关心是什么样，然后就把她设为了特别关心。有一天我穿着皮鞋在一个景区玩，然后我拍下来分享给她了，她当时说“我喜欢穿皮鞋穿西装的男生”我又找其他理由搪塞过去了。有一次喝酒喝多了，头脑不清醒，在QQ里给一个人发了一段毫无逻辑的话，比较巧的是这个人就是她，醒来之后自然十分的尴尬。大一大二就这样有一搭没一搭的聊天，期间还买过零食给她寄过去。后来意识到我有点上头之后，给她发了一段很过分的话，当时她看完就把我给删了，但微信没删，我厚着脸皮问她为啥删我，过了两三个月，她又加回来了。再后来偶尔也有一搭没一搭的聊着，直到她找对象之后，频率降得很低，没有特别重要的事情就不会找她，然后变成了点赞好友。 后来，她在朋友圈里发了要结婚，我表示了祝福。 最近得知她生了个很可爱的宝宝，希望她以后一切顺利。</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>F准确来讲是在小学就认识了，但在小学期间没有说过话，小学阶段对她的印象是这个女生早恋，真正熟悉起来是在初三。F印象中是一个子很高，戴着一个很大的眼镜，非常活泼的女生。和F熟悉的原因是当时和F做同桌。 记得当时数学老师讲统计学上的一个知识，我嫌老师讲的太慢，太啰嗦。 于是利用自习的时间给她讲了讲，然后告诉她数学这个东西本来就不难，很多东西讲复杂了。后来证明我太年轻了，严谨是有道理的。 然后就经常和F聊天，然后F给我起了个外号（带着我名字的一个叠词）我感觉太肉麻就没有接受这个外号。 和F聊天的时候我问过她对我的印象，我记得她说的是我是一个比较慢热的人，熟悉起来了挺好的。 后来有一次我想去学校的老校区去看看，发了条说说问有没有一起去的，她是第一个回复的。 当时计划好了和她一起去的结果我妈说了个很离谱的理由（我忘记说了啥了，当时还在群里吐槽了一下）不让我去，于是作罢。 再后来F没有考上高中，也没有再联系过。 希望F以后的人生里天天开心快乐。</p><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>G是一个个子不高，竖着整齐齐刘海的女生。 和G是如何认识的已经记不起来了。 和G的故事也足够奇怪，从认识G到最后分班，这期间从来没有加过G的任何联系方式。 G是我高一分班前的同学，当时她和另一个女生下课的时候喜欢来找我，问我一些电脑方面的问题，word一类的，我就画给她们讲。 然后居然还听的津津有味，当时讲这些东西的我都觉得十分无聊。希望以后G能继续保持对世界的好奇吧。</p><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>H是当时高一的体育委员兼电教管理员，可惜电教管理员当了三天就被我抢走了。当时这个职位主要负责开关电脑，帮老师拷贝一下ppt这种，因为课上帮老师解决了一些问题，解决完问题之后第二天我就上任了。 印象中H是一个个子很高、留着齐刘海、带着黑框眼镜、皮肤很白的女生。在G的故事里提到两个女生问我电脑相关的问题，另一个人就是H，不过和G的区别是H我是加了好友的。和H高一都交流也仅仅是她和G一起问我电脑相关的问题，以及后来她调座位调到我前面的时候有一些交流。高二升高三的那年，因为搬去了学校老校区，所以学校组织了一个家长会，让家长帮助学生把书本搬到老校区去。在当时，绝大部分家长都来了的，我由于是通宿生书本不多，就让我家长早早的回去了。我用电动车搬完最后一点行李之后，H找到了我，她家长并没有过来，然后我就把我的电动车借给了她。高中毕业的暑假和她没有什么联系，大一的时候好像是一个支付宝的活动，我找她帮忙了。后来有一天我忘记是说什么了，就和H视频聊天，我们一直聊到她回宿舍，。她到宿舍之后，她舍友问我是谁、我在哪里上学之类的，然后她一一回答了。然后我感觉很尴尬，就把摄像头对准床板，这时候，她舍友问我长得帅不帅，然后她说的是长得还行，她舍友要求看看我，然后我就让她舍友看了看。后来我觉得这样聊天太尴尬了，然后我就去洗衣服了挂断了通话。再之后支付宝好像有一个什么活动，可以两三个人组成团体一块搞，她邀请我，我进去一看，里面有她和另一个女生，就拒绝了。后来聊天就很少了，在我留校的那个假期，发了个比较emo的说说，然后她评论了怎么了。再之后她找了对象，聊天也越来越少，直到只说最终要的事情。希望H能学有所成。</p><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>和I的相遇是件非常离谱的事情，高一的时候学校举行了一次运动会，我和我班上的一个朋友去学校操场逛着玩。在操场我们遇到了他初中的一些朋友，然后这些人当中就有I，那时候我和我朋友都不认识I。之后不知道从啥时候开始，总是和I相遇，I也每次都管我要联系方式，说晚上放学的时候一块回家。然后我每次都拒绝，一直拒绝了一年多时间。一年后我给了她一张纸条，里面结合了一些数学和计算机知识搞得密码，密码解开就是我的QQ号码，这个密码到现在她都没有解开。再后来因为什么缘故我忘记了，就和她算是认识了，然后了解到她家离我家不算远，就同意晚上放学的时候和她一块走。有一次晚上一块回家的时候，她望向她家的方向给我讲说她爹妈在窗户上见过我，当时给我愣住了。那时候就聊考试，聊各种奇怪的东西，有印象的是她好像说过一句“玲珑骰子安红豆,入骨相思知不知”，可能是因为是语文课代表的缘故，这类的诗句跟我讲了很多很多。然后整个高中就这样有一搭没一搭的聊天，高三那年她有一次突然找我问一个数学题，当时她在一楼，我在四楼。然后他就抱着本题来到我们班级门口喊我，当时感觉挺尴尬的就匆匆给她讲完了。然后临近高考的日子了，因为不知道将来会去往何方就留了一张照片给她。高考结束的时候，她过来说那个密码她没有解开，然后直接问我要联系方式，我就说我明天一定会加你的。然后就是高考假期没事时的闲聊，再之后她说想给我们几个朋友一人一个礼物，然后她给了我本《霍金传》，后来这本书我看完之后捐给学校了。大一的时候，还是比较喜欢分享日常的，那时候我每个说说她基本上都点赞，都评论。然后聊天的频率也非常的高，印象中好像是最多保持了一两百天的火花。她那个时候找我的理由也各种千奇百怪，基本上都是她主动找我聊天的。然后我印象中我好想有一次说了啥，她有点生气，回了句“我不喜欢你了”，我也没当回事，过了几天她还是以往的频率找我。还有一次我忘记前因后果是啥了，她突入说了句“我想你了”，类似这类的话我记得她说了很多很多，我也都没有当回事。大一那年暑假，因为她找我的频率是在是太高了，再加上当时在老家，天气炎热，心烦意乱，就删了她的QQ，让我没想到是她半个小时不到就发现了，然后就立马给我发短信，我怕她继续打电话造成不必要的麻烦，无奈下我又加了回来，之后可能她怕我再删了她，找我的频率明显下降。有一天我在上高数课，因为是数学课代表的缘故，基本上都是坐在第一排，然后那天她家里出了一些事情，那天的高数课也没怎么听，一直在安慰她，那个时候第一次意识到她有点可怜。有一次买了几只小黄鸭，然后发了说说和朋友圈，她表示想要，然后我暑假的时候就给她带回来了一只。当时我堂弟在我家里，我说我出去一下。我堂弟就在讲我要去约会，表示要跟我一块，我解释了很久才出门成功，然后我就去她小区门口把小黄鸭给她了。她说过好几次会来我上学的城市找我玩，我忘记了我怎么回复的了，当时她说的时候我还有点不知所措，不过后来她也没来。再之后她在学校一共谈了三四个男朋友，每次闹了啥矛盾就给我讲，给我整的很无语。她在专科寒暑假期间单独约我出来过，我同意了，然后就在图书馆看了会书就走了。还有一次和朋友去公园玩，然后过了一会我另一个朋友和她一块过来了，我们仨就在公园里各种嫌弃她，然后我忘记是因为啥缘故了，她说我不会对她怎么怎么样，然后就是我们仨在前面，她在后面追我们。我和她都参加了升本考试，因为不在一个省份的缘故，我录取结果都出来了她们还没有考，后来我考上了一个差强人意的学校。那段时间聊天的日常就变成了这个考试的内容，期间有一次她问我高数题，我给她写了写步骤感觉她还是啥都不懂。然后我就用腾讯会议给她讲了些基础的题型，她朋友告诉我说她啥都不知道，于是我就从公式开始梳理，那个时候才意识到她基础有多差。而那个时候，距离升本考试只有十几天的时间，在那个时候我就意识到她基本上是考不上的，后来的结果也不出所料，那时候也没给她说一些丧气的话，她还和她男朋友在她备考期间闹分手，我也尽量安慰。再后来找工作因为没有合适的租房舍友，我就回家了，期间考了考驾照。，然后回她的时候，她说我再不回复她就报警了，属实给我愣住了。挺害怕以后我要是再删了她会发生啥事情，所以我也就只是不理她。然后那个假期和我朋友因为一件事见过她一次，当时见到她脸非常白，我就直接说你粉底液好像涂的有点重，结果是她涂的防晒霜，然后我就讲你这个防晒霜有点劣质，这么白。类似这种我直接指出她的各种问题的时候我记不清有多少次了，好像她从来没有生气过。目前为止最长的假期也随着入学结束了，入学之后她也在当地的一个幼儿园正式上班了，然后期间有一次她说她生病了，给我发了很多语音，然后我安慰了几句，以还在上课的理由结束了对话。在之后的对话就是她发来的新年祝福，新年祝福只有足足有三个半月没有找过我，然后最近几天又问我啥时候放暑假，打算请我吃烧烤。I从认识到现在，一直都非常的离谱。以后能财源广进吧。</p><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>在高中的时候，因为接触网购比较早，加上有一张银行卡，学校附近就有一个银行。所以当时班上的一些同学经常找我帮忙买东西，J就是这其中的一个。J印象中是一个很白，脸比较圆的女生。高中期间我们需要自己报名缴费学业水平考试，然后当时我一个人帮助班上三十多个同学报名缴费了。我当时也没把这些当回事，毕竟同学一场，做这些是应该的。然后我有一次在桌洞里看到了很多零食和一瓶饮料，当时每一个东西上面都贴着便签，上面是J写的一些感谢我的话。当时这些东西大概有五六十块钱，五六十对一个高中生来说不是小数目。后来J经常让我帮忙买一些东西，有时候也让我帮她的闺蜜买东西，她闺蜜让我买东西每次都会给我五块十块钱，我起初不想要的，但不好拒绝，所以我淘宝购物列表现在很奇怪，有女生的裙子之类的。很奇怪的是J和我只有微信好友没有QQ好友，在高中的时候，绝大部分人还是用QQ比较多。J后来因为成绩比较差的缘故，没有坚持到高考在高三之前就离开了学校，后来好像通过自考去了一个专科。希望J以后能平安快乐。</p><h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><p>当时高考结束后，没有很强烈的考驾照的欲望，但在父母一遍又一遍的催促下，还是去学车了。去学车的时候，遇到了两个小学同学，一个男同学，一个女同学，其中的女同学就是K。她是一个很瘦，扎着马尾带黑框眼镜的女生。和K在此之前应该是没有说过一句话，比较巧的事和K小学初中高中都是一个学校，不过我高考之后的时候执意要出省所以大学不在一个省。可能正是中小学阶段是都是一个学校的缘故，所以我们后来聊天比较多吧。当时和K没有好友，K和那个男同学也没有好友，但我们仨相互认识。后来那个男同学补考驾照的时候，问我要K的联系方式的时候，我才意识到，当时K只加了我。 然后和K就在学车的空余有一搭没一搭的聊天,记得好像是考科一的时候，当时K早上六点多给我打电话问我事情，当时头脑很不清醒，问的我一脸懵逼。因为K是和我一个高中的，当时候去交录取通知书的时候遇到了她，我期初没注意她，她打招呼之后我才意识到是她，她那天穿衣风格和驾校里看到的很不一样。后来开学之后我们仍然频繁的联系着，互相分享生活中的日常。记得有一次她讲她舍友被锁在门外了，还挺有意思的。然后她们早上有打太极的传统，我以外这玩意跟我们没啥关系，后来我错了，我们后来也开设了太极的课程。那时候除了文字上的聊天，也经常和K进行语音聊天，聊最近遇到的事情，聊舍友关系之类的，平均每次时间两个小时左右。我记得那时候我晚上洗澡的功夫都有很大的可能性收到语音通话。然后K还特别喜欢要我的照片，我记得有一次QQ搞了个什么手势表情红包，然后我跟他吐槽这个。过了一会，她给我发了个比心的手势表情红包，我照做了，然后也给她发了个，没想到她领完红包就把她自己做的表情撤回了。 我和她也干出那种我四五张照片换她一段视频这种很奇怪的操作，后来我感觉没意思就把她的视频删了，那段视频是她舍友给她P的一个打太极的视频，不知道她把我发的照片是如何处理的。大一过年的时候，她给我发了个5.20元的红包，我问她这是啥意思，她说这是爸爸对你的爱。后来我回老家多时候，有一段时间没有和她聊天，她就问我小X同学是不是找对象了，她那时候特别喜欢叫我小X同学，然后我也叫她小X同学。除此之外，她还特别喜欢让我喊她爸爸，对于这种要求我自然一次也没有满足过她。然后有一次她给我发来一首歌，叫做大花轿，让我唱给她听，我听了听这首歌感觉有点奇怪，于是我果断拒绝了。后来六一儿童节，给她买了个零食大礼包。 有时候节假日我们也互相发红包，我发十块她回发七块的那种。暑假回来考驾照的时候，她也要考，当时送给了她我的一只小黄鸭，因为人比较多的缘故，我悄悄塞进了她电动车里，我回去之后她说谢谢我的小黄鸭，很可爱。再后来聊天频率有所降低，应该是我自身的原因。然后她去实习了聊天频率变得更低。最后，聊天的频率变成了只说特别重要的事情以及一年一度的新年快乐。最近一年和K的聊天中我说了我可能会一直单身下去，然后K说一直单身挺好的。希望K以后能快快乐乐。</p><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>L是我好友中本科学历最高的。印象中的L是一个圆脸扎马尾的女生。L也是考驾照认识的，不过在此之前和L没有什么人生交集。那时候学驾照的时候经常和K和其他几个朋友聊天，因为不认识L的缘故也没给她说过话，也不知道她叫啥。不过有件事我印象比较深刻，当时我练习倒车入库，然后L一直在拍我，搞得我很紧张，这也是第一次对这个女生有印象。再之后我们都挂了好几次科目三，就一起考了好几次科三。去考试模拟的时候，教练让我喊女生门，当时我只看到L于是这是我们第一次说话。再之后的一次补考中，有一个人突然加我，问我教练去了没有，我看那个姓名以外是我另一个同学,那个同学和她名字差一个字，然后那个同学不怎么来驾校，我就说教练去了，让她赶紧来吧。然后我过了一会发现她没来，于是我问她在哪里，她说在我后面，那瞬间有点尴尬。 毕竟一起考了这么多次，我还认错了。之后和她在微信里聊了聊，然后我了解到211也有摆烂的，不免有些羡慕她们的环境，以及愤恨她舍友不珍惜。然后基本每次聊天她都会分享一些生活上的事情，比如刮大风下大雨这种的。然后我找她基本都是说我又挂科三了，每次都延展出不少话题。和L从认识到现在也就那次教练让我喊女生的时候在现实中说过话，其他时候都是在微信上聊天的，从在学车时候的状态能看出来L不是一个外向的人。希望L以后能学有所成吧。</p><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>M是我专科同学，不过认识M是在入学之前。当时在贴吧里寻找同班的朋友，结果找到了M，比较巧合的是和M是从同一个省份考到了我们那个高中。然后就和M聊的挺投机的，分享日常生活，聊开学的畅想，对这个专业的想法之类的。我们专科需要高中学校把自己的档案寄给学校，因为一些比较复杂的原因，当时M并没有这个档案，然后她就去学校要自己的档案，学校没怎么搭理她。因为是同一个省份，这些资料自然也是差不多，我就告诉她档案里就一本东西，记录了你的成绩，老师对你评价之类的，你去学校要这个再要个档案封面就可以了。然后她照着我说的，就解决了档案的问题，那时候就感觉M处理一些事情有些奇怪，有些不怎么动脑子。然后我记得有一次聊到啥了，她突然给我唱了首歌，歌词里有“以后那么多的忧伤，那么多的凄凉，只有我一个人阻挡”然后就这样互相了解，当时她讲和我三观好契合，不过后来的一些事情证明我和她的三观并不契合。就这样，聊了一个暑假，期间我们也互相发了各自的照片，就到了开学的时候，然后我当时说可以去帮你拿一下东西，结果到校之后就不怎么理我了，因为开学事情比较多也没怎么当回事。后来，举行了班上新同学第一次见面会，让每个同学上台介绍自己，那时候第一次在现实中见到了M，只能说网络上的照片不能信。之后就是军训，然后我和M依然保持着联系，然后她舍友居然都知道我了，那时候我第一次意识到给女生说的事情可能会让她身边所有人知道。军训期间可能大家高中时期压抑太久的缘故，我们宿舍约了班上女生宿舍吃了几顿饭，然后因为我舍友和她舍友都觉得我俩比较合适，就一直在撮合。当时感觉相当的尴尬，也不好拒绝他们，就按照他们让我做的，就做了。然后那顿饭我舍友给他们讲说是我请他们的。军训之后按照学校的老传统，要完成一个小小的测试，不过测试题的答案提前给我们发了，测试也是开卷的，做完了就可以放国庆节了。做完这个测试之后我和M以及M的一个闺蜜去了当地的一个古街，明显的感觉就是在现实中并没有那么多话题可以聊，然后我提议蹬自行车回来，然后我们就一起蹬自行车回来的。过了几天我突然想蹬自行车玩，然后我就在十一假期的时候骑着共享单车找我在旁边城市的朋友了。当天早上出发的，下午三四点多我就到了。然后在和我朋友吃饭的时候，她突然给我发语音说想请我吃饭，我说我不在这个城市，我没办法来。然后比较戏剧性的一幕出现了，晚上的时候，她心情比较emo晚上在操场哭，然后我舍友正好在操场散步，其中一个舍友就在安慰她，安慰了很久。我也不知道当天晚上发生了啥，反正我回来之后她和我舍友就很熟了（这个舍友叫Z吧，后面会经常引用）。正式上课之后，除了上课时间，其他时间经常看不见舍友。然后因为当时我们宿舍和军训的教官玩的比较好，就经常和教官一起吃饭，当时教官和我们宿舍的其他舍友就说Z抢了她，当时感觉更尴尬，我就说没有，我对她没意思。有一次Z买了螃蟹，打算叫上M以及当时我另一个舍友的女朋友一起来我们宿舍吃螃蟹。结果因为和她同行的那个女生因为个子是在不向、像男生，被阿姨拦下了没有进来，然后当时进来的是她们宿舍的一个刚和男朋友分手的女生（这个女生叫做N，下一个故事就是她）然后我们当时对N的印象不是很好，就心里多少有点膈应。当时除了螃蟹以外，我们也买了一些火锅食材，两箱啤酒。当时Z带着M进来宿舍楼的，然后他们安排我带着N进来的，当时楼道里有其他男生看到我带着女生进楼道，然后就在说“卧槽，牛逼呀，兄弟”，当时感觉十分尴尬。因为有N的缘故，当天晚上我们吃的很不开心，然后当时我大概喝了六瓶啤酒，然后居然没有醉的反应。因为女生宿舍太晚会锁楼的缘故，那晚那俩女生在我们宿舍待了整整一晚。直到五六点的时候，因为我其他舍友状态不是特别好，然后就又是我和另一个舍友送她们俩回的宿舍。当时送到他们回去的时候没感觉到啥，回来的路上挂了点风，当时没觉得这有啥，也顺利的回到了宿舍，然后当时还是感觉很无语，就又干了两瓶啤酒。然后就上床了，第二天早上才发现我在床上的时候，乱发消息给别人了。在之后M和Z经常牵着手在我们那个城市转悠，当年的冬至的时候，M想吃饺子，就叫上了我和Z一起去找个饺子馆吃饺子。在那之后，她俩时不时叫我一起出去玩，我都没有拒绝，那几个月没少当电灯泡。除了出去玩，她也经常喊我和Z一起去图书馆学习，不知道班上其他女生咋想的，每次我们仨去图书馆的时候，最后往往过了一会班上其他女生都会来。再之后M和Z分分合合好多次，然后M依然时不时找我。直到最后M和Z彻底分手了。她们分手之后，M又谈了三四个男友，每段感情都是三四个月左右，再往后频率就变成了一个月一个。时间来到了大三，万万没想到的是学校突然让我们离开学校，因为宿舍不够用。然后我们并不打算回家，当时我们仨都打算考本科。然后我就和Z以及班上另一个男生合租了，在我们合租之前，M邀请我和Z一起合租，我们都果断拒绝了。然后当时M很执着的想实习和升本都不放弃（后来证明没啥关系，我和M考的一个层次的本科，Z没考上），她就找了个工作干着。一开始她是想和当时我们去古街的那个女生合租的，结果不知道啥原因就没同意，然后她就和那个女生关系破裂了。后来我们班上一个小团体打算一起聚餐，M因为前男友来我们这个城市了。她讲必须去见一见，加上三年来其他的问题，M自那以后被班上所有女生孤立。后来和Z说，M这种的，大部分人没办法正常相处，于是我们俩同时删了M和另一个女生（这个女生叫做O）大概过了两个星期，M发现我删了她，找我们共同的一个好友问为啥删她，我让那个朋友说不知道。我记得我之前给M讲过，我会定期删掉一些没有必要留在列表里的人，当时M说我好恐怖，我会不会删掉她，我当时回答的是不一定，最后还是删了她。希望M学业进步吧。</p><h3 id="N"><a href="#N" class="headerlink" title="N"></a>N</h3><p>N是专科中我印象中第一个在班上谈恋爱的，她对象是班上的班长，唱歌挺不错的。她们俩是假期的时候就在聊天、然后就在一起了，不过在一起的时间很短，军训结束了她俩就分了。她们刚分手的时候，机缘巧合当时我舍友吃螃蟹，然后带她进入我们宿舍了。当时她沉浸在刚分手的情绪中，然后带着很重的戾气，当时也搞得我们也不开心。那时候对她的印象就是有点太情绪化了，有点太作了，不怎么想搭理她。和她正式产生交集是上课之后，那时候因为我懂得稍微多一点，所以作业什么的完成的也比较轻松，然后她就经常的问我问题，有时候发消息问我，有时候打电话问我，出于礼貌我一一的回答了。在之后上课的时候，一有机会她就像坐在我旁边，当然旁边基本上都是我舍友。有时候需要做小组作业，她就很积极的找我说想合作，也跟她合作了一次，不过她有点划水。后来有一天，她给我讲想请我吃饭，我帮助她这么多，当时我并不觉得这有啥，也没有想什么回报之类的。对班上所有人我都是这个态度，有忙找我我尽我所能帮忙，没指望任何回报。于是乎我拒绝了她请我吃饭的邀请。当天晚上，回宿舍的时候，发现桌子上多了好多零食，有俩柚子，一盒雀巢咖啡，还有好多零食，差不多有两百块钱。然后才知道她问我舍友我喜欢吃啥，然后托我舍友给我带到宿舍的。然后舍友就起哄说她对我有意思，你可以和她谈谈，她又不差。整个专科期间对N的态度就是回避、拒绝。不过临近毕业的时候对N的印象发生了180度大转弯，她那时候居然是我们班上最正常的几个女生，回想起专科三年的时光，N的成长确实非常的大。后来她说因为自己年龄比较大的原因（比我大一岁）就放弃了升本的想法，早早的去实习了。希望N以后事业有成。</p><h3 id="O"><a href="#O" class="headerlink" title="O"></a>O</h3><p>O是专科在一个老乡群加的，当时她几乎加了群里所有人。不过比较神奇的是，没加和我来自同一个省的舍友，当时舍友还调侃，加所有的，咋没加我呢。然后在我们吃过几次饭之后熟悉起来了。当时得知她高中是体育生，然后她前对象还去过我高中所在的城市。后来的一件事证明她确实没说谎，有一次她喝多了，在马路上跑，我们几个男生去追都没追上。O有一个事情很奇怪，我们吃饭的时候，她每次上厕所的时候都拉着我，让我去厕所门口给她看着。再后来她和我那个她之前没家的舍友谈过几天。开学之后，她经常带零食给我，有些是她送给我的，有些事军训的时候在我前面的一个女生送我的。然后她给我说，那个军训在我前面的女生想认我当爹，让我教她编程，给我弄得相当无语。那时候我就说谎，表示我有对象，这样不合适，不过还是被她识破了。后来她和班上其他宿舍的几个男生玩了一阵子。新学期开学的时候，她和一个我们很熟的朋友弹起来恋爱，那个朋友请我和我那个来自同一省份的舍友以及O一起去KTV唱歌。那天玩的稍微有点大，她当时点了个大花轿，然后我和她一起唱完了大花轿，她对象就在旁边。然后她电脑需要装编程的一些软件，她对象拿过来让我帮忙装的，然后给我带了块阿胶，说实话，那玩意并不好吃。再之后，她因为一些身体上的原因留级了。之后我遇到过她几次，有一次我没认出来，那时候她又找了个新对象。我直接说你这妆画的有点重，我没认出来，然后她打了我一下。再之后零星找过我几次，我好像都以不同的理由拒绝帮忙。然后备考升本的时候，我就和Z一起删了N和O。希望O以后身体健康吧</p>]]></content>
    
    
    <categories>
      
      <category>文学作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>友谊</tag>
      
      <tag>异性朋友</tag>
      
      <tag>单身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数基本问题解释</title>
    <link href="/math/58807/"/>
    <url>/math/58807/</url>
    
    <content type="html"><![CDATA[<h4 id="行列式是在解线性方程组的过程中提出来的。引入行列式的好处"><a href="#行列式是在解线性方程组的过程中提出来的。引入行列式的好处" class="headerlink" title="行列式是在解线性方程组的过程中提出来的。引入行列式的好处?"></a>行列式是在解线性方程组的过程中提出来的。引入行列式的好处?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">可以很方便的求解线性方程组，描述了线性变换对体积造成的影响<br></code></pre></td></tr></table></figure><h4 id="在行列式的计算一节，为什么要学习行列式的性质的意义"><a href="#在行列式的计算一节，为什么要学习行列式的性质的意义" class="headerlink" title="在行列式的计算一节，为什么要学习行列式的性质的意义?"></a>在行列式的计算一节，为什么要学习行列式的性质的意义?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">可以更好的理解行列式的变换<br></code></pre></td></tr></table></figure><h4 id="按行列展开法则的意义"><a href="#按行列展开法则的意义" class="headerlink" title="按行列展开法则的意义?"></a>按行列展开法则的意义?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">可以把高纬展开的问题转换成低纬问题，简化了计算<br></code></pre></td></tr></table></figure><h4 id="克拉莫法求解方程组的局限"><a href="#克拉莫法求解方程组的局限" class="headerlink" title="克拉莫法求解方程组的局限?"></a>克拉莫法求解方程组的局限?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">方程组中未知数的个数不一致或行列式为0则无法使用<br></code></pre></td></tr></table></figure><h4 id="在求解方程组中为什么要引入矩阵"><a href="#在求解方程组中为什么要引入矩阵" class="headerlink" title="在求解方程组中为什么要引入矩阵?"></a>在求解方程组中为什么要引入矩阵?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">使用矩阵可以将方程组的计算转换成矩阵的计算，可以大幅度简化计算<br></code></pre></td></tr></table></figure><h4 id="第二章中对于方程组无穷多解的情况求出一般解就已经得到方程组的解了，第四章为什么还要把一般解表示为通解的形式"><a href="#第二章中对于方程组无穷多解的情况求出一般解就已经得到方程组的解了，第四章为什么还要把一般解表示为通解的形式" class="headerlink" title="第二章中对于方程组无穷多解的情况求出一般解就已经得到方程组的解了，第四章为什么还要把一般解表示为通解的形式?"></a>第二章中对于方程组无穷多解的情况求出一般解就已经得到方程组的解了，第四章为什么还要把一般解表示为通解的形式?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">方程组中的解是不唯一的，一般解是通解中的一个<br></code></pre></td></tr></table></figure><h4 id="在解方程组中将增广矩阵化为行阶梯形也可以求解，为什么还要化为行最简形"><a href="#在解方程组中将增广矩阵化为行阶梯形也可以求解，为什么还要化为行最简形" class="headerlink" title="在解方程组中将增广矩阵化为行阶梯形也可以求解，为什么还要化为行最简形?"></a>在解方程组中将增广矩阵化为行阶梯形也可以求解，为什么还要化为行最简形?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">行阶梯型矩阵需要回代才能求出最终解，行最简形不需要<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>追影计划</title>
    <link href="/routine/17707/"/>
    <url>/routine/17707/</url>
    
    <content type="html"><![CDATA[<h4 id="01-瑞克和莫蒂第五季"><a href="#01-瑞克和莫蒂第五季" class="headerlink" title="(01)瑞克和莫蒂第五季"></a><del>(01)瑞克和莫蒂第五季</del></h4><h4 id="02-绝命毒师三四五季"><a href="#02-绝命毒师三四五季" class="headerlink" title="(02)绝命毒师三四五季"></a>(02)绝命毒师三四五季</h4><h4 id="03-以吾之名"><a href="#03-以吾之名" class="headerlink" title="(03)以吾之名"></a><del>(03)以吾之名</del></h4><h4 id="04-毒液一、二"><a href="#04-毒液一、二" class="headerlink" title="(04)毒液一、二"></a>(04)毒液一、二</h4><h4 id="05-赌博默示录二、三"><a href="#05-赌博默示录二、三" class="headerlink" title="(05)赌博默示录二、三"></a><del>(05)赌博默示录二、三</del></h4><h4 id="06-死亡笔记一、二"><a href="#06-死亡笔记一、二" class="headerlink" title="(06)死亡笔记一、二"></a><del>(06)死亡笔记一、二</del></h4><h4 id="07-死神来了系列"><a href="#07-死神来了系列" class="headerlink" title="(07)死神来了系列"></a>(07)死神来了系列</h4><h4 id="08-黑客帝国系列"><a href="#08-黑客帝国系列" class="headerlink" title="(08)黑客帝国系列"></a>(08)黑客帝国系列</h4><h4 id="09-天书奇谈（4k重制版）"><a href="#09-天书奇谈（4k重制版）" class="headerlink" title="(09)天书奇谈（4k重制版）"></a><del>(09)天书奇谈（4k重制版）</del></h4><h4 id="10-迪迦奥特曼（最终圣战）"><a href="#10-迪迦奥特曼（最终圣战）" class="headerlink" title="(10)迪迦奥特曼（最终圣战）"></a><del>(10)迪迦奥特曼（最终圣战）</del></h4><h4 id="11-某一天"><a href="#11-某一天" class="headerlink" title="(11)某一天"></a>(11)某一天</h4><h4 id="12-暮光之城系列"><a href="#12-暮光之城系列" class="headerlink" title="(12)暮光之城系列"></a>(12)暮光之城系列</h4><h4 id="13-风骚律师系列"><a href="#13-风骚律师系列" class="headerlink" title="(13)风骚律师系列"></a>(13)风骚律师系列</h4>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动漫</tag>
      
      <tag>电影</tag>
      
      <tag>电视剧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北理电信圣经</title>
    <link href="/teasing/42883/"/>
    <url>/teasing/42883/</url>
    
    <content type="html"><![CDATA[<p>电子信息、通信专业必修视频</p> <div style="position: relative; padding: 40% 45%;"> <iframe src="//player.bilibili.com/player.html?aid=934978627&amp;bvid=BV1XM4y1c7Jp&amp;cid=464171873&amp;page=1" scrolling="no" border="0" frameborder="no"          framespacing="0" allowfullscreen="true"          style="position: absolute; width: 100%;          height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    <categories>
      
      <category>吐槽专区</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息工程</tag>
      
      <tag>电子信息</tag>
      
      <tag>通信工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语期末-名词解释</title>
    <link href="/foreign/8332/"/>
    <url>/foreign/8332/</url>
    
    <content type="html"><![CDATA[<h5 id="Space-shuttle-航天飞机"><a href="#Space-shuttle-航天飞机" class="headerlink" title="Space shuttle 航天飞机"></a>Space shuttle 航天飞机</h5><h5 id="orbiter-轨道器"><a href="#orbiter-轨道器" class="headerlink" title="orbiter 轨道器"></a>orbiter 轨道器</h5><h5 id="external-fuel-tank-燃料外贮箱"><a href="#external-fuel-tank-燃料外贮箱" class="headerlink" title="external fuel tank 燃料外贮箱"></a>external fuel tank 燃料外贮箱</h5><h5 id="SRBs-固体（燃料）助推器"><a href="#SRBs-固体（燃料）助推器" class="headerlink" title="SRBs 固体（燃料）助推器"></a>SRBs 固体（燃料）助推器</h5><h5 id="O-ring-seal-密封橡胶圈"><a href="#O-ring-seal-密封橡胶圈" class="headerlink" title="O-ring seal 密封橡胶圈"></a>O-ring seal 密封橡胶圈</h5><h5 id="Soint-结合处"><a href="#Soint-结合处" class="headerlink" title="Soint 结合处"></a>Soint 结合处</h5><h5 id="by-product-副产物"><a href="#by-product-副产物" class="headerlink" title="by-product 副产物"></a>by-product 副产物</h5><h5 id="brittle-易碎的"><a href="#brittle-易碎的" class="headerlink" title="brittle 易碎的"></a>brittle 易碎的</h5><h5 id="Prematurely-过早的"><a href="#Prematurely-过早的" class="headerlink" title="Prematurely 过早的"></a>Prematurely 过早的</h5><h5 id="mass-production-批量生产"><a href="#mass-production-批量生产" class="headerlink" title="mass production 批量生产"></a>mass production 批量生产</h5><h5 id="piece-work-计件工作"><a href="#piece-work-计件工作" class="headerlink" title="piece work 计件工作"></a>piece work 计件工作</h5><h5 id="assembly-lines-流水线"><a href="#assembly-lines-流水线" class="headerlink" title="assembly lines 流水线"></a>assembly lines 流水线</h5><h5 id="poor-workmanship-低劣的手艺"><a href="#poor-workmanship-低劣的手艺" class="headerlink" title="poor workmanship 低劣的手艺"></a>poor workmanship 低劣的手艺</h5><h5 id="sampling-system-采样系统"><a href="#sampling-system-采样系统" class="headerlink" title="sampling system 采样系统"></a>sampling system 采样系统</h5><h5 id="random-sampling-随机抽样"><a href="#random-sampling-随机抽样" class="headerlink" title="random sampling 随机抽样"></a>random sampling 随机抽样</h5><h5 id="quality-control-and-quality-engineering-流量控制与质量工程"><a href="#quality-control-and-quality-engineering-流量控制与质量工程" class="headerlink" title="quality control and quality engineering 流量控制与质量工程"></a>quality control and quality engineering 流量控制与质量工程</h5><h5 id="cross-functional-approach-跨部门方法"><a href="#cross-functional-approach-跨部门方法" class="headerlink" title="cross-functional approach 跨部门方法"></a>cross-functional approach 跨部门方法</h5><h5 id="statistical-process-control-统计过程控制"><a href="#statistical-process-control-统计过程控制" class="headerlink" title="statistical process control 统计过程控制"></a>statistical process control 统计过程控制</h5><h5 id="finished-items-成品"><a href="#finished-items-成品" class="headerlink" title="finished items 成品"></a>finished items 成品</h5><h5 id="tele-communications-电子通讯"><a href="#tele-communications-电子通讯" class="headerlink" title="tele communications 电子通讯"></a>tele communications 电子通讯</h5><h5 id="R-amp-D-intensity-研发强度"><a href="#R-amp-D-intensity-研发强度" class="headerlink" title="R&amp;D intensity 研发强度"></a>R&amp;D intensity 研发强度</h5><h5 id="cross-functional-跨职能"><a href="#cross-functional-跨职能" class="headerlink" title="cross functional 跨职能"></a>cross functional 跨职能</h5><h5 id="obsolete-product-过时产品"><a href="#obsolete-product-过时产品" class="headerlink" title="obsolete product 过时产品"></a>obsolete product 过时产品</h5><h5 id="space-exploration-太空探索"><a href="#space-exploration-太空探索" class="headerlink" title="space exploration 太空探索"></a>space exploration 太空探索</h5><h5 id="national-Science-Foundation-美国国家科学基金会"><a href="#national-Science-Foundation-美国国家科学基金会" class="headerlink" title="national Science Foundation 美国国家科学基金会"></a>national Science Foundation 美国国家科学基金会</h5><h5 id="private-industries-私营企业"><a href="#private-industries-私营企业" class="headerlink" title="private industries 私营企业"></a>private industries 私营企业</h5><h5 id="applied-sciences-应用科学"><a href="#applied-sciences-应用科学" class="headerlink" title="applied sciences 应用科学"></a>applied sciences 应用科学</h5><h5 id="R-amp-D-expenditure-研发支出"><a href="#R-amp-D-expenditure-研发支出" class="headerlink" title="R&amp;D expenditure 研发支出"></a>R&amp;D expenditure 研发支出</h5><h5 id="cost-effective-具有成本效益的-性价比高的"><a href="#cost-effective-具有成本效益的-性价比高的" class="headerlink" title="cost-effective 具有成本效益的/性价比高的"></a>cost-effective 具有成本效益的/性价比高的</h5><h5 id="time-consuming-耗时"><a href="#time-consuming-耗时" class="headerlink" title="time-consuming 耗时"></a>time-consuming 耗时</h5><h5 id="up-to-date-最新"><a href="#up-to-date-最新" class="headerlink" title="up-to-date 最新"></a>up-to-date 最新</h5><h5 id="a-logical-sequence-逻辑顺序"><a href="#a-logical-sequence-逻辑顺序" class="headerlink" title="a logical sequence 逻辑顺序"></a>a logical sequence 逻辑顺序</h5><h5 id="the-origins-of-industrial-design-工业设计的起源"><a href="#the-origins-of-industrial-design-工业设计的起源" class="headerlink" title="the origins of industrial design 工业设计的起源"></a>the origins of industrial design 工业设计的起源</h5><h5 id="an-emphasis-an-impersonality-强调大众化"><a href="#an-emphasis-an-impersonality-强调大众化" class="headerlink" title="an emphasis an impersonality 强调大众化"></a>an emphasis an impersonality 强调大众化</h5><h5 id="artifically-auelerated-obsolescence-人为加速产品的淘汰"><a href="#artifically-auelerated-obsolescence-人为加速产品的淘汰" class="headerlink" title="artifically auelerated obsolescence 人为加速产品的淘汰"></a>artifically auelerated obsolescence 人为加速产品的淘汰</h5><h5 id="the-role-of-art-in-design-设计中的艺术"><a href="#the-role-of-art-in-design-设计中的艺术" class="headerlink" title="the role of art in design 设计中的艺术"></a>the role of art in design 设计中的艺术</h5><h5 id="classis-of-industrial-design-经典的工业设计"><a href="#classis-of-industrial-design-经典的工业设计" class="headerlink" title="classis of industrial design 经典的工业设计"></a>classis of industrial design 经典的工业设计</h5><h5 id="trilemma-三难困境"><a href="#trilemma-三难困境" class="headerlink" title="trilemma 三难困境"></a>trilemma 三难困境</h5><h5 id="compromises-妥协"><a href="#compromises-妥协" class="headerlink" title="compromises 妥协"></a>compromises 妥协</h5><h5 id="leak-泄露"><a href="#leak-泄露" class="headerlink" title="leak 泄露"></a>leak 泄露</h5><h5 id="precision-精密度"><a href="#precision-精密度" class="headerlink" title="precision 精密度"></a>precision 精密度</h5><h5 id="efficient-use-of-energy-节能"><a href="#efficient-use-of-energy-节能" class="headerlink" title="efficient use of energy 节能"></a>efficient use of energy 节能</h5><h5 id="customer-feed-back-顾客反馈"><a href="#customer-feed-back-顾客反馈" class="headerlink" title="customer feed back 顾客反馈"></a>customer feed back 顾客反馈</h5><h5 id="modules-and-subassemblies-模块组件"><a href="#modules-and-subassemblies-模块组件" class="headerlink" title="modules and subassemblies 模块组件"></a>modules and subassemblies 模块组件</h5><h5 id="comparetive-tasting-性能对比测试"><a href="#comparetive-tasting-性能对比测试" class="headerlink" title="comparetive tasting 性能对比测试"></a>comparetive tasting 性能对比测试</h5><h5 id="value-for-money-性价比"><a href="#value-for-money-性价比" class="headerlink" title="value for money 性价比"></a>value for money 性价比</h5><h5 id="technical-and-objective-practical-and-subjective"><a href="#technical-and-objective-practical-and-subjective" class="headerlink" title="technical and objective practical and subjective"></a>technical and objective practical and subjective</h5><h5 id="技术性的-客观的-实践的-主观的"><a href="#技术性的-客观的-实践的-主观的" class="headerlink" title="技术性的 客观的 实践的 主观的"></a>技术性的 客观的 实践的 主观的</h5><h5 id="head-to-head-点对点"><a href="#head-to-head-点对点" class="headerlink" title="head-to-head 点对点"></a>head-to-head 点对点</h5><h5 id="features-特性"><a href="#features-特性" class="headerlink" title="features 特性"></a>features 特性</h5><h5 id="effciency-效率-effectiveness-效果-productivity-生产力"><a href="#effciency-效率-effectiveness-效果-productivity-生产力" class="headerlink" title="effciency 效率 effectiveness 效果 productivity 生产力"></a>effciency 效率 effectiveness 效果 productivity 生产力</h5><h5 id="profitablity-盈利能力"><a href="#profitablity-盈利能力" class="headerlink" title="profitablity 盈利能力"></a>profitablity 盈利能力</h5><h5 id="competitive-竞争力"><a href="#competitive-竞争力" class="headerlink" title="competitive 竞争力"></a>competitive 竞争力</h5><h5 id="electric-utility-电力公司"><a href="#electric-utility-电力公司" class="headerlink" title="electric utility 电力公司"></a>electric utility 电力公司</h5><h5 id="generator-发电机-despite-尽管"><a href="#generator-发电机-despite-尽管" class="headerlink" title="generator 发电机 despite 尽管"></a>generator 发电机 despite 尽管</h5><h5 id="computer-hard-ware-计算机硬件"><a href="#computer-hard-ware-计算机硬件" class="headerlink" title="computer hard ware 计算机硬件"></a>computer hard ware 计算机硬件</h5><h5 id="transmission-systems-转换器"><a href="#transmission-systems-转换器" class="headerlink" title="transmission systems 转换器"></a>transmission systems 转换器</h5><h5 id="electric-power-电力"><a href="#electric-power-电力" class="headerlink" title="electric power 电力"></a>electric power 电力</h5><h5 id="communications-通讯"><a href="#communications-通讯" class="headerlink" title="communications 通讯"></a>communications 通讯</h5><h5 id="electronic-电子"><a href="#electronic-电子" class="headerlink" title="electronic 电子"></a>electronic 电子</h5><h5 id="rancumm-table-晶体管"><a href="#rancumm-table-晶体管" class="headerlink" title="rancumm table 晶体管"></a>rancumm table 晶体管</h5><h5 id="emits-visible-light-发出可见关"><a href="#emits-visible-light-发出可见关" class="headerlink" title="emits visible light 发出可见关"></a>emits visible light 发出可见关</h5><h5 id="electric-current-电流"><a href="#electric-current-电流" class="headerlink" title="electric current 电流"></a>electric current 电流</h5><h5 id="semiconductors-半导体"><a href="#semiconductors-半导体" class="headerlink" title="semiconductors 半导体"></a>semiconductors 半导体</h5><h5 id="indicator-lights-信号灯"><a href="#indicator-lights-信号灯" class="headerlink" title="indicator lights 信号灯"></a>indicator lights 信号灯</h5><h5 id="alphanumeric-display-数字显示屏"><a href="#alphanumeric-display-数字显示屏" class="headerlink" title="alphanumeric display 数字显示屏"></a>alphanumeric display 数字显示屏</h5><h5 id="compound-混合物"><a href="#compound-混合物" class="headerlink" title="compound 混合物"></a>compound 混合物</h5><h5 id="periodic-table-周期表"><a href="#periodic-table-周期表" class="headerlink" title="periodic table 周期表"></a>periodic table 周期表</h5><h5 id="infrared-radiation-红外线"><a href="#infrared-radiation-红外线" class="headerlink" title="infrared radiation 红外线"></a>infrared radiation 红外线</h5><h5 id="phosphors-荧光粉"><a href="#phosphors-荧光粉" class="headerlink" title="phosphors 荧光粉"></a>phosphors 荧光粉</h5><h5 id="privat-citicen-普通公民"><a href="#privat-citicen-普通公民" class="headerlink" title="privat citicen 普通公民"></a>privat citicen 普通公民</h5><h5 id="safety-turns-急转弯"><a href="#safety-turns-急转弯" class="headerlink" title="safety turns 急转弯"></a>safety turns 急转弯</h5><h5 id="blind-intersections-隐蔽的十字路"><a href="#blind-intersections-隐蔽的十字路" class="headerlink" title="blind intersections 隐蔽的十字路"></a>blind intersections 隐蔽的十字路</h5><h5 id="design-stage-设计阶段"><a href="#design-stage-设计阶段" class="headerlink" title="design stage 设计阶段"></a>design stage 设计阶段</h5><h5 id="emergency-cutoff-switches-紧急开关"><a href="#emergency-cutoff-switches-紧急开关" class="headerlink" title="emergency cutoff switches 紧急开关"></a>emergency cutoff switches 紧急开关</h5>]]></content>
    
    
    <categories>
      
      <category>爱学外语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frp反向代理的基本设置</title>
    <link href="/deploy/26989/"/>
    <url>/deploy/26989/</url>
    
    <content type="html"><![CDATA[<h4 id="服务端设置文件"><a href="#服务端设置文件" class="headerlink" title="服务端设置文件"></a>服务端设置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">8085</span><br></code></pre></td></tr></table></figure><h4 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = 域名或ip<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[emby]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_ip</span> = localhost<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">custom_domains</span> = 域名或ip<br></code></pre></td></tr></table></figure><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./frps</span> -c frps.ini<br></code></pre></td></tr></table></figure><h5 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./frpc</span> -c frpc.ini<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反向代理</tag>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装nps</title>
    <link href="/deploy/15676/"/>
    <url>/deploy/15676/</url>
    
    <content type="html"><![CDATA[<h4 id="新建一个配置目录，存放配置文件，参考"><a href="#新建一个配置目录，存放配置文件，参考" class="headerlink" title="新建一个配置目录，存放配置文件，参考"></a>新建一个配置目录，存放配置文件，参考</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">appname</span> = nps<br><span class="hljs-attr">runmode</span> = dev<br><br><span class="hljs-attr">http_proxy_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">http_proxy_port</span>=<span class="hljs-number">19000</span><br><span class="hljs-attr">https_proxy_port</span>=<span class="hljs-number">19001</span><br><span class="hljs-attr">https_just_proxy</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-attr">https_default_cert_file</span>=conf/server.pem<br><span class="hljs-attr">https_default_key_file</span>=conf/server.key<br><br><span class="hljs-attr">bridge_type</span>=tcp<br><span class="hljs-attr">bridge_port</span>=<span class="hljs-number">19002</span><br><span class="hljs-attr">bridge_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><span class="hljs-attr">public_vkey</span>=<span class="hljs-number">123</span><br><br><span class="hljs-attr">log_level</span>=<span class="hljs-number">7</span><br><br><span class="hljs-attr">web_host</span>=a.o.com<br><span class="hljs-attr">web_username</span>=admin<br><span class="hljs-attr">web_password</span>=admin<br><span class="hljs-attr">web_port</span> = <span class="hljs-number">19003</span><br><span class="hljs-attr">web_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>web_base_url=<br><span class="hljs-attr">web_open_ssl</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">web_cert_file</span>=conf/server.pem<br><span class="hljs-attr">web_key_file</span>=conf/server.key<br><span class="hljs-attr">auth_crypt_key</span> =<span class="hljs-number">1234567887654321</span><br><span class="hljs-attr">allow_user_login</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_user_register</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_user_change_username</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_flow_limit</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_rate_limit</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_tunnel_num_limit</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_local_proxy</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_connection_num_limit</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">allow_multi_ip</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">system_info_display</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">http_cache</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">http_cache_length</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">http_add_origin_header</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="放行19000-19010端口"><a href="#放行19000-19010端口" class="headerlink" title="放行19000-19010端口"></a>放行19000-19010端口</h4><h4 id="运行安装指令"><a href="#运行安装指令" class="headerlink" title="运行安装指令"></a>运行安装指令</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">19000</span>-<span class="hljs-number">19010</span>:<span class="hljs-number">19000</span>-<span class="hljs-number">19010</span> -v <span class="hljs-regexp">/mnt/</span>sdc<span class="hljs-regexp">/nps/</span>conf:<span class="hljs-regexp">/conf --name=nps ffdfgdfg/</span>nps<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nps</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose安装FreshRSS订阅rss</title>
    <link href="/coding/3685/"/>
    <url>/coding/3685/</url>
    
    <content type="html"><![CDATA[<h4 id="首先安装好docker-compose，安装方法：安装docker-compose详细教程"><a href="#首先安装好docker-compose，安装方法：安装docker-compose详细教程" class="headerlink" title="首先安装好docker-compose，安装方法：安装docker-compose详细教程"></a>首先安装好docker-compose，安装方法：<a href="https://cljzhub.xyz/code/76.html">安装docker-compose详细教程</a></h4><h4 id="新建一个合适的目录，里面添加docker-compose-yml文件，内容如下"><a href="#新建一个合适的目录，里面添加docker-compose-yml文件，内容如下" class="headerlink" title="新建一个合适的目录，里面添加docker-compose.yml文件，内容如下"></a>新建一个合适的目录，里面添加docker-compose.yml文件，内容如下</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ~/freshrss/docker-compose.yml</span><br><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">freshrss-db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">freshrss-db</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">freshrss-db</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">freshrss-db:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">freshrss</span><br>      <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">freshrss</span><br>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">freshrss</span><br><br>  <span class="hljs-attr">freshrss-app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">freshrss/freshrss:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">freshrss-app</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">freshrss-app</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:80&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">freshrss-db</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/var/www/FreshRSS/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./extensions:/var/www/FreshRSS/extensions</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">CRON_MIN:</span> <span class="hljs-string">&#x27;*/45&#x27;</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">freshrss-db:</span><br></code></pre></td></tr></table></figure><h5 id="其中POSTGRES是关于数据库的配置，需要自行修改。ports是端口的设置，8080端口可以修改为自己需要的端口"><a href="#其中POSTGRES是关于数据库的配置，需要自行修改。ports是端口的设置，8080端口可以修改为自己需要的端口" class="headerlink" title="其中POSTGRES是关于数据库的配置，需要自行修改。ports是端口的设置，8080端口可以修改为自己需要的端口"></a>其中POSTGRES是关于数据库的配置，需要自行修改。ports是端口的设置，8080端口可以修改为自己需要的端口</h5><h4 id="修改完成后执行以下命令："><a href="#修改完成后执行以下命令：" class="headerlink" title="修改完成后执行以下命令："></a>修改完成后执行以下命令：</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><h4 id="然后就可以用ip-端口进行访问，设置相关的信息"><a href="#然后就可以用ip-端口进行访问，设置相关的信息" class="headerlink" title="然后就可以用ip+端口进行访问，设置相关的信息"></a>然后就可以用ip+端口进行访问，设置相关的信息</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>freshrss</tag>
      
      <tag>rss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装docker-compose详细教程</title>
    <link href="/deploy/24813/"/>
    <url>/deploy/24813/</url>
    
    <content type="html"><![CDATA[<h4 id="前提：安装好docker"><a href="#前提：安装好docker" class="headerlink" title="前提：安装好docker"></a>前提：安装好docker</h4><h4 id="执行以下指令进行安装："><a href="#执行以下指令进行安装：" class="headerlink" title="执行以下指令进行安装："></a>执行以下指令进行安装：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="赋予可执行权限"><a href="#赋予可执行权限" class="headerlink" title="赋予可执行权限"></a>赋予可执行权限</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <span class="hljs-regexp">/usr/</span>bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="验证是否安装成功，输出版本号则安装成功"><a href="#验证是否安装成功，输出版本号则安装成功" class="headerlink" title="验证是否安装成功，输出版本号则安装成功"></a>验证是否安装成功，输出版本号则安装成功</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 关闭 Docker 容器们</span><br>docker-compose down<br><br><span class="hljs-meta"># 删除已停止的 Docker 容器</span><br>docker-compose rm<br><br><span class="hljs-meta"># 再次开启 Docker 服务</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加基于NoneBot+go-cqhttp的QQ机器人</title>
    <link href="/deploy/55917/"/>
    <url>/deploy/55917/</url>
    
    <content type="html"><![CDATA[<h3 id="一：安装go-cqhttp"><a href="#一：安装go-cqhttp" class="headerlink" title="一：安装go-cqhttp"></a>一：安装go-cqhttp</h3><h4 id="①选择合适的版本：go-cqhttp-Nonebot2搭建-QQ-机器人"><a href="#①选择合适的版本：go-cqhttp-Nonebot2搭建-QQ-机器人" class="headerlink" title="①选择合适的版本：go-cqhttp + Nonebot2搭建 QQ 机器人"></a>①选择合适的版本：<a href="https://www.boxmoe.com/522.html">go-cqhttp + Nonebot2搭建 QQ 机器人</a></h4><p><img src="https://cljzhub.xyz/images/pic/20211214224506.png"></p><h4 id="②github项目目录：go-cqhttp"><a href="#②github项目目录：go-cqhttp" class="headerlink" title="②github项目目录：go-cqhttp"></a>②github项目目录：<a href="https://github.com/Mrs4s/go-cqhttp/releases">go-cqhttp</a></h4><h4 id="②解压到一个目录中，进入该目录后执行以下指令之后会生成config-yml"><a href="#②解压到一个目录中，进入该目录后执行以下指令之后会生成config-yml" class="headerlink" title="②解压到一个目录中，进入该目录后执行以下指令之后会生成config.yml"></a>②解压到一个目录中，进入该目录后执行以下指令之后会生成config.yml</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">./<span class="hljs-keyword">go</span>-cqhttp<br></code></pre></td></tr></table></figure><h4 id="③config-yml的详细配置，只需要把里面QQ账号添加成机器人的号码即可"><a href="#③config-yml的详细配置，只需要把里面QQ账号添加成机器人的号码即可" class="headerlink" title="③config.yml的详细配置，只需要把里面QQ账号添加成机器人的号码即可"></a>③config.yml的详细配置，只需要把里面QQ账号添加成机器人的号码即可</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># go-cqhttp 默认配置文件</span><br><br><span class="hljs-attr">account:</span> <span class="hljs-comment"># 账号相关</span><br>  <span class="hljs-attr">uin:</span>   <span class="hljs-comment"># QQ账号</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 密码为空时使用扫码登录</span><br>  <span class="hljs-attr">encrypt:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否开启密码加密</span><br>  <span class="hljs-attr">status:</span> <span class="hljs-number">0</span>      <span class="hljs-comment"># 在线状态 请参考 https://docs.go-cqhttp.org/guide/config.html#在线状态</span><br>  <span class="hljs-attr">relogin:</span> <span class="hljs-comment"># 重连设置</span><br>    <span class="hljs-attr">delay:</span> <span class="hljs-number">3</span>   <span class="hljs-comment"># 首次重连延迟, 单位秒</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">3</span>   <span class="hljs-comment"># 重连间隔</span><br>    <span class="hljs-attr">max-times:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 最大重连次数, 0为无限制</span><br><br>  <span class="hljs-comment"># 是否使用服务器下发的新地址进行重连</span><br>  <span class="hljs-comment"># 注意, 此设置可能导致在海外服务器上连接情况更差</span><br>  <span class="hljs-attr">use-sso-address:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">heartbeat:</span><br>  <span class="hljs-comment"># 心跳频率, 单位秒</span><br>  <span class="hljs-comment"># -1 为关闭心跳</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-number">5</span><br><br><span class="hljs-attr">message:</span><br>  <span class="hljs-comment"># 上报数据类型</span><br>  <span class="hljs-comment"># 可选: string,array</span><br>  <span class="hljs-attr">post-format:</span> <span class="hljs-string">array</span><br>  <span class="hljs-comment"># 是否忽略无效的CQ码, 如果为假将原样发送</span><br>  <span class="hljs-attr">ignore-invalid-cqcode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 是否强制分片发送消息</span><br>  <span class="hljs-comment"># 分片发送将会带来更快的速度</span><br>  <span class="hljs-comment"># 但是兼容性会有些问题</span><br>  <span class="hljs-attr">force-fragment:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 是否将url分片发送</span><br>  <span class="hljs-attr">fix-url:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 下载图片等请求网络代理</span><br>  <span class="hljs-attr">proxy-rewrite:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># 是否上报自身消息</span><br>  <span class="hljs-attr">report-self-message:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 移除服务端的Reply附带的At</span><br>  <span class="hljs-attr">remove-reply-at:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 为Reply附加更多信息</span><br>  <span class="hljs-attr">extra-reply-data:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 跳过 Mime 扫描, 忽略错误数据</span><br>  <span class="hljs-attr">skip-mime-scan:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">output:</span><br>  <span class="hljs-comment"># 日志等级 trace,debug,info,warn,error</span><br>  <span class="hljs-attr">log-level:</span> <span class="hljs-string">warn</span><br>  <span class="hljs-comment"># 日志时效 单位天. 超过这个时间之前的日志将会被自动删除. 设置为 0 表示永久保留.</span><br>  <span class="hljs-attr">log-aging:</span> <span class="hljs-number">15</span><br>  <span class="hljs-comment"># 是否在每次启动时强制创建全新的文件储存日志. 为 false 的情况下将会在上次启动时创建的日志文件续写</span><br>  <span class="hljs-attr">log-force-new:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 是否启用日志颜色</span><br>  <span class="hljs-attr">log-colorful:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 是否启用 DEBUG</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 开启调试模式</span><br><br><span class="hljs-comment"># 默认中间件锚点</span><br><span class="hljs-attr">default-middlewares:</span> <span class="hljs-meta">&amp;default</span><br>  <span class="hljs-comment"># 访问密钥, 强烈推荐在公网的服务器设置</span><br>  <span class="hljs-attr">access-token:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># 事件过滤器文件目录</span><br>  <span class="hljs-attr">filter:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># API限速设置</span><br>  <span class="hljs-comment"># 该设置为全局生效</span><br>  <span class="hljs-comment"># 原 cqhttp 虽然启用了 rate_limit 后缀, 但是基本没插件适配</span><br>  <span class="hljs-comment"># 目前该限速设置为令牌桶算法, 请参考:</span><br>  <span class="hljs-comment"># https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin</span><br>  <span class="hljs-attr">rate-limit:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否启用限速</span><br>    <span class="hljs-attr">frequency:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 令牌回复频率, 单位秒</span><br>    <span class="hljs-attr">bucket:</span> <span class="hljs-number">1</span>     <span class="hljs-comment"># 令牌桶大小</span><br><br><span class="hljs-attr">database:</span> <span class="hljs-comment"># 数据库相关设置</span><br>  <span class="hljs-attr">leveldb:</span><br>    <span class="hljs-comment"># 是否启用内置leveldb数据库</span><br>    <span class="hljs-comment"># 启用将会增加10-20MB的内存占用和一定的磁盘空间</span><br>    <span class="hljs-comment"># 关闭将无法使用 撤回 回复 get_msg 等上下文相关功能</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 媒体文件缓存， 删除此项则使用缓存文件(旧版行为)</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">data/image.db</span><br>    <span class="hljs-attr">video:</span> <span class="hljs-string">data/video.db</span><br><br><span class="hljs-comment"># 连接服务列表</span><br><span class="hljs-attr">servers:</span><br>  <span class="hljs-comment"># 添加方式，同一连接方式可添加多个，具体配置说明请查看文档</span><br>  <span class="hljs-comment">#- http: # http 通信</span><br>  <span class="hljs-comment">#- ws:   # 正向 Websocket</span><br>  <span class="hljs-comment">#- ws-reverse: # 反向 Websocket</span><br>  <span class="hljs-comment">#- pprof: #性能分析服务器</span><br>  <span class="hljs-comment"># HTTP 通信设置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>      <span class="hljs-comment"># 服务端监听地址</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>      <span class="hljs-comment"># 服务端监听端口</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">5700</span><br>      <span class="hljs-comment"># 反向HTTP超时时间, 单位秒</span><br>      <span class="hljs-comment"># 最小值为5，小于5将会忽略本项设置</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 长轮询拓展</span><br>      <span class="hljs-attr">long-polling:</span><br>        <span class="hljs-comment"># 是否开启</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># 消息队列大小，0 表示不限制队列大小，谨慎使用</span><br>        <span class="hljs-attr">max-queue-size:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*default</span> <span class="hljs-comment"># 引用默认中间件</span><br>      <span class="hljs-comment"># 反向HTTP POST地址列表</span><br>      <span class="hljs-attr">post:</span><br>      <span class="hljs-comment">#- url: &#x27;&#x27; # 地址</span><br>      <span class="hljs-comment">#  secret: &#x27;&#x27;           # 密钥</span><br>      <span class="hljs-comment">#- url: http://127.0.0.1:5701/ # 地址</span><br>      <span class="hljs-comment">#  secret: &#x27;&#x27;          # 密钥</span><br><br> <span class="hljs-comment"># 反向WS设置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ws-reverse:</span><br>      <span class="hljs-comment"># 反向WS Universal 地址</span><br>      <span class="hljs-comment"># 注意 设置了此项地址后下面两项将会被忽略</span><br>      <span class="hljs-attr">universal:</span> <span class="hljs-string">ws://127.0.0.1:1008/cqhttp/ws</span><br>      <span class="hljs-comment"># 反向WS API 地址</span><br>      <span class="hljs-attr">api:</span> <span class="hljs-string">ws://127.0.0.1:1008/cqhttp/api</span><br>      <span class="hljs-comment"># 反向WS Event 地址</span><br>      <span class="hljs-attr">event:</span> <span class="hljs-string">ws://127.0.0.1:1008/cqhttp/event</span><br>      <span class="hljs-comment"># 重连间隔 单位毫秒</span><br>      <span class="hljs-attr">reconnect-interval:</span> <span class="hljs-number">3000</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*default</span> <span class="hljs-comment"># 引用默认中间件</span><br></code></pre></td></tr></table></figure><h4 id="④重新运行以下指令，并扫码登录QQ"><a href="#④重新运行以下指令，并扫码登录QQ" class="headerlink" title="④重新运行以下指令，并扫码登录QQ"></a>④重新运行以下指令，并扫码登录QQ</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">./<span class="hljs-keyword">go</span>-cqhttp<br></code></pre></td></tr></table></figure><h3 id="二：安装NoneBot"><a href="#二：安装NoneBot" class="headerlink" title="二：安装NoneBot"></a>二：安装NoneBot</h3><h4 id="①安装python3的运行环境（必须大于3-7）"><a href="#①安装python3的运行环境（必须大于3-7）" class="headerlink" title="①安装python3的运行环境（必须大于3.7）"></a>①安装python3的运行环境（必须大于3.7）</h4><h4 id="②执行以下指令安装NoneBot需要的环境"><a href="#②执行以下指令安装NoneBot需要的环境" class="headerlink" title="②执行以下指令安装NoneBot需要的环境"></a>②执行以下指令安装NoneBot需要的环境</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install nb-cli  <span class="hljs-regexp">//</span>用python的pip下载安装<br>pip install nonebot-adapter-cqhttp <span class="hljs-regexp">//</span>安装cqhttp适配器<br></code></pre></td></tr></table></figure><h4 id="③选择一个目录执行以下指令，并按照图中步骤操作"><a href="#③选择一个目录执行以下指令，并按照图中步骤操作" class="headerlink" title="③选择一个目录执行以下指令，并按照图中步骤操作"></a>③选择一个目录执行以下指令，并按照图中步骤操作</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nb</span><br></code></pre></td></tr></table></figure><p><img src="https://cljzhub.xyz/images/pic/20211214225715.png"></p><h5 id="输入项目的名字"><a href="#输入项目的名字" class="headerlink" title="输入项目的名字"></a>输入项目的名字</h5><p><img src="https://cljzhub.xyz/images/pic/20211214225759.png"></p><h5 id="选择src"><a href="#选择src" class="headerlink" title="选择src"></a>选择src</h5><p><img src="https://cljzhub.xyz/images/pic/20211214225913.png"></p><h5 id="输入n"><a href="#输入n" class="headerlink" title="输入n"></a>输入n</h5><p><img src="https://cljzhub.xyz/images/pic/20211214230032.png"></p><h5 id="选择cqhttp"><a href="#选择cqhttp" class="headerlink" title="选择cqhttp"></a>选择cqhttp</h5><p><img src="https://cljzhub.xyz/images/pic/20211214230217.png"></p><h5 id="输入y后结束"><a href="#输入y后结束" class="headerlink" title="输入y后结束"></a>输入y后结束</h5><p><img src="https://cljzhub.xyz/images/pic/20211214230348.png"></p><h4 id="④进入创建好的项目目录，修改bot-py文件内容"><a href="#④进入创建好的项目目录，修改bot-py文件内容" class="headerlink" title="④进入创建好的项目目录，修改bot.py文件内容"></a>④进入创建好的项目目录，修改bot.py文件内容</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> nonebot<br>from nonebot.adapters.cqhttp <span class="hljs-built_in">import</span> Bot as CQHTTPBot<br><br>nonebot.init()<br><span class="hljs-attr">driver</span> = nonebot.get_driver()<br><br><span class="hljs-comment"># 注册 CQHTTP 的 Adapter</span><br>driver.register_adapter(<span class="hljs-string">&quot;cqhttp&quot;</span>, CQHTTPBot)<br><br> <span class="hljs-comment"># 加载 nonebot 内置插件</span><br>nonebot.load_builtin_plugins()<br><span class="hljs-attr">app</span> = nonebot.get_asgi()<br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    nonebot.run()<br></code></pre></td></tr></table></figure><h4 id="⑤修改-env-dev-内容为如下内容"><a href="#⑤修改-env-dev-内容为如下内容" class="headerlink" title="⑤修改.env.dev 内容为如下内容"></a>⑤修改.env.dev 内容为如下内容</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">HOST</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">PORT</span>=<span class="hljs-number">1008</span><br><span class="hljs-attr">DEBUG</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">SUPERUSERS</span>=[<span class="hljs-string">&quot;超级管理员QQ（并非机器人QQ）&quot;</span>]<br><span class="hljs-attr">COMMAND_START</span>=[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>]<br><span class="hljs-attr">NICKNAME</span>=[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>]<br><span class="hljs-attr">COMMAND_SEP</span>=[<span class="hljs-string">&quot;.&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="⑥在项目根目录下执行以下命令启动"><a href="#⑥在项目根目录下执行以下命令启动" class="headerlink" title="⑥在项目根目录下执行以下命令启动"></a>⑥在项目根目录下执行以下命令启动</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">nb <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><h3 id="三：判断是否配置成功，在nonebot执行nb-run后控制台如果有以下信息说明配置成功"><a href="#三：判断是否配置成功，在nonebot执行nb-run后控制台如果有以下信息说明配置成功" class="headerlink" title="三：判断是否配置成功，在nonebot执行nb run后控制台如果有以下信息说明配置成功"></a>三：判断是否配置成功，在nonebot执行nb run后控制台如果有以下信息说明配置成功</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">09</span>-<span class="hljs-number">14</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">16</span><span class="hljs-meta"> [INFO] uvicorn  (&#x27;127.0.0.1&#x27;, 12345) - &quot;WebSocket /cqhttp/ws&quot; [accepted]</span><br><span class="hljs-attribute">09</span>-<span class="hljs-number">14</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">16</span><span class="hljs-meta"> [INFO] nonebot  WebSocket Connection from CQHTTP Bot 你的QQ号 Accepted!</span><br></code></pre></td></tr></table></figure><h4 id="验证是否成功，向机器人发送以下内容，有回复说明成功"><a href="#验证是否成功，向机器人发送以下内容，有回复说明成功" class="headerlink" title="验证是否成功，向机器人发送以下内容，有回复说明成功"></a>验证是否成功，向机器人发送以下内容，有回复说明成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/<span class="hljs-built_in">echo</span> 你好，时间<br></code></pre></td></tr></table></figure><p><img src="https://cljzhub.xyz/images/pic/20211214231402.png"></p><h4 id="常驻后台的方法，让终端退出后仍可以运行，参考文章：Linux程序后台运行，使用screen"><a href="#常驻后台的方法，让终端退出后仍可以运行，参考文章：Linux程序后台运行，使用screen" class="headerlink" title="常驻后台的方法，让终端退出后仍可以运行，参考文章：Linux程序后台运行，使用screen"></a>常驻后台的方法，让终端退出后仍可以运行，参考文章：<a href="https://cljzhub.xyz/deploy/73.html">Linux程序后台运行，使用screen</a></h4><h3 id="四：后续功能添加"><a href="#四：后续功能添加" class="headerlink" title="四：后续功能添加"></a>四：后续功能添加</h3><h4 id="①添加非官方插件的方法，在nonebot创建的项目中的src-plugins里添加自己的插件，机器人Docker中的翻译和天气查询都源自RainMuk-open-雨木机器人开源部分"><a href="#①添加非官方插件的方法，在nonebot创建的项目中的src-plugins里添加自己的插件，机器人Docker中的翻译和天气查询都源自RainMuk-open-雨木机器人开源部分" class="headerlink" title="①添加非官方插件的方法，在nonebot创建的项目中的src/plugins里添加自己的插件，机器人Docker中的翻译和天气查询都源自RainMuk_open 雨木机器人开源部分"></a>①添加非官方插件的方法，在nonebot创建的项目中的src/plugins里添加自己的插件，机器人Docker中的翻译和天气查询都源自<a href="https://gitee.com/raindown/rainmuk_open">RainMuk_open 雨木机器人开源部分</a></h4><h5 id="例如添加天气查询插件，使用的代码来自：RainMuk-open-雨木机器人开源部分"><a href="#例如添加天气查询插件，使用的代码来自：RainMuk-open-雨木机器人开源部分" class="headerlink" title="例如添加天气查询插件，使用的代码来自：RainMuk_open 雨木机器人开源部分"></a>例如添加天气查询插件，使用的代码来自：<a href="https://gitee.com/raindown/rainmuk_open">RainMuk_open 雨木机器人开源部分</a></h5><h5 id="在项目中把如下文件复制到src-plugins中"><a href="#在项目中把如下文件复制到src-plugins中" class="headerlink" title="在项目中把如下文件复制到src/plugins中"></a>在项目中把如下文件复制到src/plugins中</h5><p><img src="https://cljzhub.xyz/images/pic/20211214233500.png"></p><h5 id="修改bot-py文件，修改后如下"><a href="#修改bot-py文件，修改后如下" class="headerlink" title="修改bot.py文件，修改后如下"></a>修改bot.py文件，修改后如下</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> nonebot<br>from nonebot.adapters.cqhttp <span class="hljs-built_in">import</span> Bot as CQHTTPBot<br><br>nonebot.init()<br><span class="hljs-attr">driver</span> = nonebot.get_driver()<br><br><span class="hljs-comment"># 注册 CQHTTP 的 Adapter</span><br>driver.register_adapter(<span class="hljs-string">&quot;cqhttp&quot;</span>, CQHTTPBot)<br><br><span class="hljs-comment"># 加载插件目录，该目录下为各插件，以下划线开头的插件将不会被加载</span><br>nonebot.load_plugins(<span class="hljs-string">&quot;src/plugins&quot;</span>)<br><br> <span class="hljs-comment"># 加载 nonebot 内置插件</span><br>nonebot.load_builtin_plugins()<br><span class="hljs-attr">app</span> = nonebot.get_asgi()<br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    nonebot.run()<br></code></pre></td></tr></table></figure><h5 id="重新运行nonebot"><a href="#重新运行nonebot" class="headerlink" title="重新运行nonebot"></a>重新运行nonebot</h5><h4 id="②添加官方插件的方法，按照插件作者的步骤添加即可，机器人Docker中运行代码和转盘功能都来自官方插件"><a href="#②添加官方插件的方法，按照插件作者的步骤添加即可，机器人Docker中运行代码和转盘功能都来自官方插件" class="headerlink" title="②添加官方插件的方法，按照插件作者的步骤添加即可，机器人Docker中运行代码和转盘功能都来自官方插件"></a>②添加官方插件的方法，按照插件作者的步骤添加即可，机器人Docker中运行代码和转盘功能都来自官方插件</h4><h5 id="官方插件商店：NoneBot商店"><a href="#官方插件商店：NoneBot商店" class="headerlink" title="官方插件商店：NoneBot商店"></a>官方插件商店：<a href="https://v2.nonebot.dev/store.html">NoneBot商店</a></h5>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>QQ</tag>
      
      <tag>go-cqhttp</tag>
      
      <tag>NoneBot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人Docker使用方法</title>
    <link href="/routine/40672/"/>
    <url>/routine/40672/</url>
    
    <content type="html"><![CDATA[<h3 id="一：翻译功能"><a href="#一：翻译功能" class="headerlink" title="一：翻译功能"></a>一：翻译功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">翻译 需要翻译的文本<br></code></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p><img src="https://cljzhub.xyz/images/pic/20211214220747.png"></p><h3 id="二：查天气功能"><a href="#二：查天气功能" class="headerlink" title="二：查天气功能"></a>二：查天气功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">天气 查询的城市<br></code></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p><img src="https://cljzhub.xyz/images/pic/20211214221912.png"></p><h3 id="三：编译代码"><a href="#三：编译代码" class="headerlink" title="三：编译代码"></a>三：编译代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">code</span> <span class="hljs-selector-attr">[语言]</span> <span class="hljs-selector-attr">[-i]</span> <span class="hljs-selector-attr">[inputText]</span><br>这里填写需要编译的代码<br></code></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><h5 id="无参数情况"><a href="#无参数情况" class="headerlink" title="无参数情况"></a>无参数情况</h5><p><img src="https://cljzhub.xyz/images/pic/20211214222139.png"></p><h4 id="有参数情况"><a href="#有参数情况" class="headerlink" title="有参数情况"></a>有参数情况</h4><p><img src="https://cljzhub.xyz/images/pic/20211214223218.png"></p><h3 id="四：俄罗斯轮盘"><a href="#四：俄罗斯轮盘" class="headerlink" title="四：俄罗斯轮盘"></a>四：俄罗斯轮盘</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">获取金币：轮盘签到<br>  <br>  开启游戏：装弹 [子弹数] [金额](默认<span class="hljs-number">200</span>金币) [at](指定决斗对象，为空则所有群友都可接受决斗)<br>          示例：装弹 <span class="hljs-number">1</span> <span class="hljs-number">10</span><br>          <br>  接受对决：接受对决<span class="hljs-regexp">/接受挑战/</span>拒绝决斗/拒绝挑战<br>  <br>  开始对决：开枪<span class="hljs-regexp">/咔/</span>嘭/嘣 [子弹数](默认<span class="hljs-number">1</span>)（轮流开枪，根据子弹数连开N枪，<span class="hljs-number">30</span>秒未开枪另一方可使用‘结算’命令结束对决并胜利）<br>  <br>  结算：结算（当某一方<span class="hljs-number">30</span>秒未开枪，可使用该命令强行结束对决并胜利）<br>  <br>  我的战绩：我的战绩<br>  <br>  我的金币：我的金币<br>  <br>  排行榜：金币排行<span class="hljs-regexp">/胜场排行/</span>败场排行<span class="hljs-regexp">/欧洲人排行/</span>慈善家排行<br>  【注：同一时间群内只能有一场对决】<br></code></pre></td></tr></table></figure><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p><img src="https://cljzhub.xyz/images/pic/20211214223550.png"><br><img src="https://cljzhub.xyz/images/pic/20211214223643.png"></p><h3 id="五：查重功能"><a href="#五：查重功能" class="headerlink" title="五：查重功能"></a>五：查重功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">查重 <br>需要查重的文本<br></code></pre></td></tr></table></figure><h4 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h4><p><img src="https://cljzhub.xyz/images/pic/20211215232153.png"></p>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>QQ</tag>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux程序后台运行，使用screen</title>
    <link href="/deploy/12656/"/>
    <url>/deploy/12656/</url>
    
    <content type="html"><![CDATA[<h4 id="一：创建一个screen"><a href="#一：创建一个screen" class="headerlink" title="一：创建一个screen"></a>一：创建一个screen</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">screen</span> -S 回话名称<br></code></pre></td></tr></table></figure><h4 id="二：在会话里执行需要在后台执行的命令，然后按下CTRL-A-D退出会话"><a href="#二：在会话里执行需要在后台执行的命令，然后按下CTRL-A-D退出会话" class="headerlink" title="二：在会话里执行需要在后台执行的命令，然后按下CTRL+A+D退出会话"></a>二：在会话里执行需要在后台执行的命令，然后按下CTRL+A+D退出会话</h4><h4 id="三：查看所有会话"><a href="#三：查看所有会话" class="headerlink" title="三：查看所有会话"></a>三：查看所有会话</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">screen -ls</span><br></code></pre></td></tr></table></figure><h4 id="四：删除添加的会话，会话id可在ls命令中查看"><a href="#四：删除添加的会话，会话id可在ls命令中查看" class="headerlink" title="四：删除添加的会话，会话id可在ls命令中查看"></a>四：删除添加的会话，会话id可在ls命令中查看</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">screen -X -S 会话<span class="hljs-built_in">id</span> quit <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>screen</tag>
      
      <tag>后台运行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux解决端口占用问题</title>
    <link href="/deploy/33066/"/>
    <url>/deploy/33066/</url>
    
    <content type="html"><![CDATA[<h4 id="一：查看占用端口的进程号"><a href="#一：查看占用端口的进程号" class="headerlink" title="一：查看占用端口的进程号"></a>一：查看占用端口的进程号</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">netstat -anp <span class="hljs-keyword">grep</span> 端口号<br></code></pre></td></tr></table></figure><h4 id="二：使用以下命令关闭该进程"><a href="#二：使用以下命令关闭该进程" class="headerlink" title="二：使用以下命令关闭该进程"></a>二：使用以下命令关闭该进程</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> 进程号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>端口占用</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Drone+Gogs+Docker无坑部署SpringBoot后端程序</title>
    <link href="/deploy/47310/"/>
    <url>/deploy/47310/</url>
    
    <content type="html"><![CDATA[<h3 id="一：在项目的根目录下创建-drone-yml填写构建的配置"><a href="#一：在项目的根目录下创建-drone-yml填写构建的配置" class="headerlink" title="一：在项目的根目录下创建.drone.yml填写构建的配置"></a>一：在项目的根目录下创建.drone.yml填写构建的配置</h3><h4 id="①构建详细配置"><a href="#①构建详细配置" class="headerlink" title="①构建详细配置"></a>①构建详细配置</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> pipeline <span class="hljs-meta"># 定义对象类型，还有secret和signature两种类型</span><br><span class="hljs-symbol">type:</span> docker <span class="hljs-meta"># 定义流水线类型，还有kubernetes、exec、ssh等类型</span><br><span class="hljs-symbol">name:</span> mall-tiny-drone <span class="hljs-meta"># 定义流水线名称</span><br><br><span class="hljs-symbol">steps:</span> <span class="hljs-meta"># 定义流水线执行步骤，这些步骤将顺序执行</span><br>  - name: package <span class="hljs-meta"># 流水线名称</span><br><span class="hljs-symbol">    image:</span> maven:<span class="hljs-number">3</span>-jdk<span class="hljs-number">-8</span> <span class="hljs-meta"># 定义创建容器的Docker镜像</span><br><span class="hljs-symbol">    volumes:</span> <span class="hljs-meta"># 将容器内目录挂载到宿主机，仓库需要开启Trusted设置</span><br>      - name: maven-cache<br><span class="hljs-symbol">        path:</span> <span class="hljs-meta-keyword">/root/</span>.m2 <span class="hljs-meta"># 将maven下载依赖的目录挂载出来，防止重复下载</span><br>      - name: maven-build<br><span class="hljs-symbol">        path:</span> <span class="hljs-meta-keyword">/app/</span>build <span class="hljs-meta"># 将应用打包好的Jar和执行脚本挂载出来</span><br><span class="hljs-symbol">    commands:</span> <span class="hljs-meta"># 定义在Docker容器中执行的shell命令</span><br>      - mvn clean package <span class="hljs-meta"># 应用打包命令</span><br>      - cp target/xxx.jar <span class="hljs-meta-keyword">/app/</span>build/xxx.jar<br>      - cp Dockerfile <span class="hljs-meta-keyword">/app/</span>build/Dockerfile<br>      - cp run.sh <span class="hljs-meta-keyword">/app/</span>build/run.sh<br><br>  - name: build-start<br><span class="hljs-symbol">    image:</span> appleboy/drone-ssh <span class="hljs-meta"># SSH工具镜像</span><br><span class="hljs-symbol">    settings:</span><br><span class="hljs-symbol">      host:</span> **服务器公网ip** <span class="hljs-meta"># 远程连接地址</span><br><span class="hljs-symbol">      username:</span> root <span class="hljs-meta"># 远程连接账号</span><br><span class="hljs-symbol">      password:</span> <br><span class="hljs-symbol">        from_secret:</span> ssh_password <span class="hljs-meta"># 从Secret中读取SSH密码</span><br><span class="hljs-symbol">      port:</span> <span class="hljs-number">22</span> <span class="hljs-meta"># 远程连接端口</span><br><span class="hljs-symbol">      command_timeout:</span> <span class="hljs-number">5</span>m <span class="hljs-meta"># 远程执行命令超时时间</span><br><span class="hljs-symbol">      script:</span><br>        - cd <span class="hljs-meta-keyword">/mydata/</span>maven/build <span class="hljs-meta"># 进入宿主机构建目录</span><br>        - chmod +x run.sh <span class="hljs-meta"># 更改为可执行脚本</span><br>        - ./run.sh <span class="hljs-meta"># 运行脚本打包应用镜像并运行</span><br><br><br><span class="hljs-meta"># 邮箱通知功能</span><br>  - name: notify<br><span class="hljs-symbol">    image:</span> drillster/drone-email<br><span class="hljs-symbol">    settings:</span><br><span class="hljs-symbol">      host:</span> smtp<span class="hljs-number">.163</span>.com      <span class="hljs-meta">#例如 smtp.qq.com</span><br><span class="hljs-symbol">      port:</span> <span class="hljs-number">465</span>   <span class="hljs-meta">#例如QQ邮箱端口465</span><br><span class="hljs-symbol">      username:</span>    <span class="hljs-meta">#邮箱用户名</span><br><span class="hljs-symbol">      password:</span>      <span class="hljs-meta">#邮箱密码</span><br><span class="hljs-symbol">      from:</span>  <span class="hljs-meta">#邮箱用户名</span><br><span class="hljs-symbol">      recipients:</span>   <span class="hljs-meta">#收件人</span><br><span class="hljs-symbol">    when:</span><br><span class="hljs-symbol">      status:</span> [failure, success]<br><br><span class="hljs-symbol">volumes:</span> <span class="hljs-meta"># 定义流水线挂载目录，用于共享数据</span><br>  - name: maven-build<br><span class="hljs-symbol">    host:</span><br><span class="hljs-symbol">      path:</span> <span class="hljs-meta-keyword">/mydata/</span>maven/build <span class="hljs-meta"># 从宿主机中挂载的目录</span><br>  - name: maven-cache<br><span class="hljs-symbol">    host:</span><br><span class="hljs-symbol">      path:</span> <span class="hljs-meta-keyword">/mydata/</span>maven/cache<br></code></pre></td></tr></table></figure><h4 id="②特别注意：ssh-password是在drone中添加的，drone拉取到代码后，激活后需要进行以下设置"><a href="#②特别注意：ssh-password是在drone中添加的，drone拉取到代码后，激活后需要进行以下设置" class="headerlink" title="②特别注意：ssh_password是在drone中添加的，drone拉取到代码后，激活后需要进行以下设置"></a>②特别注意：ssh_password是在drone中添加的，drone拉取到代码后，激活后需要进行以下设置</h4><p><img src="/images/20211213230005.jpg"><br><img src="/images/20211213230047.jpg"></p><h3 id="二：项目根目录下添加Dockerfile文件，内容如下"><a href="#二：项目根目录下添加Dockerfile文件，内容如下" class="headerlink" title="二：项目根目录下添加Dockerfile文件，内容如下"></a>二：项目根目录下添加Dockerfile文件，内容如下</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ascdc/jdk8:latest<br><span class="hljs-keyword">VOLUME</span><span class="bash"> /tmp</span><br><span class="hljs-keyword">ADD</span><span class="bash"> cljz-1.0-SNAPSHOT.jar /app.jar</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sh -c <span class="hljs-string">&#x27;touch /app.jar&#x27;</span></span><br><span class="hljs-keyword">ENV</span> JAVA_OPTS=<span class="hljs-string">&quot;-Xmx512M -Xms256M -Xss256k -Duser.timezone=Asia/Shanghai&quot;</span><br><span class="hljs-keyword">ENV</span> APP_OPTS=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [ <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java <span class="hljs-variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar <span class="hljs-variable">$APP_OPTS</span>&quot;</span> ]</span><br></code></pre></td></tr></table></figure><h3 id="三：项目根目录下添加run-sh文件，需要注意的是上传之后如果无法运行需要赋予执行权限，详细配置如下"><a href="#三：项目根目录下添加run-sh文件，需要注意的是上传之后如果无法运行需要赋予执行权限，详细配置如下" class="headerlink" title="三：项目根目录下添加run.sh文件，需要注意的是上传之后如果无法运行需要赋予执行权限，详细配置如下"></a>三：项目根目录下添加run.sh文件，需要注意的是上传之后如果无法运行需要赋予执行权限，详细配置如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 定义应用组名</span><br>group_name=<span class="hljs-string">&#x27;mall-tiny&#x27;</span><br><span class="hljs-comment"># 定义应用名称</span><br>app_name=<span class="hljs-string">&#x27;mall-tiny-drone&#x27;</span><br><span class="hljs-comment"># 定义应用版本</span><br>app_version=<span class="hljs-string">&#x27;1.0-SNAPSHOT&#x27;</span><br><span class="hljs-comment"># 定义应用环境</span><br>profile_active=<span class="hljs-string">&#x27;prod&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----copy jar----&#x27;</span><br>docker stop <span class="hljs-variable">$&#123;app_name&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----stop container----&#x27;</span><br>docker rm <span class="hljs-variable">$&#123;app_name&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----rm container----&#x27;</span><br>docker rmi <span class="hljs-variable">$&#123;group_name&#125;</span>/<span class="hljs-variable">$&#123;app_name&#125;</span>:<span class="hljs-variable">$&#123;app_version&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----rm image----&#x27;</span><br><span class="hljs-comment"># 打包编译docker镜像</span><br>docker build -t <span class="hljs-variable">$&#123;group_name&#125;</span>/<span class="hljs-variable">$&#123;app_name&#125;</span>:<span class="hljs-variable">$&#123;app_version&#125;</span> .<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----build image----&#x27;</span><br>docker run -p 1024:1024 --name <span class="hljs-variable">$&#123;app_name&#125;</span> \<br>-e <span class="hljs-string">&#x27;spring.profiles.active&#x27;</span>=<span class="hljs-variable">$&#123;profile_active&#125;</span> \<br>-e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-v /etc/localtime:/etc/localtime \<br>-v /mydata/app/<span class="hljs-variable">$&#123;app_name&#125;</span>/logs:/var/logs \<br>-d <span class="hljs-variable">$&#123;group_name&#125;</span>/<span class="hljs-variable">$&#123;app_name&#125;</span>:<span class="hljs-variable">$&#123;app_version&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;----start container----&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Docker中的端口根据实际需要进行更改"><a href="#Docker中的端口根据实际需要进行更改" class="headerlink" title="Docker中的端口根据实际需要进行更改"></a>Docker中的端口根据实际需要进行更改</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>drone</tag>
      
      <tag>gogs</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos下安装python的运行环境</title>
    <link href="/deploy/32520/"/>
    <url>/deploy/32520/</url>
    
    <content type="html"><![CDATA[<h3 id="一：下载源码包"><a href="#一：下载源码包" class="headerlink" title="一：下载源码包"></a>一：下载源码包</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.python.org/ftp/python/<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>/Python-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>rc<span class="hljs-number">1</span>.tgz<br></code></pre></td></tr></table></figure><h3 id="二：解压后进入目录，下面给出解压命令"><a href="#二：解压后进入目录，下面给出解压命令" class="headerlink" title="二：解压后进入目录，下面给出解压命令"></a>二：解压后进入目录，下面给出解压命令</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf Python-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>rc<span class="hljs-number">1</span>.tgz<br></code></pre></td></tr></table></figure><h3 id="三：进行编译安装"><a href="#三：进行编译安装" class="headerlink" title="三：进行编译安装"></a>三：进行编译安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/</span>opt<span class="hljs-regexp">/python3.8 # 指定安装目录为/</span>opt/python3.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><h3 id="四：更改linux的path变量"><a href="#四：更改linux的path变量" class="headerlink" title="四：更改linux的path变量"></a>四：更改linux的path变量</h3><h4 id="编辑path文件"><a href="#编辑path文件" class="headerlink" title="编辑path文件"></a>编辑path文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h4 id="在尾部添加"><a href="#在尾部添加" class="headerlink" title="在尾部添加"></a>在尾部添加</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PATH=<span class="hljs-regexp">/opt/</span>python3.<span class="hljs-number">8</span><span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/local/</span>sbin:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/sbin:/u</span>sr<span class="hljs-regexp">/bin:/</span>root/bin<br></code></pre></td></tr></table></figure><h4 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加快maven构建速度</title>
    <link href="/coding/18736/"/>
    <url>/coding/18736/</url>
    
    <content type="html"><![CDATA[<h3 id="在pem-xml文件中project里添加以下内容"><a href="#在pem-xml文件中project里添加以下内容" class="headerlink" title="在pem.xml文件中project里添加以下内容"></a>在pem.xml文件中project里添加以下内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="添加好了如下："><a href="#添加好了如下：" class="headerlink" title="添加好了如下："></a>添加好了如下：</h4><p><img src="https://cljzhub.xyz/images/pic/20211213005305.png"></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无坑配置drone+gogs+docker自动部署环境</title>
    <link href="/deploy/53599/"/>
    <url>/deploy/53599/</url>
    
    <content type="html"><![CDATA[<h3 id="一：配置gogs环境"><a href="#一：配置gogs环境" class="headerlink" title="一：配置gogs环境"></a>一：配置gogs环境</h3><h4 id="①拉取镜像"><a href="#①拉取镜像" class="headerlink" title="①拉取镜像"></a>①拉取镜像</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull gogs/gogs<br></code></pre></td></tr></table></figure><h4 id="②开启相应端口"><a href="#②开启相应端口" class="headerlink" title="②开启相应端口"></a>②开启相应端口</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">zone=public</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3000/tcp</span> --<span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span> <br></code></pre></td></tr></table></figure><h4 id="③开启容器"><a href="#③开启容器" class="headerlink" title="③开启容器"></a>③开启容器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -p 10022:22 -p 3000:3000 <span class="hljs-attribute">--name</span>=gogs <span class="hljs-attribute">--restart</span>=always  \<br>-e <span class="hljs-attribute">TZ</span>=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-v /mydata/gogs:/data  \<br>-d gogs/gogs<br></code></pre></td></tr></table></figure><h4 id="特别注意：使用ip-端口登陆的时候，注意设置好localhost为外网暴露的ip"><a href="#特别注意：使用ip-端口登陆的时候，注意设置好localhost为外网暴露的ip" class="headerlink" title="特别注意：使用ip+端口登陆的时候，注意设置好localhost为外网暴露的ip"></a>特别注意：使用ip+端口登陆的时候，注意设置好localhost为外网暴露的ip</h4><h3 id="二：配置drone服务端"><a href="#二：配置drone服务端" class="headerlink" title="二：配置drone服务端"></a>二：配置drone服务端</h3><h4 id="①拉取镜像-1"><a href="#①拉取镜像-1" class="headerlink" title="①拉取镜像"></a>①拉取镜像</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull drone/drone:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="②开启相应端口-1"><a href="#②开启相应端口-1" class="headerlink" title="②开启相应端口"></a>②开启相应端口</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">zone=public</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3080/tcp</span> --<span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span> <br></code></pre></td></tr></table></figure><h4 id="③开启容器-1"><a href="#③开启容器-1" class="headerlink" title="③开启容器"></a>③开启容器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> \<br>  <span class="hljs-attribute">--volume</span>=/var/lib/drone:/data \<br>  <span class="hljs-attribute">--env</span>=DRONE_AGENTS_ENABLED=true \<br>  <span class="hljs-attribute">--env</span>=DRONE_GOGS_SERVER=http://ip:3000 \<br>  <span class="hljs-attribute">--env</span>=DRONE_RPC_SECRET=super-duper-secret \<br>    <span class="hljs-attribute">--env</span>=DRONE_USER_CREATE=username:管理员用户,admin:true \<br>  <span class="hljs-attribute">--env</span>=DRONE_SERVER_HOST=ip:3080 \<br>  <span class="hljs-attribute">--env</span>=DRONE_SERVER_PROTO=http \<br>  <span class="hljs-attribute">--publish</span>=3080:80 \<br>  <span class="hljs-attribute">--restart</span>=always \<br>  <span class="hljs-attribute">--detach</span>=<span class="hljs-literal">true</span> \<br>  <span class="hljs-attribute">--name</span>=drone \<br>  drone/drone:1<br></code></pre></td></tr></table></figure><h3 id="三：配置drone的docker环境"><a href="#三：配置drone的docker环境" class="headerlink" title="三：配置drone的docker环境"></a>三：配置drone的docker环境</h3><h4 id="①拉取镜像-2"><a href="#①拉取镜像-2" class="headerlink" title="①拉取镜像"></a>①拉取镜像</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull drone/drone-runner-docker:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="②开启相应端口-2"><a href="#②开启相应端口-2" class="headerlink" title="②开启相应端口"></a>②开启相应端口</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">zone=public</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3500/tcp</span> --<span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span> <br></code></pre></td></tr></table></figure><h4 id="③开启容器-2"><a href="#③开启容器-2" class="headerlink" title="③开启容器"></a>③开启容器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d \<br>  -v /var/run/docker.sock:/var/run/docker.sock \<br>  -e <span class="hljs-attribute">DRONE_RPC_PROTO</span>=http \<br>  -e <span class="hljs-attribute">DRONE_RPC_HOST</span>=ip:3080 \<br>  -e <span class="hljs-attribute">DRONE_RPC_SECRET</span>=dronerpc666 \<br>  -e <span class="hljs-attribute">DRONE_RUNNER_CAPACITY</span>=2 \<br>  -e <span class="hljs-attribute">DRONE_RUNNER_NAME</span>=runner-docker \<br>  -e <span class="hljs-attribute">TZ</span>=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>  -p 3500:3500 \<br>  <span class="hljs-attribute">--restart</span>=always \<br>  --name runner-docker \<br>  drone/drone-runner-docker:1<br></code></pre></td></tr></table></figure><h4 id="之后可以使用ip-3080端口访问drone，用户名密码是gogs中注册的"><a href="#之后可以使用ip-3080端口访问drone，用户名密码是gogs中注册的" class="headerlink" title="之后可以使用ip+3080端口访问drone，用户名密码是gogs中注册的"></a>之后可以使用ip+3080端口访问drone，用户名密码是gogs中注册的</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>drone</tag>
      
      <tag>gogs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git设置用户名、邮箱、秘钥</title>
    <link href="/deploy/23905/"/>
    <url>/deploy/23905/</url>
    
    <content type="html"><![CDATA[<h4 id="一：设置用户名、邮箱、添加仓库"><a href="#一：设置用户名、邮箱、添加仓库" class="headerlink" title="一：设置用户名、邮箱、添加仓库"></a>一：设置用户名、邮箱、添加仓库</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;xxx@xxx&quot;</span><br></code></pre></td></tr></table></figure><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:example/demo.git<br></code></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote rm origin</span><br></code></pre></td></tr></table></figure><h4 id="二：生产ssh秘钥"><a href="#二：生产ssh秘钥" class="headerlink" title="二：生产ssh秘钥"></a>二：生产ssh秘钥</h4><h5 id="①检查是否有ssh秘钥，有则删除"><a href="#①检查是否有ssh秘钥，有则删除" class="headerlink" title="①检查是否有ssh秘钥，有则删除"></a>①检查是否有ssh秘钥，有则删除</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br></code></pre></td></tr></table></figure><h5 id="②添加ssh秘钥"><a href="#②添加ssh秘钥" class="headerlink" title="②添加ssh秘钥"></a>②添加ssh秘钥</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Drone加Gogs自动化部署方案</title>
    <link href="/deploy/22879/"/>
    <url>/deploy/22879/</url>
    
    <content type="html"><![CDATA[<h3 id="作者文章链接：再见-Jenkins-！几行脚本搞定自动化部署，这款神器有点厉害！"><a href="#作者文章链接：再见-Jenkins-！几行脚本搞定自动化部署，这款神器有点厉害！" class="headerlink" title="作者文章链接：再见 Jenkins ！几行脚本搞定自动化部署，这款神器有点厉害！"></a>作者文章链接：<a href="https://juejin.cn/post/6963430116080910367">再见 Jenkins ！几行脚本搞定自动化部署，这款神器有点厉害！</a></h3>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>drone</tag>
      
      <tag>gogs</tag>
      
      <tag>自动化部署</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下高颜值终端工具Windows Terminal安装教程</title>
    <link href="/deploy/47806/"/>
    <url>/deploy/47806/</url>
    
    <content type="html"><![CDATA[<h4 id="1-打开terminal官网：https-docs-microsoft-com-zh-cn-windows-terminal"><a href="#1-打开terminal官网：https-docs-microsoft-com-zh-cn-windows-terminal" class="headerlink" title="1.打开terminal官网：https://docs.microsoft.com/zh-cn/windows/terminal/"></a>1.打开terminal官网：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/">https://docs.microsoft.com/zh-cn/windows/terminal/</a></h4><h4 id="2-点击安装按钮，进入到安装界面"><a href="#2-点击安装按钮，进入到安装界面" class="headerlink" title="2.点击安装按钮，进入到安装界面"></a>2.点击安装按钮，进入到安装界面</h4><p><img src="/images/20211210210629.jpg"></p><h4 id="3-点击获取会弹出获取打开应用商店，打开应用商店完成安装"><a href="#3-点击获取会弹出获取打开应用商店，打开应用商店完成安装" class="headerlink" title="3.点击获取会弹出获取打开应用商店，打开应用商店完成安装"></a>3.点击获取会弹出获取打开应用商店，打开应用商店完成安装</h4><p><img src="/images/20211210210744.jpg"><br><img src="/images/20211210211030.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决node中npm速度慢问题</title>
    <link href="/deploy/16996/"/>
    <url>/deploy/16996/</url>
    
    <content type="html"><![CDATA[<h4 id="1-执行如下指令安装cnpm"><a href="#1-执行如下指令安装cnpm" class="headerlink" title="1.执行如下指令安装cnpm"></a>1.执行如下指令安装cnpm</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install --<span class="hljs-built_in">global</span> cnpm<br></code></pre></td></tr></table></figure><p><img src="https://cljzhub.xyz/images/pic/20211210205247.png"></p><h4 id="2-安装完成后执行如下命令查看是否安装成功，出现如下内容说明安装成功"><a href="#2-安装完成后执行如下命令查看是否安装成功，出现如下内容说明安装成功" class="headerlink" title="2.安装完成后执行如下命令查看是否安装成功，出现如下内容说明安装成功"></a>2.安装完成后执行如下命令查看是否安装成功，出现如下内容说明安装成功</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cnpm -v</span><br></code></pre></td></tr></table></figure><p><img src="https://cljzhub.xyz/images/pic/20211210205451.png"></p><h4 id="3-之后需要使用npm的时候，换成cpm。速度会提高很多"><a href="#3-之后需要使用npm的时候，换成cpm。速度会提高很多" class="headerlink" title="3.之后需要使用npm的时候，换成cpm。速度会提高很多"></a>3.之后需要使用npm的时候，换成cpm。速度会提高很多</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
      <tag>cnpm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window平台下使用scoop安装node运行环境</title>
    <link href="/deploy/13483/"/>
    <url>/deploy/13483/</url>
    
    <content type="html"><![CDATA[<h4 id="如果没有安装scoop参考这篇文章：Window平台下包管理工具Scoop"><a href="#如果没有安装scoop参考这篇文章：Window平台下包管理工具Scoop" class="headerlink" title="如果没有安装scoop参考这篇文章：Window平台下包管理工具Scoop"></a>如果没有安装scoop参考这篇文章：<a href="https://cljzhub.xyz/deploy/33.html">Window平台下包管理工具Scoop</a></h4><h4 id="1-打卡命令行窗口，执行以下命令，出现successfully字样说明安装成功"><a href="#1-打卡命令行窗口，执行以下命令，出现successfully字样说明安装成功" class="headerlink" title="1.打卡命令行窗口，执行以下命令，出现successfully字样说明安装成功"></a>1.打卡命令行窗口，执行以下命令，出现successfully字样说明安装成功</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>nodejs<br></code></pre></td></tr></table></figure><p><img src="/images/20211210204624.jpg"></p><h4 id="2-安装完成后执行node-–version后显示版本则说明安装成功"><a href="#2-安装完成后执行node-–version后显示版本则说明安装成功" class="headerlink" title="2.安装完成后执行node –version后显示版本则说明安装成功"></a>2.安装完成后执行node –version后显示版本则说明安装成功</h4><p><img src="/images/20211210204804.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>scoop</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA无限重置插件安装教程</title>
    <link href="/deploy/48488/"/>
    <url>/deploy/48488/</url>
    
    <content type="html"><![CDATA[<h4 id="1-按照文章IDEA中很好看的主题吸血鬼的方法找到插件"><a href="#1-按照文章IDEA中很好看的主题吸血鬼的方法找到插件" class="headerlink" title="1.按照文章IDEA中很好看的主题吸血鬼的方法找到插件"></a>1.按照文章<a href="https://cljzhub.xyz/deploy/55.html">IDEA中很好看的主题吸血鬼</a>的方法找到插件</h4><h4 id="2-找到设置按钮，点击Manage-Plugin-Repositories"><a href="#2-找到设置按钮，点击Manage-Plugin-Repositories" class="headerlink" title="2.找到设置按钮，点击Manage Plugin Repositories"></a>2.找到设置按钮，点击Manage Plugin Repositories</h4><p><img src="/images/20211210203014.jpg"></p><h4 id="3-点击-添加内容"><a href="#3-点击-添加内容" class="headerlink" title="3.点击+添加内容"></a>3.点击+添加内容</h4><p><img src="/images/20211210203110.jpg"></p><h4 id="4-添加的内容为“https-plugins-zhile-io”-如果绿色加载消失说明添加成功"><a href="#4-添加的内容为“https-plugins-zhile-io”-如果绿色加载消失说明添加成功" class="headerlink" title="4.添加的内容为“https://plugins.zhile.io” 如果绿色加载消失说明添加成功"></a>4.添加的内容为“<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a>” 如果绿色加载消失说明添加成功</h4><p><img src="/images/20211210203215.jpg"><br><img src="/images/20211210203301.jpg"></p><h4 id="5-添加完成后在插件中搜索IDE-eval-reset进行安装"><a href="#5-添加完成后在插件中搜索IDE-eval-reset进行安装" class="headerlink" title="5.添加完成后在插件中搜索IDE eval reset进行安装"></a>5.添加完成后在插件中搜索IDE eval reset进行安装</h4><p><img src="/images/20211210203415.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>激活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA中很好看的主题吸血鬼</title>
    <link href="/deploy/12698/"/>
    <url>/deploy/12698/</url>
    
    <content type="html"><![CDATA[<h4 id="1-打开一个项目，点击file"><a href="#1-打开一个项目，点击file" class="headerlink" title="1.打开一个项目，点击file"></a>1.打开一个项目，点击file</h4><p><img src="/images/20211210201837.jpg"></p><h4 id="2-点击settings"><a href="#2-点击settings" class="headerlink" title="2.点击settings"></a>2.点击settings</h4><p><img src="/images/20211210201909.jpg"></p><h4 id="3-点击plugis后选择marketplace"><a href="#3-点击plugis后选择marketplace" class="headerlink" title="3.点击plugis后选择marketplace"></a>3.点击plugis后选择marketplace</h4><p><img src="/images/20211210202117.jpg"></p><h4 id="4-搜索Dracula-Theme"><a href="#4-搜索Dracula-Theme" class="headerlink" title="4.搜索Dracula Theme"></a>4.搜索Dracula Theme</h4><p><img src="/images/20211210202157.jpg"></p><h5 id="5-点击install进行安装"><a href="#5-点击install进行安装" class="headerlink" title="5.点击install进行安装"></a>5.点击install进行安装</h5>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>主题</tag>
      
      <tag>吸血鬼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决IDEA依赖导入过慢</title>
    <link href="/deploy/5460/"/>
    <url>/deploy/5460/</url>
    
    <content type="html"><![CDATA[<h4 id="1-打开一个项目，打开pom-xml文件"><a href="#1-打开一个项目，打开pom-xml文件" class="headerlink" title="1.打开一个项目，打开pom.xml文件"></a>1.打开一个项目，打开pom.xml文件</h4><p><img src="https://cljzhub.xyz/images/pic/20211210201052.png"></p><h4 id="2-在pom-xml文件中右键，找到maven-gt-create-“settings-xml”如果已经有了这个文件则打开open-“settings-xml”"><a href="#2-在pom-xml文件中右键，找到maven-gt-create-“settings-xml”如果已经有了这个文件则打开open-“settings-xml”" class="headerlink" title="2.在pom.xml文件中右键，找到maven -&gt; create “settings.xml”如果已经有了这个文件则打开open “settings.xml”"></a>2.在pom.xml文件中右键，找到maven -&gt; create “settings.xml”如果已经有了这个文件则打开open “settings.xml”</h4><p><img src="https://cljzhub.xyz/images/pic/20211210201150.png"></p><h4 id="3-将该文件的内容替换为如下内容，保存"><a href="#3-将该文件的内容替换为如下内容，保存" class="headerlink" title="3.将该文件的内容替换为如下内容，保存"></a>3.将该文件的内容替换为如下内容，保存</h4><p><img src="https://cljzhub.xyz/images/pic/20211210201423.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>uk<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>CN<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>OSChina Central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>internal nexus repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>MAVEN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>很值得思考</title>
    <link href="/routine/57497/"/>
    <url>/routine/57497/</url>
    
    <content type="html"><![CDATA[<p>B站UP主，牧云踏歌</p> <div style="position: relative; padding: 40% 45%;"> <iframe src="//player.bilibili.com/player.html?aid=337193656&amp;bvid=BV1yR4y1s74A&amp;cid=457524080&amp;page=1" scrolling="no" border="0" frameborder="no"          framespacing="0" allowfullscreen="true"          style="position: absolute; width: 100%;          height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT发展</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校园网设备限制解除办法（校园网接入路由器）</title>
    <link href="/routine/17529/"/>
    <url>/routine/17529/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h3><h4 id="一：购买了校园网套餐，已经连接了校园网。"><a href="#一：购买了校园网套餐，已经连接了校园网。" class="headerlink" title="一：购买了校园网套餐，已经连接了校园网。"></a>一：购买了校园网套餐，已经连接了校园网。</h4><h4 id="二：校园网使用的是mac地址认证（多为网页登陆验证）"><a href="#二：校园网使用的是mac地址认证（多为网页登陆验证）" class="headerlink" title="二：校园网使用的是mac地址认证（多为网页登陆验证）"></a>二：校园网使用的是mac地址认证（多为网页登陆验证）</h4><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h3><h4 id="一：在已经连接好校园网的电脑中右键电脑网络连接图标，点击“打开网络和internet设置”"><a href="#一：在已经连接好校园网的电脑中右键电脑网络连接图标，点击“打开网络和internet设置”" class="headerlink" title="一：在已经连接好校园网的电脑中右键电脑网络连接图标，点击“打开网络和internet设置”"></a>一：在已经连接好校园网的电脑中右键电脑网络连接图标，点击“打开网络和internet设置”</h4><p><img src="https://cljzhub.xyz/images/pic/20211204212507.png"></p><h4 id="二：在设置中点击属性"><a href="#二：在设置中点击属性" class="headerlink" title="二：在设置中点击属性"></a>二：在设置中点击属性</h4><p><img src="https://cljzhub.xyz/images/pic/20211204212609.png"></p><h4 id="三：滑到底部找到复制，点击复制，保存好相应信息"><a href="#三：滑到底部找到复制，点击复制，保存好相应信息" class="headerlink" title="三：滑到底部找到复制，点击复制，保存好相应信息"></a>三：滑到底部找到复制，点击复制，保存好相应信息</h4><p><img src="https://cljzhub.xyz/images/pic/20211204212743.png"></p><h4 id="四：断开连接校园网的设备，路由器的wan口插入网线（路由器标有文字）"><a href="#四：断开连接校园网的设备，路由器的wan口插入网线（路由器标有文字）" class="headerlink" title="四：断开连接校园网的设备，路由器的wan口插入网线（路由器标有文字）"></a>四：断开连接校园网的设备，路由器的wan口插入网线（路由器标有文字）</h4><p><img src="https://cljzhub.xyz/images/pic/20211204213736.png"></p><h4 id="五：进入路由器管理页面（以腾达为例，其他类似）如果路由器有密码需要进行重置，路由器有reset按钮，按下即可重置"><a href="#五：进入路由器管理页面（以腾达为例，其他类似）如果路由器有密码需要进行重置，路由器有reset按钮，按下即可重置" class="headerlink" title="五：进入路由器管理页面（以腾达为例，其他类似）如果路由器有密码需要进行重置，路由器有reset按钮，按下即可重置"></a>五：进入路由器管理页面（以腾达为例，其他类似）如果路由器有密码需要进行重置，路由器有reset按钮，按下即可重置</h4><p><img src="https://cljzhub.xyz/images/pic/20211204213038.png"></p><h4 id="六：找到系统设置，wan口设置里的克隆mac地址，填入第三步复制信息中的mac地址"><a href="#六：找到系统设置，wan口设置里的克隆mac地址，填入第三步复制信息中的mac地址" class="headerlink" title="六：找到系统设置，wan口设置里的克隆mac地址，填入第三步复制信息中的mac地址"></a>六：找到系统设置，wan口设置里的克隆mac地址，填入第三步复制信息中的mac地址</h4><p><img src="https://cljzhub.xyz/images/pic/20211204213203.png"></p><h4 id="七：设置完成后打开百度，能打开则说明设置成功。之后就可以设置wifi，插入网线到路由器中"><a href="#七：设置完成后打开百度，能打开则说明设置成功。之后就可以设置wifi，插入网线到路由器中" class="headerlink" title="七：设置完成后打开百度，能打开则说明设置成功。之后就可以设置wifi，插入网线到路由器中"></a>七：设置完成后打开百度，能打开则说明设置成功。之后就可以设置wifi，插入网线到路由器中</h4>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>校园网</tag>
      
      <tag>设备限制</tag>
      
      <tag>校园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纸皮胡桃</title>
    <link href="/routine/13063/"/>
    <url>/routine/13063/</url>
    
    <content type="html"><![CDATA[<h4 id="B站上看到的，我觉得可行"><a href="#B站上看到的，我觉得可行" class="headerlink" title="B站上看到的，我觉得可行"></a>B站上看到的，我觉得可行</h4> <div style="position: relative; padding: 40% 45%;"> <iframe src="//player.bilibili.com/player.html?aid=806935133&bvid=BV1U34y197Cd&cid=451023479&page=1" scrolling="no" border="0" frameborder="no"          framespacing="0" allowfullscreen="true"          style="position: absolute; width: 100%;          height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    <categories>
      
      <category>日常分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bilibili</tag>
      
      <tag>B站</tag>
      
      <tag>胡桃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为宝塔面板添加SSL证书</title>
    <link href="/deploy/51989/"/>
    <url>/deploy/51989/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h3><h4 id="申请好通配符ssl证书，申请网站：Free-SSL，安装好宝塔面板"><a href="#申请好通配符ssl证书，申请网站：Free-SSL，安装好宝塔面板" class="headerlink" title="申请好通配符ssl证书，申请网站：Free SSL，安装好宝塔面板"></a>申请好通配符ssl证书，申请网站：<a href="https://freessl.cn/">Free SSL</a>，安装好宝塔面板</h4><h3 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2.安装步骤"></a>2.安装步骤</h3><h4 id="一：在宝塔面板中设置好域名（需要提前设置好域名解析）"><a href="#一：在宝塔面板中设置好域名（需要提前设置好域名解析）" class="headerlink" title="一：在宝塔面板中设置好域名（需要提前设置好域名解析）"></a>一：在宝塔面板中设置好域名（需要提前设置好域名解析）</h4><p><img src="https://cljzhub.xyz/images/pic/20211204132739.png"></p><h4 id="二：开启面板SSL，选择合适的证书，如果已经添加过则直接选择ssl提供商即可。如果没有添加需要填写好证书相关的信息"><a href="#二：开启面板SSL，选择合适的证书，如果已经添加过则直接选择ssl提供商即可。如果没有添加需要填写好证书相关的信息" class="headerlink" title="二：开启面板SSL，选择合适的证书，如果已经添加过则直接选择ssl提供商即可。如果没有添加需要填写好证书相关的信息"></a>二：开启面板SSL，选择合适的证书，如果已经添加过则直接选择ssl提供商即可。如果没有添加需要填写好证书相关的信息</h4><p><img src="https://cljzhub.xyz/images/pic/20211204132837.png"><br><img src="https://cljzhub.xyz/images/pic/20211204133028.png"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宝塔</tag>
      
      <tag>SSL</tag>
      
      <tag>BT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录typecho网站恢复的过程</title>
    <link href="/deploy/58426/"/>
    <url>/deploy/58426/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h3><h4 id="准备好备份文件（数据库-网站），安装好宝塔面板，选择lamp（php版本选7-2）"><a href="#准备好备份文件（数据库-网站），安装好宝塔面板，选择lamp（php版本选7-2）" class="headerlink" title="准备好备份文件（数据库+网站），安装好宝塔面板，选择lamp（php版本选7.2）"></a>准备好备份文件（数据库+网站），安装好宝塔面板，选择lamp（php版本选7.2）</h4><h3 id="2-将网站复制到wwwroot里，创建一个文件夹（一般为网站域名），将网站复制到这个文件夹里"><a href="#2-将网站复制到wwwroot里，创建一个文件夹（一般为网站域名），将网站复制到这个文件夹里" class="headerlink" title="2.将网站复制到wwwroot里，创建一个文件夹（一般为网站域名），将网站复制到这个文件夹里"></a>2.将网站复制到wwwroot里，创建一个文件夹（一般为网站域名），将网站复制到这个文件夹里</h3><p><img src="/images/20211203132346.jpg"></p><h3 id="3-设置数据库，新建一个数据库名为typecho，设置好相应的账户密码，导入备份文件"><a href="#3-设置数据库，新建一个数据库名为typecho，设置好相应的账户密码，导入备份文件" class="headerlink" title="3.设置数据库，新建一个数据库名为typecho，设置好相应的账户密码，导入备份文件"></a>3.设置数据库，新建一个数据库名为typecho，设置好相应的账户密码，导入备份文件</h3><p><img src="/images/20211203200557.jpg"></p><h3 id="4-在面板右侧添加站点，设置好相应的信息"><a href="#4-在面板右侧添加站点，设置好相应的信息" class="headerlink" title="4.在面板右侧添加站点，设置好相应的信息"></a>4.在面板右侧添加站点，设置好相应的信息</h3><p><img src="/images/20211203132621.jpg"></p><h3 id="5-在网站管理页面，设置好ssl，网站之前配置了伪静态需要重新设置"><a href="#5-在网站管理页面，设置好ssl，网站之前配置了伪静态需要重新设置" class="headerlink" title="5.在网站管理页面，设置好ssl，网站之前配置了伪静态需要重新设置"></a>5.在网站管理页面，设置好ssl，网站之前配置了伪静态需要重新设置</h3><p><img src="/images/20211203195653.jpg"></p><h3 id="6-如果数据库无法连接，进入网站根目录设置config-inc-php-设置之前配置的数据库信息"><a href="#6-如果数据库无法连接，进入网站根目录设置config-inc-php-设置之前配置的数据库信息" class="headerlink" title="6.如果数据库无法连接，进入网站根目录设置config.inc.php, 设置之前配置的数据库信息"></a>6.如果数据库无法连接，进入网站根目录设置config.inc.php, 设置之前配置的数据库信息</h3><p><img src="/images/20211203195910.jpg"><br><img src="/images/20211203200018.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Portainer管理镜像</title>
    <link href="/deploy/32593/"/>
    <url>/deploy/32593/</url>
    
    <content type="html"><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><h4 id="需要安装好docker环境，在之前的文章中提过"><a href="#需要安装好docker环境，在之前的文章中提过" class="headerlink" title="需要安装好docker环境，在之前的文章中提过"></a>需要安装好docker环境，在之前的文章中提过</h4><h3 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2.安装过程"></a>2.安装过程</h3><h4 id="一：拉取相关镜像"><a href="#一：拉取相关镜像" class="headerlink" title="一：拉取相关镜像"></a>一：拉取相关镜像</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">docker</span> pull portainer/portainer<br></code></pre></td></tr></table></figure><h4 id="二：开放相应端口"><a href="#二：开放相应端口" class="headerlink" title="二：开放相应端口"></a>二：开放相应端口</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=9000/tcp --permanent<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload </span><br></code></pre></td></tr></table></figure><h4 id="三：启动镜像"><a href="#三：启动镜像" class="headerlink" title="三：启动镜像"></a>三：启动镜像</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -v <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock -v <span class="hljs-regexp">/home/</span>docker<span class="hljs-regexp">/portainer:/</span>data --name portainer --restart=always portainer/portainer<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>portainer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌已经可以成功搜索本网站</title>
    <link href="/test/33160/"/>
    <url>/test/33160/</url>
    
    <content type="html"><![CDATA[<h3 id="搜索关键字：eldpepar"><a href="#搜索关键字：eldpepar" class="headerlink" title="搜索关键字：eldpepar"></a>搜索关键字：eldpepar</h3><p><img src="/images/20211201131845.jpg"></p><h3 id="搜索关键字：cljzhub"><a href="#搜索关键字：cljzhub" class="headerlink" title="搜索关键字：cljzhub"></a>搜索关键字：cljzhub</h3><p><img src="/images/20211201132014.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>功能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eldpepar</tag>
      
      <tag>google</tag>
      
      <tag>谷歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS下安装终端工具Homebrew</title>
    <link href="/deploy/36549/"/>
    <url>/deploy/36549/</url>
    
    <content type="html"><![CDATA[<h3 id="执行如下指令，选择合适的源进行安装"><a href="#执行如下指令，选择合适的源进行安装" class="headerlink" title="执行如下指令，选择合适的源进行安装"></a>执行如下指令，选择合适的源进行安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macos</tag>
      
      <tag>homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos下配置Docker环境</title>
    <link href="/deploy/22855/"/>
    <url>/deploy/22855/</url>
    
    <content type="html"><![CDATA[<h3 id="1-如果系统中已经安装过docker，需要执行以下指令清除安装的docker"><a href="#1-如果系统中已经安装过docker，需要执行以下指令清除安装的docker" class="headerlink" title="1.如果系统中已经安装过docker，需要执行以下指令清除安装的docker"></a>1.如果系统中已经安装过docker，需要执行以下指令清除安装的docker</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></td></tr></table></figure><h3 id="2-安装Docker仓库所需要的包"><a href="#2-安装Docker仓库所需要的包" class="headerlink" title="2.安装Docker仓库所需要的包"></a>2.安装Docker仓库所需要的包</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">sudo</span> yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure><h3 id="3-设置Docker仓库（使用国内仓库）"><a href="#3-设置Docker仓库（使用国内仓库）" class="headerlink" title="3.设置Docker仓库（使用国内仓库）"></a>3.设置Docker仓库（使用国内仓库）</h3><h4 id="可以从下面两个仓库中任意选一个进行安装"><a href="#可以从下面两个仓库中任意选一个进行安装" class="headerlink" title="可以从下面两个仓库中任意选一个进行安装"></a>可以从下面两个仓库中任意选一个进行安装</h4><h4 id="阿里云仓库"><a href="#阿里云仓库" class="headerlink" title="阿里云仓库"></a>阿里云仓库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum-config-manager \<br>    --add-repo \<br>    http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="清华大学仓库"><a href="#清华大学仓库" class="headerlink" title="清华大学仓库"></a>清华大学仓库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="4-安装-Docker-Engine-Community"><a href="#4-安装-Docker-Engine-Community" class="headerlink" title="4.安装 Docker Engine-Community"></a>4.安装 Docker Engine-Community</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><h3 id="5-设置Docker开启启动"><a href="#5-设置Docker开启启动" class="headerlink" title="5.设置Docker开启启动"></a>5.设置Docker开启启动</h3><h4 id="执行如下指令"><a href="#执行如下指令" class="headerlink" title="执行如下指令"></a>执行如下指令</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo systemctl <span class="hljs-builtin-name">enable</span> containerd.service<br></code></pre></td></tr></table></figure><h3 id="6-启动Docker"><a href="#6-启动Docker" class="headerlink" title="6.启动Docker"></a>6.启动Docker</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><h3 id="7-验证是否正确安装了-Docker-Engine-Community"><a href="#7-验证是否正确安装了-Docker-Engine-Community" class="headerlink" title="7.验证是否正确安装了 Docker Engine-Community"></a>7.验证是否正确安装了 Docker Engine-Community</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-builtin-name">run</span> hello-world<br></code></pre></td></tr></table></figure><h4 id="安装完成之后，显示hello-world表示安装正确"><a href="#安装完成之后，显示hello-world表示安装正确" class="headerlink" title="安装完成之后，显示hello world表示安装正确"></a>安装完成之后，显示hello world表示安装正确</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Centos</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window平台下包管理工具Scoop</title>
    <link href="/deploy/40680/"/>
    <url>/deploy/40680/</url>
    
    <content type="html"><![CDATA[<h3 id="1-安装方法"><a href="#1-安装方法" class="headerlink" title="1.安装方法"></a>1.安装方法</h3><h4 id="打开PowerShell，输入如下命令"><a href="#打开PowerShell，输入如下命令" class="headerlink" title="打开PowerShell，输入如下命令"></a>打开PowerShell，输入如下命令</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-executionpolicy</span> <span class="hljs-string">remotesigned</span> -<span class="hljs-string">scope</span> <span class="hljs-string">currentuser</span><br></code></pre></td></tr></table></figure><h4 id="执行完成之后，输入"><a href="#执行完成之后，输入" class="headerlink" title="执行完成之后，输入"></a>执行完成之后，输入</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">iex (<span class="hljs-keyword">new</span>-<span class="hljs-keyword">object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-基础命令（需要加上scoop-‘命令’才能执行）"><a href="#2-基础命令（需要加上scoop-‘命令’才能执行）" class="headerlink" title="2.基础命令（需要加上scoop ‘命令’才能执行）"></a>2.基础命令（需要加上scoop ‘命令’才能执行）</h3><h4 id="1-search-搜索软件名"><a href="#1-search-搜索软件名" class="headerlink" title="1.search 搜索软件名"></a>1.search 搜索软件名</h4><h4 id="2-install-安装软件"><a href="#2-install-安装软件" class="headerlink" title="2.install 安装软件"></a>2.install 安装软件</h4><h4 id="3-update-更新软件"><a href="#3-update-更新软件" class="headerlink" title="3.update 更新软件"></a>3.update 更新软件</h4><h4 id="4-status-查看软件状态"><a href="#4-status-查看软件状态" class="headerlink" title="4.status 查看软件状态"></a>4.status 查看软件状态</h4><h4 id="5-uninstall-卸载软件"><a href="#5-uninstall-卸载软件" class="headerlink" title="5.uninstall 卸载软件"></a>5.uninstall 卸载软件</h4><h4 id="6-info-查看软件详情"><a href="#6-info-查看软件详情" class="headerlink" title="6.info 查看软件详情"></a>6.info 查看软件详情</h4><h4 id="7-home-打开软件主页"><a href="#7-home-打开软件主页" class="headerlink" title="7.home 打开软件主页"></a>7.home 打开软件主页</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>scoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态网站部署工具（webon）</title>
    <link href="/deploy/33254/"/>
    <url>/deploy/33254/</url>
    
    <content type="html"><![CDATA[<h3 id="1-需要环境"><a href="#1-需要环境" class="headerlink" title="1.需要环境"></a>1.需要环境</h3><h4 id="需要提前安装node的运行环境，node环境安装指南：Window平台下使用scoop安装node运行环境"><a href="#需要提前安装node的运行环境，node环境安装指南：Window平台下使用scoop安装node运行环境" class="headerlink" title="需要提前安装node的运行环境，node环境安装指南：Window平台下使用scoop安装node运行环境"></a>需要提前安装node的运行环境，node环境安装指南：<a href="https://cljzhub.xyz/code/57.html">Window平台下使用scoop安装node运行环境</a></h4><h3 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2.安装步骤"></a>2.安装步骤</h3><h4 id="执行如下命令"><a href="#执行如下命令" class="headerlink" title="执行如下命令"></a>执行如下命令</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> webon -g<br></code></pre></td></tr></table></figure><h3 id="3-使用指南"><a href="#3-使用指南" class="headerlink" title="3.使用指南"></a>3.使用指南</h3><h4 id="新建一个空项目，在终端中进入空项目的目录，执行如下命令，按照提示进行配置"><a href="#新建一个空项目，在终端中进入空项目的目录，执行如下命令，按照提示进行配置" class="headerlink" title="新建一个空项目，在终端中进入空项目的目录，执行如下命令，按照提示进行配置"></a>新建一个空项目，在终端中进入空项目的目录，执行如下命令，按照提示进行配置</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">webon s</span><br></code></pre></td></tr></table></figure><h3 id="4-其他玩法"><a href="#4-其他玩法" class="headerlink" title="4.其他玩法"></a>4.其他玩法</h3><h4 id="该工具还可以使用webon-deploy命令进行部署"><a href="#该工具还可以使用webon-deploy命令进行部署" class="headerlink" title="该工具还可以使用webon deploy命令进行部署"></a>该工具还可以使用webon deploy命令进行部署</h4>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
      <tag>webon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言11月30日上机代码</title>
    <link href="/coding/65045/"/>
    <url>/coding/65045/</url>
    
    <content type="html"><![CDATA[<h3 id="1-水仙花数"><a href="#1-水仙花数" class="headerlink" title="1.水仙花数"></a>1.水仙花数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, a, b, c;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">100</span>; i &lt;= <span class="hljs-number">999</span>; i++) &#123;<br>        a = i % <span class="hljs-number">10</span>;<br>        b = i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        c = i / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (i == a * a * a + b * b * b + c * c * c) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-判断素数"><a href="#2-判断素数" class="headerlink" title="2.判断素数"></a>2.判断素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input the number :&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-keyword">if</span> (num % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 不是素数\n&quot;</span>, num);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 不是素数\n&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-判断完数"><a href="#3-判断完数" class="headerlink" title="3.判断完数"></a>3.判断完数</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs maxima">#include&lt;stdio.h&gt;<br>int main() &#123;<br>    int i, <span class="hljs-built_in">num</span>, <span class="hljs-built_in">sum</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input the number :&quot;</span>);<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">num</span>);<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">num</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span> <span class="hljs-symbol">%</span> i == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span> == <span class="hljs-built_in">sum</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 是完数\n&quot;</span>, <span class="hljs-built_in">num</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 不是完数\n&quot;</span>, <span class="hljs-built_in">num</span>);<br>    &#125;<br>    <span class="hljs-built_in">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-冒泡、选择排序（已发文章）"><a href="#4-冒泡、选择排序（已发文章）" class="headerlink" title="4.冒泡、选择排序（已发文章）"></a>4.冒泡、选择排序（已发文章）</h3><h4 id="相关链接：冒泡选择"><a href="#相关链接：冒泡选择" class="headerlink" title="相关链接：冒泡选择"></a>相关链接：<a href="https://cljzhub.xyz/code/6.html">冒泡选择</a></h4><h3 id="5-字符串长度"><a href="#5-字符串长度" class="headerlink" title="5.字符串长度"></a>5.字符串长度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> s1[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input s1:&quot;</span>);<br>    <span class="hljs-built_in">gets</span>(s1);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; s1[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The length of s1 is %d\n&quot;</span>, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-字符串连接"><a href="#6-字符串连接" class="headerlink" title="6.字符串连接"></a>6.字符串连接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> s1[<span class="hljs-number">100</span>], s2[<span class="hljs-number">30</span>];<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input s1:&quot;</span>);<br>    <span class="hljs-built_in">gets</span>(s1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input s2:&quot;</span>);<br>    <span class="hljs-built_in">gets</span>(s2);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; s1[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++);<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; s2[j] != <span class="hljs-string">&#x27;\0&#x27;</span>; j++, i++) &#123;<br>        s1[i] = s2[j];<br>    &#125;<br>    s1[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Output\ns1:&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(s1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s2:&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(s2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>上机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eldpepar单词的创立</title>
    <link href="/foreign/7365/"/>
    <url>/foreign/7365/</url>
    
    <content type="html"><![CDATA[<h3 id="起因：想弄一个独一无二的名字，最初想从古汉语中去查找，但文言文水平有限没办法找到特别合适的词汇。然后想到了翻译软件，使用谷歌翻译对“赤敛”进行翻译，尝试了很多国家的语言，最终发现了冰岛语"><a href="#起因：想弄一个独一无二的名字，最初想从古汉语中去查找，但文言文水平有限没办法找到特别合适的词汇。然后想到了翻译软件，使用谷歌翻译对“赤敛”进行翻译，尝试了很多国家的语言，最终发现了冰岛语" class="headerlink" title="起因：想弄一个独一无二的名字，最初想从古汉语中去查找，但文言文水平有限没办法找到特别合适的词汇。然后想到了翻译软件，使用谷歌翻译对“赤敛”进行翻译，尝试了很多国家的语言，最终发现了冰岛语"></a>起因：想弄一个独一无二的名字，最初想从古汉语中去查找，但文言文水平有限没办法找到特别合适的词汇。然后想到了翻译软件，使用谷歌翻译对“赤敛”进行翻译，尝试了很多国家的语言，最终发现了冰岛语</h3><p><img src="/images/20211129221430.jpg"></p><h3 id="解释：单词中的i不是很喜欢，换成了e，尝试利用搜索引擎进行搜索，搜索不到。成功！"><a href="#解释：单词中的i不是很喜欢，换成了e，尝试利用搜索引擎进行搜索，搜索不到。成功！" class="headerlink" title="解释：单词中的i不是很喜欢，换成了e，尝试利用搜索引擎进行搜索，搜索不到。成功！"></a>解释：单词中的i不是很喜欢，换成了e，尝试利用搜索引擎进行搜索，搜索不到。成功！</h3>]]></content>
    
    
    <categories>
      
      <category>爱学外语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eldpepar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php项目中nginx的配置（宝塔）</title>
    <link href="/deploy/7059/"/>
    <url>/deploy/7059/</url>
    
    <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server<br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> cljzljf.xyz <span class="hljs-regexp">*.cljzhub.xyz</span>;<br>    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;<br>    <span class="hljs-attribute">root</span> 网站目录;<br>    <br>    <span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br>    <span class="hljs-comment">#error_page 404/404.html;</span><br>    <span class="hljs-comment">#HTTP_TO_HTTPS_START</span><br>    <span class="hljs-attribute">if</span> ($server_port !<span class="hljs-regexp">~ 443)</span>&#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>    <span class="hljs-comment">#HTTP_TO_HTTPS_END</span><br>    <span class="hljs-attribute">limit_conn</span> perserver <span class="hljs-number">300</span>;<br>    <span class="hljs-attribute">limit_conn</span> perip <span class="hljs-number">25</span>;<br>    <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">512k</span>;<br>    <span class="hljs-attribute">ssl_certificate</span>    fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>   privkey.pem;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-    draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000&quot;</span>;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">497</span>  https://$host$request_uri;<br><br>    <span class="hljs-comment">#SSL-END</span><br>    <br>    <span class="hljs-comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br>    <span class="hljs-comment">#error_page 404 /404.html;</span><br>    <span class="hljs-comment">#error_page 502 /502.html;</span><br>    <span class="hljs-comment">#ERROR-PAGE-END</span><br>    <br>    <span class="hljs-comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br>    <span class="hljs-attribute">include</span> enable-php-<span class="hljs-number">56</span>.conf;<br>    <span class="hljs-comment">#PHP-INFO-END</span><br>    <br>    <span class="hljs-comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br>    <span class="hljs-attribute">include</span>  rewrite/cljzljf.xyz.conf;<br>    <span class="hljs-comment">#REWRITE-END</span><br>    <br>    <span class="hljs-comment">#禁止访问的文件或目录</span><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(\.user.ini\.htaccess\.git\.svn\.projectLICENSEREADME.md)</span><br><span class="hljs-regexp"></span>    &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">#一键申请SSL证书验证目录相关设置</span><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.well-known</span>&#123;<br>        <span class="hljs-attribute">allow</span> all;<br>    &#125;<br>    <br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(gifjpgjpegpngbmpswf)$</span><br><span class="hljs-regexp"></span>    &#123;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">30d</span>;<br>        <span class="hljs-attribute">error_log</span> /dev/null;<br>        <span class="hljs-attribute">access_log</span> /dev/null;<br>    &#125;<br>    <br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(jscss)?$</span><br><span class="hljs-regexp"></span>    &#123;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">12h</span>;<br>        <span class="hljs-attribute">error_log</span> /dev/null;<br>        <span class="hljs-attribute">access_log</span> /dev/null; <br>    &#125;<br>    <span class="hljs-attribute">access_log</span> log文件;<br>    <span class="hljs-attribute">error_log</span> log文件;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>php</tag>
      
      <tag>bt</tag>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B站视频播放测试</title>
    <link href="/test/22894/"/>
    <url>/test/22894/</url>
    
    <content type="html"><![CDATA[<p>S.H.E很多人的青春</p> <div style="position: relative; padding: 40% 45%;"> <iframe src="//player.bilibili.com/player.html?aid=800734105&bvid=BV1xy4y1i7ts&cid=268994117&page=1" scrolling="no" border="0" frameborder="no"          framespacing="0" allowfullscreen="true"          style="position: absolute; width: 100%;          height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    <categories>
      
      <category>功能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bilibili</tag>
      
      <tag>B站</tag>
      
      <tag>S.H.E</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英华学堂</title>
    <link href="/teasing/33688/"/>
    <url>/teasing/33688/</url>
    
    <content type="html"><![CDATA[<h1 id="傻逼平台"><a href="#傻逼平台" class="headerlink" title="傻逼平台"></a>傻逼平台</h1><h1 id="傻逼平台-1"><a href="#傻逼平台-1" class="headerlink" title="傻逼平台"></a>傻逼平台</h1><h1 id="傻逼平台-2"><a href="#傻逼平台-2" class="headerlink" title="傻逼平台"></a>傻逼平台</h1><p>提交的作业连tm的答案都没有，还tm要去看视频对答案，傻逼老师，傻逼平台</p>]]></content>
    
    
    <categories>
      
      <category>吐槽专区</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英华学堂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言冒泡、选择排序算法</title>
    <link href="/coding/18560/"/>
    <url>/coding/18560/</url>
    
    <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>void select<span class="hljs-constructor">_sort(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span>;<br>void bubble<span class="hljs-constructor">_sort(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span>;<br>void point<span class="hljs-constructor">_arr(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[], <span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span>;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span> &#123;<br>    <span class="hljs-built_in">int</span> a<span class="hljs-literal">[<span class="hljs-number">20</span>]</span> = &#123;<span class="hljs-number">16</span>,<span class="hljs-number">84</span>,<span class="hljs-number">84</span>,<span class="hljs-number">16</span>,<span class="hljs-number">2</span>,<span class="hljs-number">74</span>,<span class="hljs-number">26</span>,<span class="hljs-number">61</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">28</span>,<span class="hljs-number">99</span>,<span class="hljs-number">84</span>,<span class="hljs-number">74</span>,<span class="hljs-number">62</span>,<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">88</span>,<span class="hljs-number">45</span>,<span class="hljs-number">84</span>&#125;;<br>    <span class="hljs-built_in">int</span> b<span class="hljs-literal">[<span class="hljs-number">20</span>]</span> = &#123;<span class="hljs-number">26</span>,<span class="hljs-number">84</span>,<span class="hljs-number">84</span>,<span class="hljs-number">86</span>,<span class="hljs-number">2</span>,<span class="hljs-number">84</span>,<span class="hljs-number">26</span>,<span class="hljs-number">81</span>,<span class="hljs-number">8</span>,<span class="hljs-number">84</span>,<span class="hljs-number">78</span>,<span class="hljs-number">49</span>,<span class="hljs-number">84</span>,<span class="hljs-number">44</span>,<span class="hljs-number">62</span>,<span class="hljs-number">20</span>,<span class="hljs-number">26</span>,<span class="hljs-number">88</span>,<span class="hljs-number">45</span>,<span class="hljs-number">84</span>&#125;;<br>    printf(<span class="hljs-string">&quot;冒炮排序排序之前：\n&quot;</span>);<br>    point<span class="hljs-constructor">_arr(<span class="hljs-params">a</span>, 20)</span>;<br>    <span class="hljs-comment">//进行排序</span><br>    bubble<span class="hljs-constructor">_sort(<span class="hljs-params">a</span>, 20)</span>;<br>    printf(<span class="hljs-string">&quot;冒炮排序排序之后：\n&quot;</span>);<br>    point<span class="hljs-constructor">_arr(<span class="hljs-params">a</span>, 20)</span>;<br><br>    printf(<span class="hljs-string">&quot;选择排序排序之前：\n&quot;</span>);<br>    point<span class="hljs-constructor">_arr(<span class="hljs-params">b</span>, 20)</span>;<br>    <span class="hljs-comment">//进行排序</span><br>    select<span class="hljs-constructor">_sort(<span class="hljs-params">b</span>, 20)</span>;<br>    printf(<span class="hljs-string">&quot;选择排序排序之后：\n&quot;</span>);<br>    point<span class="hljs-constructor">_arr(<span class="hljs-params">b</span>, 20)</span>;<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br>void point<span class="hljs-constructor">_arr(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[], <span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        printf(<span class="hljs-string">&quot;%d,&quot;</span>, a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//选择排序实现</span><br>void select<span class="hljs-constructor">_sort(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span><span class="hljs-comment">//n为数组a的元素个数</span><br>&#123;<br>    <span class="hljs-comment">//进行N-1轮选择</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;n-<span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">int</span> min_index = i;<br>        <span class="hljs-comment">//找出第i小的数所在的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &lt; a<span class="hljs-literal">[<span class="hljs-identifier">min_index</span>]</span>)<br>            &#123;<br>                min_index = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//将第i小的数，放在第i个位置；如果刚好，就不用交换</span><br>        <span class="hljs-keyword">if</span>( i != min_index)<br>        &#123;<br>            <span class="hljs-built_in">int</span> temp = a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>            a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = a<span class="hljs-literal">[<span class="hljs-identifier">min_index</span>]</span>;<br>            a<span class="hljs-literal">[<span class="hljs-identifier">min_index</span>]</span> = temp;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//冒泡排序实现</span><br>void bubble<span class="hljs-constructor">_sort(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span><span class="hljs-comment">//n为数组a的元素个数</span><br>&#123;<br>    <span class="hljs-comment">//一定进行N-1轮比较</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;n-<span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">//每一轮比较前n-1-i个，即已排序好的最后i个不用比较</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>; j&lt;n-<span class="hljs-number">1</span>-i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &gt; a<span class="hljs-literal">[<span class="hljs-identifier">j</span>+<span class="hljs-number">1</span>]</span>)<br>            &#123;<br>                <span class="hljs-built_in">int</span> temp = a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>                a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = a<span class="hljs-literal">[<span class="hljs-identifier">j</span>+<span class="hljs-number">1</span>]</span>;<br>                a<span class="hljs-literal">[<span class="hljs-identifier">j</span>+<span class="hljs-number">1</span>]</span>=temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>排列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客系统成功上线</title>
    <link href="/deploy/47312/"/>
    <url>/deploy/47312/</url>
    
    <content type="html"><![CDATA[<p>第一个博客系统成功上线</p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
      <tag>typecho</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>网站日记</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><h4 id="2021年11月26日"><a href="#2021年11月26日" class="headerlink" title="2021年11月26日"></a>2021年11月26日</h4><p>网站上线，添加了<a href="https://github.com/whitebearcode/typecho-bearsimple">BearSimple</a>主题</p><h4 id="2021年12月12日"><a href="#2021年12月12日" class="headerlink" title="2021年12月12日"></a>2021年12月12日</h4><p>上线了<a href="https://www.onlinegdb.com/">在线IDE</a>、<a href="https://www.qssily.com/">导航</a></p><h4 id="2022年06月26日"><a href="#2022年06月26日" class="headerlink" title="2022年06月26日"></a>2022年06月26日</h4><p>舍弃了<a href="https://www.yecaoyun.com/">野草云</a>，换成<a href="https://dogyun.com/">狗云</a></p><h4 id="2022年06月26日-1"><a href="#2022年06月26日-1" class="headerlink" title="2022年06月26日"></a>2022年06月26日</h4><p>恢复了<a href="https://gitee.com/">码云</a>中无法访问的全部图片</p><h4 id="2022年07月17日"><a href="#2022年07月17日" class="headerlink" title="2022年07月17日"></a>2022年07月17日</h4><p>添加了对LaLex公式的支持</p><h4 id="2022年07月20日"><a href="#2022年07月20日" class="headerlink" title="2022年07月20日"></a>2022年07月20日</h4><p>替换博客为<a href="https://cn.wordpress.org/">WordPress</a>，更换主题为<a href="https://github.com/solstice23/argon-theme">Argon</a></p><h4 id="2022年07月26日"><a href="#2022年07月26日" class="headerlink" title="2022年07月26日"></a>2022年07月26日</h4><p>添加了hexo的<a href="https://eldpepx.net/">备份站点</a>，主题为<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><h4 id="2022年08月08日"><a href="#2022年08月08日" class="headerlink" title="2022年08月08日"></a>2022年08月08日</h4><p>使用<a href="https://vercel.com/">Vercel</a>部署了站点，并且<a href="https://www.eldpepar.com/">主站</a>转移到此</p></div>]]></content>
    
  </entry>
  
  
  
</search>
